// <auto-generated>
/*
 * Twitch API Swagger UI (Unofficial)
 *
 * Unofficial Swagger UI for Twitch API.  All endpoints are generated automatically from the [twitch docs](https://dev.twitch.tv/docs/api/reference) page.  __Features:__  * Swagger UI for all Twitch API endpoints * Schemas for _Request Query Parameters_, _Request Body_, _Response Body_ * Some additional schemas like _Clip_, _ChatBadge_, _Prediction_, _Game_, _Channel_, _Video_ etc. * Response codes and examples * Generated types for TypeScript: [ts-twitch-api](https://github.com/DmitryScaletta/ts-twitch-api)  __Repository:__ [github.com/DmitryScaletta/twitch-api-swagger](https://github.com/DmitryScaletta/twitch-api-swagger)
 *
 * The version of the OpenAPI document: helix
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using TwistedTaleweaver.Integration.Twitch.Helix.Client;
using TwistedTaleweaver.Integration.Twitch.Helix.Model;
using System.Diagnostics.CodeAnalysis;

namespace TwistedTaleweaver.Integration.Twitch.Helix.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IGuestStarApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        GuestStarApiEvents Events { get; }

        /// <summary>
        /// BETA Allows a previously invited user to be assigned a slot within the active Guest Star session.
        /// </summary>
        /// <remarks>
        /// BETA Allows a previously invited user to be assigned a slot within the active Guest Star session, once that guest has indicated they are ready to join.  __Authorization:__  * Query parameter &#x60;moderator_id&#x60; must match the &#x60;user_id&#x60; in the [User-Access token](https://dev.twitch.tv/docs/authentication#user-access-tokens) * Requires OAuth Scope: &#x60;channel:manage:guest_star&#x60; or &#x60;moderator:manage:guest_star&#x60;
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="broadcasterId">The ID of the broadcaster running the Guest Star session.</param>
        /// <param name="moderatorId">The ID of the broadcaster or a user that has permission to moderate the broadcaster’s chat room. This ID must match the &#x60;user_id&#x60; in the user access token.</param>
        /// <param name="sessionId">The ID of the Guest Star session in which to assign the slot.</param>
        /// <param name="guestId">The Twitch User ID corresponding to the guest to assign a slot in the session. This user must already have an invite to this session, and have indicated that they are ready to join.</param>
        /// <param name="slotId">The slot assignment to give to the user. Must be a numeric identifier between “1” and “N” where N is the max number of slots for the session. Max number of slots allowed for the session is reported by [Get Channel Guest Star Settings](https://dev.twitch.tv/docs/api/reference#get-channel-guest-star-settings).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAssignGuestStarSlotApiResponse"/>&gt;</returns>
        Task<IAssignGuestStarSlotApiResponse> AssignGuestStarSlotAsync(string broadcasterId, string moderatorId, string sessionId, string guestId, string slotId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// BETA Allows a previously invited user to be assigned a slot within the active Guest Star session.
        /// </summary>
        /// <remarks>
        /// BETA Allows a previously invited user to be assigned a slot within the active Guest Star session, once that guest has indicated they are ready to join.  __Authorization:__  * Query parameter &#x60;moderator_id&#x60; must match the &#x60;user_id&#x60; in the [User-Access token](https://dev.twitch.tv/docs/authentication#user-access-tokens) * Requires OAuth Scope: &#x60;channel:manage:guest_star&#x60; or &#x60;moderator:manage:guest_star&#x60;
        /// </remarks>
        /// <param name="broadcasterId">The ID of the broadcaster running the Guest Star session.</param>
        /// <param name="moderatorId">The ID of the broadcaster or a user that has permission to moderate the broadcaster’s chat room. This ID must match the &#x60;user_id&#x60; in the user access token.</param>
        /// <param name="sessionId">The ID of the Guest Star session in which to assign the slot.</param>
        /// <param name="guestId">The Twitch User ID corresponding to the guest to assign a slot in the session. This user must already have an invite to this session, and have indicated that they are ready to join.</param>
        /// <param name="slotId">The slot assignment to give to the user. Must be a numeric identifier between “1” and “N” where N is the max number of slots for the session. Max number of slots allowed for the session is reported by [Get Channel Guest Star Settings](https://dev.twitch.tv/docs/api/reference#get-channel-guest-star-settings).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAssignGuestStarSlotApiResponse"/>?&gt;</returns>
        Task<IAssignGuestStarSlotApiResponse?> AssignGuestStarSlotOrDefaultAsync(string broadcasterId, string moderatorId, string sessionId, string guestId, string slotId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// BETA Programmatically creates a Guest Star session on behalf of the broadcaster.
        /// </summary>
        /// <remarks>
        /// BETA Programmatically creates a Guest Star session on behalf of the broadcaster. Requires the broadcaster to be present in the call interface, or the call will be ended automatically.  __Authorization:__  * Query parameter &#x60;broadcaster_id&#x60; must match the &#x60;user_id&#x60; in the [User-Access token](https://dev.twitch.tv/docs/authentication#user-access-tokens) * Requires OAuth Scope: &#x60;channel:manage:guest_star&#x60;
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="broadcasterId">The ID of the broadcaster you want to create a Guest Star session for. Provided &#x60;broadcaster_id&#x60; must match the &#x60;user_id&#x60; in the auth token.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateGuestStarSessionApiResponse"/>&gt;</returns>
        Task<ICreateGuestStarSessionApiResponse> CreateGuestStarSessionAsync(string broadcasterId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// BETA Programmatically creates a Guest Star session on behalf of the broadcaster.
        /// </summary>
        /// <remarks>
        /// BETA Programmatically creates a Guest Star session on behalf of the broadcaster. Requires the broadcaster to be present in the call interface, or the call will be ended automatically.  __Authorization:__  * Query parameter &#x60;broadcaster_id&#x60; must match the &#x60;user_id&#x60; in the [User-Access token](https://dev.twitch.tv/docs/authentication#user-access-tokens) * Requires OAuth Scope: &#x60;channel:manage:guest_star&#x60;
        /// </remarks>
        /// <param name="broadcasterId">The ID of the broadcaster you want to create a Guest Star session for. Provided &#x60;broadcaster_id&#x60; must match the &#x60;user_id&#x60; in the auth token.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateGuestStarSessionApiResponse"/>?&gt;</returns>
        Task<ICreateGuestStarSessionApiResponse?> CreateGuestStarSessionOrDefaultAsync(string broadcasterId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// BETA Revokes a previously sent invite for a Guest Star session.
        /// </summary>
        /// <remarks>
        /// BETA Revokes a previously sent invite for a Guest Star session.  __Authorization:__  * Query parameter &#x60;moderator_id&#x60; must match the &#x60;user_id&#x60; in the [User-Access token](https://dev.twitch.tv/docs/authentication#user-access-tokens) * Requires OAuth Scope: &#x60;channel:manage:guest_star&#x60; or &#x60;moderator:manage:guest_star&#x60;
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="broadcasterId">The ID of the broadcaster running the Guest Star session.</param>
        /// <param name="moderatorId">The ID of the broadcaster or a user that has permission to moderate the broadcaster’s chat room. This ID must match the &#x60;user_id&#x60; in the user access token.</param>
        /// <param name="sessionId">The ID of the session for the invite to be revoked on behalf of the broadcaster.</param>
        /// <param name="guestId">Twitch User ID for the guest to revoke the Guest Star session invite from.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteGuestStarInviteApiResponse"/>&gt;</returns>
        Task<IDeleteGuestStarInviteApiResponse> DeleteGuestStarInviteAsync(string broadcasterId, string moderatorId, string sessionId, string guestId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// BETA Revokes a previously sent invite for a Guest Star session.
        /// </summary>
        /// <remarks>
        /// BETA Revokes a previously sent invite for a Guest Star session.  __Authorization:__  * Query parameter &#x60;moderator_id&#x60; must match the &#x60;user_id&#x60; in the [User-Access token](https://dev.twitch.tv/docs/authentication#user-access-tokens) * Requires OAuth Scope: &#x60;channel:manage:guest_star&#x60; or &#x60;moderator:manage:guest_star&#x60;
        /// </remarks>
        /// <param name="broadcasterId">The ID of the broadcaster running the Guest Star session.</param>
        /// <param name="moderatorId">The ID of the broadcaster or a user that has permission to moderate the broadcaster’s chat room. This ID must match the &#x60;user_id&#x60; in the user access token.</param>
        /// <param name="sessionId">The ID of the session for the invite to be revoked on behalf of the broadcaster.</param>
        /// <param name="guestId">Twitch User ID for the guest to revoke the Guest Star session invite from.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteGuestStarInviteApiResponse"/>?&gt;</returns>
        Task<IDeleteGuestStarInviteApiResponse?> DeleteGuestStarInviteOrDefaultAsync(string broadcasterId, string moderatorId, string sessionId, string guestId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// BETA Allows a caller to remove a slot assignment from a user participating in an active Guest Star session.
        /// </summary>
        /// <remarks>
        /// BETA Allows a caller to remove a slot assignment from a user participating in an active Guest Star session. This revokes their access to the session immediately and disables their access to publish or subscribe to media within the session.  __Authorization:__  * Query parameter &#x60;moderator_id&#x60; must match the &#x60;user_id&#x60; in the [User-Access token](https://dev.twitch.tv/docs/authentication#user-access-tokens) * Requires OAuth Scope: &#x60;channel:manage:guest_star&#x60; or &#x60;moderator:manage:guest_star&#x60;
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="broadcasterId">The ID of the broadcaster running the Guest Star session.</param>
        /// <param name="moderatorId">The ID of the broadcaster or a user that has permission to moderate the broadcaster’s chat room. This ID must match the user ID in the user access token.</param>
        /// <param name="sessionId">The ID of the Guest Star session in which to remove the slot assignment.</param>
        /// <param name="guestId">The Twitch User ID corresponding to the guest to remove from the session.</param>
        /// <param name="slotId">The slot ID representing the slot assignment to remove from the session.</param>
        /// <param name="shouldReinviteGuest">Flag signaling that the guest should be reinvited to the session, sending them back to the invite queue. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteGuestStarSlotApiResponse"/>&gt;</returns>
        Task<IDeleteGuestStarSlotApiResponse> DeleteGuestStarSlotAsync(string broadcasterId, string moderatorId, string sessionId, string guestId, string slotId, Option<string> shouldReinviteGuest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// BETA Allows a caller to remove a slot assignment from a user participating in an active Guest Star session.
        /// </summary>
        /// <remarks>
        /// BETA Allows a caller to remove a slot assignment from a user participating in an active Guest Star session. This revokes their access to the session immediately and disables their access to publish or subscribe to media within the session.  __Authorization:__  * Query parameter &#x60;moderator_id&#x60; must match the &#x60;user_id&#x60; in the [User-Access token](https://dev.twitch.tv/docs/authentication#user-access-tokens) * Requires OAuth Scope: &#x60;channel:manage:guest_star&#x60; or &#x60;moderator:manage:guest_star&#x60;
        /// </remarks>
        /// <param name="broadcasterId">The ID of the broadcaster running the Guest Star session.</param>
        /// <param name="moderatorId">The ID of the broadcaster or a user that has permission to moderate the broadcaster’s chat room. This ID must match the user ID in the user access token.</param>
        /// <param name="sessionId">The ID of the Guest Star session in which to remove the slot assignment.</param>
        /// <param name="guestId">The Twitch User ID corresponding to the guest to remove from the session.</param>
        /// <param name="slotId">The slot ID representing the slot assignment to remove from the session.</param>
        /// <param name="shouldReinviteGuest">Flag signaling that the guest should be reinvited to the session, sending them back to the invite queue. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteGuestStarSlotApiResponse"/>?&gt;</returns>
        Task<IDeleteGuestStarSlotApiResponse?> DeleteGuestStarSlotOrDefaultAsync(string broadcasterId, string moderatorId, string sessionId, string guestId, string slotId, Option<string> shouldReinviteGuest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// BETA Programmatically ends a Guest Star session on behalf of the broadcaster.
        /// </summary>
        /// <remarks>
        /// BETA Programmatically ends a Guest Star session on behalf of the broadcaster. Performs the same action as if the host clicked the “End Call” button in the Guest Star UI.  __Authorization:__  * Query parameter &#x60;broadcaster_id&#x60; must match the &#x60;user_id&#x60; in the [User-Access token](https://dev.twitch.tv/docs/authentication#user-access-tokens) * Requires OAuth Scope: &#x60;channel:manage:guest_star&#x60;
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="broadcasterId">The ID of the broadcaster you want to end a Guest Star session for. Provided &#x60;broadcaster_id&#x60; must match the &#x60;user_id&#x60; in the auth token.</param>
        /// <param name="sessionId">ID for the session to end on behalf of the broadcaster.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEndGuestStarSessionApiResponse"/>&gt;</returns>
        Task<IEndGuestStarSessionApiResponse> EndGuestStarSessionAsync(string broadcasterId, string sessionId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// BETA Programmatically ends a Guest Star session on behalf of the broadcaster.
        /// </summary>
        /// <remarks>
        /// BETA Programmatically ends a Guest Star session on behalf of the broadcaster. Performs the same action as if the host clicked the “End Call” button in the Guest Star UI.  __Authorization:__  * Query parameter &#x60;broadcaster_id&#x60; must match the &#x60;user_id&#x60; in the [User-Access token](https://dev.twitch.tv/docs/authentication#user-access-tokens) * Requires OAuth Scope: &#x60;channel:manage:guest_star&#x60;
        /// </remarks>
        /// <param name="broadcasterId">The ID of the broadcaster you want to end a Guest Star session for. Provided &#x60;broadcaster_id&#x60; must match the &#x60;user_id&#x60; in the auth token.</param>
        /// <param name="sessionId">ID for the session to end on behalf of the broadcaster.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEndGuestStarSessionApiResponse"/>?&gt;</returns>
        Task<IEndGuestStarSessionApiResponse?> EndGuestStarSessionOrDefaultAsync(string broadcasterId, string sessionId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// BETA Gets the channel settings for configuration of the Guest Star feature for a particular host.
        /// </summary>
        /// <remarks>
        /// BETA Gets the channel settings for configuration of the Guest Star feature for a particular host.  __Authorization:__  * Query parameter &#x60;moderator_id&#x60; must match the &#x60;user_id&#x60; in the [User-Access token](https://dev.twitch.tv/docs/authentication#user-access-tokens) * Requires OAuth Scope: &#x60;channel:read:guest_star&#x60;, &#x60;channel:manage:guest_star&#x60;, &#x60;moderator:read:guest_star&#x60; or &#x60;moderator:manage:guest_star&#x60;
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="broadcasterId">The ID of the broadcaster you want to get guest star settings for.</param>
        /// <param name="moderatorId">The ID of the broadcaster or a user that has permission to moderate the broadcaster’s chat room. This ID must match the user ID in the user access token.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChannelGuestStarSettingsApiResponse"/>&gt;</returns>
        Task<IGetChannelGuestStarSettingsApiResponse> GetChannelGuestStarSettingsAsync(string broadcasterId, string moderatorId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// BETA Gets the channel settings for configuration of the Guest Star feature for a particular host.
        /// </summary>
        /// <remarks>
        /// BETA Gets the channel settings for configuration of the Guest Star feature for a particular host.  __Authorization:__  * Query parameter &#x60;moderator_id&#x60; must match the &#x60;user_id&#x60; in the [User-Access token](https://dev.twitch.tv/docs/authentication#user-access-tokens) * Requires OAuth Scope: &#x60;channel:read:guest_star&#x60;, &#x60;channel:manage:guest_star&#x60;, &#x60;moderator:read:guest_star&#x60; or &#x60;moderator:manage:guest_star&#x60;
        /// </remarks>
        /// <param name="broadcasterId">The ID of the broadcaster you want to get guest star settings for.</param>
        /// <param name="moderatorId">The ID of the broadcaster or a user that has permission to moderate the broadcaster’s chat room. This ID must match the user ID in the user access token.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChannelGuestStarSettingsApiResponse"/>?&gt;</returns>
        Task<IGetChannelGuestStarSettingsApiResponse?> GetChannelGuestStarSettingsOrDefaultAsync(string broadcasterId, string moderatorId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// BETA Provides the caller with a list of pending invites to a Guest Star session.
        /// </summary>
        /// <remarks>
        /// BETA Provides the caller with a list of pending invites to a Guest Star session, including the invitee’s ready status while joining the waiting room.  __Authorization:__  * Query parameter &#x60;broadcaster_id&#x60; must match the &#x60;user_id&#x60; in the [User-Access token](https://dev.twitch.tv/docs/authentication#user-access-tokens) * Requires OAuth Scope: &#x60;channel:read:guest_star&#x60;, &#x60;channel:manage:guest_star&#x60;, &#x60;moderator:read:guest_star&#x60; or &#x60;moderator:manage:guest_star&#x60;
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="broadcasterId">The ID of the broadcaster running the Guest Star session.</param>
        /// <param name="moderatorId">The ID of the broadcaster or a user that has permission to moderate the broadcaster’s chat room. This ID must match the &#x60;user_id&#x60; in the user access token.</param>
        /// <param name="sessionId">The session ID to query for invite status.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetGuestStarInvitesApiResponse"/>&gt;</returns>
        Task<IGetGuestStarInvitesApiResponse> GetGuestStarInvitesAsync(string broadcasterId, string moderatorId, string sessionId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// BETA Provides the caller with a list of pending invites to a Guest Star session.
        /// </summary>
        /// <remarks>
        /// BETA Provides the caller with a list of pending invites to a Guest Star session, including the invitee’s ready status while joining the waiting room.  __Authorization:__  * Query parameter &#x60;broadcaster_id&#x60; must match the &#x60;user_id&#x60; in the [User-Access token](https://dev.twitch.tv/docs/authentication#user-access-tokens) * Requires OAuth Scope: &#x60;channel:read:guest_star&#x60;, &#x60;channel:manage:guest_star&#x60;, &#x60;moderator:read:guest_star&#x60; or &#x60;moderator:manage:guest_star&#x60;
        /// </remarks>
        /// <param name="broadcasterId">The ID of the broadcaster running the Guest Star session.</param>
        /// <param name="moderatorId">The ID of the broadcaster or a user that has permission to moderate the broadcaster’s chat room. This ID must match the &#x60;user_id&#x60; in the user access token.</param>
        /// <param name="sessionId">The session ID to query for invite status.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetGuestStarInvitesApiResponse"/>?&gt;</returns>
        Task<IGetGuestStarInvitesApiResponse?> GetGuestStarInvitesOrDefaultAsync(string broadcasterId, string moderatorId, string sessionId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// BETA Gets information about an ongoing Guest Star session for a particular channel.
        /// </summary>
        /// <remarks>
        /// BETA Gets information about an ongoing Guest Star session for a particular channel.  __Authorization:__  * Requires OAuth Scope: &#x60;channel:read:guest_star&#x60;, &#x60;channel:manage:guest_star&#x60;, &#x60;moderator:read:guest_star&#x60; or &#x60;moderator:manage:guest_star&#x60; * Guests must be either invited or assigned a slot within the session
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="broadcasterId">ID for the user hosting the Guest Star session.</param>
        /// <param name="moderatorId">The ID of the broadcaster or a user that has permission to moderate the broadcaster’s chat room. This ID must match the user ID in the user access token.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetGuestStarSessionApiResponse"/>&gt;</returns>
        Task<IGetGuestStarSessionApiResponse> GetGuestStarSessionAsync(string broadcasterId, string moderatorId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// BETA Gets information about an ongoing Guest Star session for a particular channel.
        /// </summary>
        /// <remarks>
        /// BETA Gets information about an ongoing Guest Star session for a particular channel.  __Authorization:__  * Requires OAuth Scope: &#x60;channel:read:guest_star&#x60;, &#x60;channel:manage:guest_star&#x60;, &#x60;moderator:read:guest_star&#x60; or &#x60;moderator:manage:guest_star&#x60; * Guests must be either invited or assigned a slot within the session
        /// </remarks>
        /// <param name="broadcasterId">ID for the user hosting the Guest Star session.</param>
        /// <param name="moderatorId">The ID of the broadcaster or a user that has permission to moderate the broadcaster’s chat room. This ID must match the user ID in the user access token.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetGuestStarSessionApiResponse"/>?&gt;</returns>
        Task<IGetGuestStarSessionApiResponse?> GetGuestStarSessionOrDefaultAsync(string broadcasterId, string moderatorId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// BETA Sends an invite to a specified guest on behalf of the broadcaster for a Guest Star session in progress.
        /// </summary>
        /// <remarks>
        /// BETA Sends an invite to a specified guest on behalf of the broadcaster for a Guest Star session in progress.  __Authorization:__  * Query parameter &#x60;moderator_id&#x60; must match the &#x60;user_id&#x60; in the [User-Access token](https://dev.twitch.tv/docs/authentication#user-access-tokens) * Requires OAuth Scope: &#x60;channel:manage:guest_star&#x60; or &#x60;moderator:manage:guest_star&#x60;
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="broadcasterId">The ID of the broadcaster running the Guest Star session.</param>
        /// <param name="moderatorId">The ID of the broadcaster or a user that has permission to moderate the broadcaster’s chat room. This ID must match the &#x60;user_id&#x60; in the user access token.</param>
        /// <param name="sessionId">The session ID for the invite to be sent on behalf of the broadcaster.</param>
        /// <param name="guestId">Twitch User ID for the guest to invite to the Guest Star session.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendGuestStarInviteApiResponse"/>&gt;</returns>
        Task<ISendGuestStarInviteApiResponse> SendGuestStarInviteAsync(string broadcasterId, string moderatorId, string sessionId, string guestId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// BETA Sends an invite to a specified guest on behalf of the broadcaster for a Guest Star session in progress.
        /// </summary>
        /// <remarks>
        /// BETA Sends an invite to a specified guest on behalf of the broadcaster for a Guest Star session in progress.  __Authorization:__  * Query parameter &#x60;moderator_id&#x60; must match the &#x60;user_id&#x60; in the [User-Access token](https://dev.twitch.tv/docs/authentication#user-access-tokens) * Requires OAuth Scope: &#x60;channel:manage:guest_star&#x60; or &#x60;moderator:manage:guest_star&#x60;
        /// </remarks>
        /// <param name="broadcasterId">The ID of the broadcaster running the Guest Star session.</param>
        /// <param name="moderatorId">The ID of the broadcaster or a user that has permission to moderate the broadcaster’s chat room. This ID must match the &#x60;user_id&#x60; in the user access token.</param>
        /// <param name="sessionId">The session ID for the invite to be sent on behalf of the broadcaster.</param>
        /// <param name="guestId">Twitch User ID for the guest to invite to the Guest Star session.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendGuestStarInviteApiResponse"/>?&gt;</returns>
        Task<ISendGuestStarInviteApiResponse?> SendGuestStarInviteOrDefaultAsync(string broadcasterId, string moderatorId, string sessionId, string guestId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// BETA Mutates the channel settings for configuration of the Guest Star feature for a particular host.
        /// </summary>
        /// <remarks>
        /// BETA Mutates the channel settings for configuration of the Guest Star feature for a particular host.  __Authorization:__  * Query parameter &#x60;broadcaster_id&#x60; must match the &#x60;user_id&#x60; in the [User-Access token](https://dev.twitch.tv/docs/authentication#user-access-tokens) * Requires OAuth Scope: &#x60;channel:manage:guest_star&#x60;
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="broadcasterId">The ID of the broadcaster you want to update Guest Star settings for.</param>
        /// <param name="updateChannelGuestStarSettingsBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateChannelGuestStarSettingsApiResponse"/>&gt;</returns>
        Task<IUpdateChannelGuestStarSettingsApiResponse> UpdateChannelGuestStarSettingsAsync(string broadcasterId, Option<UpdateChannelGuestStarSettingsBody> updateChannelGuestStarSettingsBody = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// BETA Mutates the channel settings for configuration of the Guest Star feature for a particular host.
        /// </summary>
        /// <remarks>
        /// BETA Mutates the channel settings for configuration of the Guest Star feature for a particular host.  __Authorization:__  * Query parameter &#x60;broadcaster_id&#x60; must match the &#x60;user_id&#x60; in the [User-Access token](https://dev.twitch.tv/docs/authentication#user-access-tokens) * Requires OAuth Scope: &#x60;channel:manage:guest_star&#x60;
        /// </remarks>
        /// <param name="broadcasterId">The ID of the broadcaster you want to update Guest Star settings for.</param>
        /// <param name="updateChannelGuestStarSettingsBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateChannelGuestStarSettingsApiResponse"/>?&gt;</returns>
        Task<IUpdateChannelGuestStarSettingsApiResponse?> UpdateChannelGuestStarSettingsOrDefaultAsync(string broadcasterId, Option<UpdateChannelGuestStarSettingsBody> updateChannelGuestStarSettingsBody = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// BETA Allows a user to update the assigned slot for a particular user within the active Guest Star session.
        /// </summary>
        /// <remarks>
        /// BETA Allows a user to update the assigned slot for a particular user within the active Guest Star session.  __Authorization:__  * Query parameter &#x60;moderator_id&#x60; must match the &#x60;user_id&#x60; in the [User-Access token](https://dev.twitch.tv/docs/authentication#user-access-tokens) * Requires OAuth Scope: &#x60;channel:manage:guest_star&#x60; or &#x60;moderator:manage:guest_star&#x60;
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="broadcasterId">The ID of the broadcaster running the Guest Star session.</param>
        /// <param name="moderatorId">The ID of the broadcaster or a user that has permission to moderate the broadcaster’s chat room. This ID must match the &#x60;user_id&#x60; in the user access token.</param>
        /// <param name="sessionId">The ID of the Guest Star session in which to update slot settings.</param>
        /// <param name="sourceSlotId">The slot assignment previously assigned to a user.</param>
        /// <param name="destinationSlotId">The slot to move this user assignment to. If the destination slot is occupied, the user assigned will be swapped into &#x60;source_slot_id&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateGuestStarSlotApiResponse"/>&gt;</returns>
        Task<IUpdateGuestStarSlotApiResponse> UpdateGuestStarSlotAsync(string broadcasterId, string moderatorId, string sessionId, string sourceSlotId, Option<string> destinationSlotId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// BETA Allows a user to update the assigned slot for a particular user within the active Guest Star session.
        /// </summary>
        /// <remarks>
        /// BETA Allows a user to update the assigned slot for a particular user within the active Guest Star session.  __Authorization:__  * Query parameter &#x60;moderator_id&#x60; must match the &#x60;user_id&#x60; in the [User-Access token](https://dev.twitch.tv/docs/authentication#user-access-tokens) * Requires OAuth Scope: &#x60;channel:manage:guest_star&#x60; or &#x60;moderator:manage:guest_star&#x60;
        /// </remarks>
        /// <param name="broadcasterId">The ID of the broadcaster running the Guest Star session.</param>
        /// <param name="moderatorId">The ID of the broadcaster or a user that has permission to moderate the broadcaster’s chat room. This ID must match the &#x60;user_id&#x60; in the user access token.</param>
        /// <param name="sessionId">The ID of the Guest Star session in which to update slot settings.</param>
        /// <param name="sourceSlotId">The slot assignment previously assigned to a user.</param>
        /// <param name="destinationSlotId">The slot to move this user assignment to. If the destination slot is occupied, the user assigned will be swapped into &#x60;source_slot_id&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateGuestStarSlotApiResponse"/>?&gt;</returns>
        Task<IUpdateGuestStarSlotApiResponse?> UpdateGuestStarSlotOrDefaultAsync(string broadcasterId, string moderatorId, string sessionId, string sourceSlotId, Option<string> destinationSlotId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// BETA Allows a user to update slot settings for a particular guest within a Guest Star session.
        /// </summary>
        /// <remarks>
        /// BETA Allows a user to update slot settings for a particular guest within a Guest Star session, such as allowing the user to share audio or video within the call as a host. These settings will be broadcasted to all subscribers which control their view of the guest in that slot. One or more of the optional parameters to this API can be specified at any time.  __Authorization:__  * Query parameter &#x60;moderator_id&#x60; must match the &#x60;user_id&#x60; in the [User-Access token](https://dev.twitch.tv/docs/authentication#user-access-tokens) * Requires OAuth Scope: &#x60;channel:manage:guest_star&#x60; or &#x60;moderator:manage:guest_star&#x60;
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="broadcasterId">The ID of the broadcaster running the Guest Star session.</param>
        /// <param name="moderatorId">The ID of the broadcaster or a user that has permission to moderate the broadcaster’s chat room. This ID must match the user ID in the user access token.</param>
        /// <param name="sessionId">The ID of the Guest Star session in which to update a slot’s settings.</param>
        /// <param name="slotId">The slot assignment that has previously been assigned to a user.</param>
        /// <param name="isAudioEnabled">Flag indicating whether the slot is allowed to share their audio with the rest of the session. If false, the slot will be muted in any views containing the slot. (optional)</param>
        /// <param name="isVideoEnabled">Flag indicating whether the slot is allowed to share their video with the rest of the session. If false, the slot will have no video shared in any views containing the slot. (optional)</param>
        /// <param name="isLive">Flag indicating whether the user assigned to this slot is visible/can be heard from any public subscriptions. Generally, this determines whether or not the slot is enabled in any broadcasting software integrations. (optional)</param>
        /// <param name="volume">Value from 0-100 that controls the audio volume for shared views containing the slot. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateGuestStarSlotSettingsApiResponse"/>&gt;</returns>
        Task<IUpdateGuestStarSlotSettingsApiResponse> UpdateGuestStarSlotSettingsAsync(string broadcasterId, string moderatorId, string sessionId, string slotId, Option<bool> isAudioEnabled = default, Option<bool> isVideoEnabled = default, Option<bool> isLive = default, Option<int> volume = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// BETA Allows a user to update slot settings for a particular guest within a Guest Star session.
        /// </summary>
        /// <remarks>
        /// BETA Allows a user to update slot settings for a particular guest within a Guest Star session, such as allowing the user to share audio or video within the call as a host. These settings will be broadcasted to all subscribers which control their view of the guest in that slot. One or more of the optional parameters to this API can be specified at any time.  __Authorization:__  * Query parameter &#x60;moderator_id&#x60; must match the &#x60;user_id&#x60; in the [User-Access token](https://dev.twitch.tv/docs/authentication#user-access-tokens) * Requires OAuth Scope: &#x60;channel:manage:guest_star&#x60; or &#x60;moderator:manage:guest_star&#x60;
        /// </remarks>
        /// <param name="broadcasterId">The ID of the broadcaster running the Guest Star session.</param>
        /// <param name="moderatorId">The ID of the broadcaster or a user that has permission to moderate the broadcaster’s chat room. This ID must match the user ID in the user access token.</param>
        /// <param name="sessionId">The ID of the Guest Star session in which to update a slot’s settings.</param>
        /// <param name="slotId">The slot assignment that has previously been assigned to a user.</param>
        /// <param name="isAudioEnabled">Flag indicating whether the slot is allowed to share their audio with the rest of the session. If false, the slot will be muted in any views containing the slot. (optional)</param>
        /// <param name="isVideoEnabled">Flag indicating whether the slot is allowed to share their video with the rest of the session. If false, the slot will have no video shared in any views containing the slot. (optional)</param>
        /// <param name="isLive">Flag indicating whether the user assigned to this slot is visible/can be heard from any public subscriptions. Generally, this determines whether or not the slot is enabled in any broadcasting software integrations. (optional)</param>
        /// <param name="volume">Value from 0-100 that controls the audio volume for shared views containing the slot. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateGuestStarSlotSettingsApiResponse"/>?&gt;</returns>
        Task<IUpdateGuestStarSlotSettingsApiResponse?> UpdateGuestStarSlotSettingsOrDefaultAsync(string broadcasterId, string moderatorId, string sessionId, string slotId, Option<bool> isAudioEnabled = default, Option<bool> isVideoEnabled = default, Option<bool> isLive = default, Option<int> volume = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IAssignGuestStarSlotApiResponse"/>
    /// </summary>
    public interface IAssignGuestStarSlotApiResponse : TwistedTaleweaver.Integration.Twitch.Helix.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }
    }

    /// <summary>
    /// The <see cref="ICreateGuestStarSessionApiResponse"/>
    /// </summary>
    public interface ICreateGuestStarSessionApiResponse : TwistedTaleweaver.Integration.Twitch.Helix.Client.IApiResponse, IOk<TwistedTaleweaver.Integration.Twitch.Helix.Model.CreateGuestStarSessionResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteGuestStarInviteApiResponse"/>
    /// </summary>
    public interface IDeleteGuestStarInviteApiResponse : TwistedTaleweaver.Integration.Twitch.Helix.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteGuestStarSlotApiResponse"/>
    /// </summary>
    public interface IDeleteGuestStarSlotApiResponse : TwistedTaleweaver.Integration.Twitch.Helix.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IEndGuestStarSessionApiResponse"/>
    /// </summary>
    public interface IEndGuestStarSessionApiResponse : TwistedTaleweaver.Integration.Twitch.Helix.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }
    }

    /// <summary>
    /// The <see cref="IGetChannelGuestStarSettingsApiResponse"/>
    /// </summary>
    public interface IGetChannelGuestStarSettingsApiResponse : TwistedTaleweaver.Integration.Twitch.Helix.Client.IApiResponse, IOk<TwistedTaleweaver.Integration.Twitch.Helix.Model.GetChannelGuestStarSettingsResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }
    }

    /// <summary>
    /// The <see cref="IGetGuestStarInvitesApiResponse"/>
    /// </summary>
    public interface IGetGuestStarInvitesApiResponse : TwistedTaleweaver.Integration.Twitch.Helix.Client.IApiResponse, IOk<TwistedTaleweaver.Integration.Twitch.Helix.Model.GetGuestStarInvitesResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }
    }

    /// <summary>
    /// The <see cref="IGetGuestStarSessionApiResponse"/>
    /// </summary>
    public interface IGetGuestStarSessionApiResponse : TwistedTaleweaver.Integration.Twitch.Helix.Client.IApiResponse, IOk<TwistedTaleweaver.Integration.Twitch.Helix.Model.GetGuestStarSessionResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }
    }

    /// <summary>
    /// The <see cref="ISendGuestStarInviteApiResponse"/>
    /// </summary>
    public interface ISendGuestStarInviteApiResponse : TwistedTaleweaver.Integration.Twitch.Helix.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateChannelGuestStarSettingsApiResponse"/>
    /// </summary>
    public interface IUpdateChannelGuestStarSettingsApiResponse : TwistedTaleweaver.Integration.Twitch.Helix.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateGuestStarSlotApiResponse"/>
    /// </summary>
    public interface IUpdateGuestStarSlotApiResponse : TwistedTaleweaver.Integration.Twitch.Helix.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateGuestStarSlotSettingsApiResponse"/>
    /// </summary>
    public interface IUpdateGuestStarSlotSettingsApiResponse : TwistedTaleweaver.Integration.Twitch.Helix.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class GuestStarApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnAssignGuestStarSlot;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorAssignGuestStarSlot;

        internal void ExecuteOnAssignGuestStarSlot(GuestStarApi.AssignGuestStarSlotApiResponse apiResponse)
        {
            OnAssignGuestStarSlot?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAssignGuestStarSlot(Exception exception)
        {
            OnErrorAssignGuestStarSlot?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateGuestStarSession;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateGuestStarSession;

        internal void ExecuteOnCreateGuestStarSession(GuestStarApi.CreateGuestStarSessionApiResponse apiResponse)
        {
            OnCreateGuestStarSession?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateGuestStarSession(Exception exception)
        {
            OnErrorCreateGuestStarSession?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteGuestStarInvite;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteGuestStarInvite;

        internal void ExecuteOnDeleteGuestStarInvite(GuestStarApi.DeleteGuestStarInviteApiResponse apiResponse)
        {
            OnDeleteGuestStarInvite?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteGuestStarInvite(Exception exception)
        {
            OnErrorDeleteGuestStarInvite?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteGuestStarSlot;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteGuestStarSlot;

        internal void ExecuteOnDeleteGuestStarSlot(GuestStarApi.DeleteGuestStarSlotApiResponse apiResponse)
        {
            OnDeleteGuestStarSlot?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteGuestStarSlot(Exception exception)
        {
            OnErrorDeleteGuestStarSlot?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEndGuestStarSession;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEndGuestStarSession;

        internal void ExecuteOnEndGuestStarSession(GuestStarApi.EndGuestStarSessionApiResponse apiResponse)
        {
            OnEndGuestStarSession?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEndGuestStarSession(Exception exception)
        {
            OnErrorEndGuestStarSession?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetChannelGuestStarSettings;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetChannelGuestStarSettings;

        internal void ExecuteOnGetChannelGuestStarSettings(GuestStarApi.GetChannelGuestStarSettingsApiResponse apiResponse)
        {
            OnGetChannelGuestStarSettings?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetChannelGuestStarSettings(Exception exception)
        {
            OnErrorGetChannelGuestStarSettings?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetGuestStarInvites;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetGuestStarInvites;

        internal void ExecuteOnGetGuestStarInvites(GuestStarApi.GetGuestStarInvitesApiResponse apiResponse)
        {
            OnGetGuestStarInvites?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetGuestStarInvites(Exception exception)
        {
            OnErrorGetGuestStarInvites?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetGuestStarSession;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetGuestStarSession;

        internal void ExecuteOnGetGuestStarSession(GuestStarApi.GetGuestStarSessionApiResponse apiResponse)
        {
            OnGetGuestStarSession?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetGuestStarSession(Exception exception)
        {
            OnErrorGetGuestStarSession?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnSendGuestStarInvite;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorSendGuestStarInvite;

        internal void ExecuteOnSendGuestStarInvite(GuestStarApi.SendGuestStarInviteApiResponse apiResponse)
        {
            OnSendGuestStarInvite?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSendGuestStarInvite(Exception exception)
        {
            OnErrorSendGuestStarInvite?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateChannelGuestStarSettings;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateChannelGuestStarSettings;

        internal void ExecuteOnUpdateChannelGuestStarSettings(GuestStarApi.UpdateChannelGuestStarSettingsApiResponse apiResponse)
        {
            OnUpdateChannelGuestStarSettings?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateChannelGuestStarSettings(Exception exception)
        {
            OnErrorUpdateChannelGuestStarSettings?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateGuestStarSlot;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateGuestStarSlot;

        internal void ExecuteOnUpdateGuestStarSlot(GuestStarApi.UpdateGuestStarSlotApiResponse apiResponse)
        {
            OnUpdateGuestStarSlot?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateGuestStarSlot(Exception exception)
        {
            OnErrorUpdateGuestStarSlot?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateGuestStarSlotSettings;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateGuestStarSlotSettings;

        internal void ExecuteOnUpdateGuestStarSlotSettings(GuestStarApi.UpdateGuestStarSlotSettingsApiResponse apiResponse)
        {
            OnUpdateGuestStarSlotSettings?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateGuestStarSlotSettings(Exception exception)
        {
            OnErrorUpdateGuestStarSlotSettings?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class GuestStarApi : IGuestStarApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<GuestStarApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public GuestStarApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="OauthTokenProvider"/>
        /// </summary>
        public TokenProvider<OAuthToken> OauthTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="GuestStarApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GuestStarApi(ILogger<GuestStarApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, GuestStarApiEvents guestStarApiEvents,
            TokenProvider<OAuthToken> oauthTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<GuestStarApi>();
            HttpClient = httpClient;
            Events = guestStarApiEvents;
            OauthTokenProvider = oauthTokenProvider;
        }

        partial void FormatAssignGuestStarSlot(ref string broadcasterId, ref string moderatorId, ref string sessionId, ref string guestId, ref string slotId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="broadcasterId"></param>
        /// <param name="moderatorId"></param>
        /// <param name="sessionId"></param>
        /// <param name="guestId"></param>
        /// <param name="slotId"></param>
        /// <returns></returns>
        private void ValidateAssignGuestStarSlot(string broadcasterId, string moderatorId, string sessionId, string guestId, string slotId)
        {
            if (broadcasterId == null)
                throw new ArgumentNullException(nameof(broadcasterId));

            if (moderatorId == null)
                throw new ArgumentNullException(nameof(moderatorId));

            if (sessionId == null)
                throw new ArgumentNullException(nameof(sessionId));

            if (guestId == null)
                throw new ArgumentNullException(nameof(guestId));

            if (slotId == null)
                throw new ArgumentNullException(nameof(slotId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="broadcasterId"></param>
        /// <param name="moderatorId"></param>
        /// <param name="sessionId"></param>
        /// <param name="guestId"></param>
        /// <param name="slotId"></param>
        private void AfterAssignGuestStarSlotDefaultImplementation(IAssignGuestStarSlotApiResponse apiResponseLocalVar, string broadcasterId, string moderatorId, string sessionId, string guestId, string slotId)
        {
            bool suppressDefaultLog = false;
            AfterAssignGuestStarSlot(ref suppressDefaultLog, apiResponseLocalVar, broadcasterId, moderatorId, sessionId, guestId, slotId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="broadcasterId"></param>
        /// <param name="moderatorId"></param>
        /// <param name="sessionId"></param>
        /// <param name="guestId"></param>
        /// <param name="slotId"></param>
        partial void AfterAssignGuestStarSlot(ref bool suppressDefaultLog, IAssignGuestStarSlotApiResponse apiResponseLocalVar, string broadcasterId, string moderatorId, string sessionId, string guestId, string slotId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="broadcasterId"></param>
        /// <param name="moderatorId"></param>
        /// <param name="sessionId"></param>
        /// <param name="guestId"></param>
        /// <param name="slotId"></param>
        private void OnErrorAssignGuestStarSlotDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string broadcasterId, string moderatorId, string sessionId, string guestId, string slotId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorAssignGuestStarSlot(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, broadcasterId, moderatorId, sessionId, guestId, slotId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="broadcasterId"></param>
        /// <param name="moderatorId"></param>
        /// <param name="sessionId"></param>
        /// <param name="guestId"></param>
        /// <param name="slotId"></param>
        partial void OnErrorAssignGuestStarSlot(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string broadcasterId, string moderatorId, string sessionId, string guestId, string slotId);

        /// <summary>
        /// BETA Allows a previously invited user to be assigned a slot within the active Guest Star session. BETA Allows a previously invited user to be assigned a slot within the active Guest Star session, once that guest has indicated they are ready to join.  __Authorization:__  * Query parameter &#x60;moderator_id&#x60; must match the &#x60;user_id&#x60; in the [User-Access token](https://dev.twitch.tv/docs/authentication#user-access-tokens) * Requires OAuth Scope: &#x60;channel:manage:guest_star&#x60; or &#x60;moderator:manage:guest_star&#x60;
        /// </summary>
        /// <param name="broadcasterId">The ID of the broadcaster running the Guest Star session.</param>
        /// <param name="moderatorId">The ID of the broadcaster or a user that has permission to moderate the broadcaster’s chat room. This ID must match the &#x60;user_id&#x60; in the user access token.</param>
        /// <param name="sessionId">The ID of the Guest Star session in which to assign the slot.</param>
        /// <param name="guestId">The Twitch User ID corresponding to the guest to assign a slot in the session. This user must already have an invite to this session, and have indicated that they are ready to join.</param>
        /// <param name="slotId">The slot assignment to give to the user. Must be a numeric identifier between “1” and “N” where N is the max number of slots for the session. Max number of slots allowed for the session is reported by [Get Channel Guest Star Settings](https://dev.twitch.tv/docs/api/reference#get-channel-guest-star-settings).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAssignGuestStarSlotApiResponse"/>&gt;</returns>
        public async Task<IAssignGuestStarSlotApiResponse?> AssignGuestStarSlotOrDefaultAsync(string broadcasterId, string moderatorId, string sessionId, string guestId, string slotId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AssignGuestStarSlotAsync(broadcasterId, moderatorId, sessionId, guestId, slotId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// BETA Allows a previously invited user to be assigned a slot within the active Guest Star session. BETA Allows a previously invited user to be assigned a slot within the active Guest Star session, once that guest has indicated they are ready to join.  __Authorization:__  * Query parameter &#x60;moderator_id&#x60; must match the &#x60;user_id&#x60; in the [User-Access token](https://dev.twitch.tv/docs/authentication#user-access-tokens) * Requires OAuth Scope: &#x60;channel:manage:guest_star&#x60; or &#x60;moderator:manage:guest_star&#x60;
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="broadcasterId">The ID of the broadcaster running the Guest Star session.</param>
        /// <param name="moderatorId">The ID of the broadcaster or a user that has permission to moderate the broadcaster’s chat room. This ID must match the &#x60;user_id&#x60; in the user access token.</param>
        /// <param name="sessionId">The ID of the Guest Star session in which to assign the slot.</param>
        /// <param name="guestId">The Twitch User ID corresponding to the guest to assign a slot in the session. This user must already have an invite to this session, and have indicated that they are ready to join.</param>
        /// <param name="slotId">The slot assignment to give to the user. Must be a numeric identifier between “1” and “N” where N is the max number of slots for the session. Max number of slots allowed for the session is reported by [Get Channel Guest Star Settings](https://dev.twitch.tv/docs/api/reference#get-channel-guest-star-settings).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAssignGuestStarSlotApiResponse"/>&gt;</returns>
        public async Task<IAssignGuestStarSlotApiResponse> AssignGuestStarSlotAsync(string broadcasterId, string moderatorId, string sessionId, string guestId, string slotId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAssignGuestStarSlot(broadcasterId, moderatorId, sessionId, guestId, slotId);

                FormatAssignGuestStarSlot(ref broadcasterId, ref moderatorId, ref sessionId, ref guestId, ref slotId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/guest_star/slot"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/guest_star/slot");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["broadcaster_id"] = ClientUtils.ParameterToString(broadcasterId);
                    parseQueryStringLocalVar["moderator_id"] = ClientUtils.ParameterToString(moderatorId);
                    parseQueryStringLocalVar["session_id"] = ClientUtils.ParameterToString(sessionId);
                    parseQueryStringLocalVar["guest_id"] = ClientUtils.ParameterToString(guestId);
                    parseQueryStringLocalVar["slot_id"] = ClientUtils.ParameterToString(slotId);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<AssignGuestStarSlotApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AssignGuestStarSlotApiResponse>();

                        AssignGuestStarSlotApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/guest_star/slot", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterAssignGuestStarSlotDefaultImplementation(apiResponseLocalVar, broadcasterId, moderatorId, sessionId, guestId, slotId);

                        Events.ExecuteOnAssignGuestStarSlot(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAssignGuestStarSlotDefaultImplementation(e, "/guest_star/slot", uriBuilderLocalVar.Path, broadcasterId, moderatorId, sessionId, guestId, slotId);
                Events.ExecuteOnErrorAssignGuestStarSlot(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="AssignGuestStarSlotApiResponse"/>
        /// </summary>
        public partial class AssignGuestStarSlotApiResponse : TwistedTaleweaver.Integration.Twitch.Helix.Client.ApiResponse, IAssignGuestStarSlotApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<AssignGuestStarSlotApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="AssignGuestStarSlotApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AssignGuestStarSlotApiResponse(ILogger<AssignGuestStarSlotApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatCreateGuestStarSession(ref string broadcasterId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="broadcasterId"></param>
        /// <returns></returns>
        private void ValidateCreateGuestStarSession(string broadcasterId)
        {
            if (broadcasterId == null)
                throw new ArgumentNullException(nameof(broadcasterId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="broadcasterId"></param>
        private void AfterCreateGuestStarSessionDefaultImplementation(ICreateGuestStarSessionApiResponse apiResponseLocalVar, string broadcasterId)
        {
            bool suppressDefaultLog = false;
            AfterCreateGuestStarSession(ref suppressDefaultLog, apiResponseLocalVar, broadcasterId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="broadcasterId"></param>
        partial void AfterCreateGuestStarSession(ref bool suppressDefaultLog, ICreateGuestStarSessionApiResponse apiResponseLocalVar, string broadcasterId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="broadcasterId"></param>
        private void OnErrorCreateGuestStarSessionDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string broadcasterId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateGuestStarSession(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, broadcasterId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="broadcasterId"></param>
        partial void OnErrorCreateGuestStarSession(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string broadcasterId);

        /// <summary>
        /// BETA Programmatically creates a Guest Star session on behalf of the broadcaster. BETA Programmatically creates a Guest Star session on behalf of the broadcaster. Requires the broadcaster to be present in the call interface, or the call will be ended automatically.  __Authorization:__  * Query parameter &#x60;broadcaster_id&#x60; must match the &#x60;user_id&#x60; in the [User-Access token](https://dev.twitch.tv/docs/authentication#user-access-tokens) * Requires OAuth Scope: &#x60;channel:manage:guest_star&#x60;
        /// </summary>
        /// <param name="broadcasterId">The ID of the broadcaster you want to create a Guest Star session for. Provided &#x60;broadcaster_id&#x60; must match the &#x60;user_id&#x60; in the auth token.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateGuestStarSessionApiResponse"/>&gt;</returns>
        public async Task<ICreateGuestStarSessionApiResponse?> CreateGuestStarSessionOrDefaultAsync(string broadcasterId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateGuestStarSessionAsync(broadcasterId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// BETA Programmatically creates a Guest Star session on behalf of the broadcaster. BETA Programmatically creates a Guest Star session on behalf of the broadcaster. Requires the broadcaster to be present in the call interface, or the call will be ended automatically.  __Authorization:__  * Query parameter &#x60;broadcaster_id&#x60; must match the &#x60;user_id&#x60; in the [User-Access token](https://dev.twitch.tv/docs/authentication#user-access-tokens) * Requires OAuth Scope: &#x60;channel:manage:guest_star&#x60;
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="broadcasterId">The ID of the broadcaster you want to create a Guest Star session for. Provided &#x60;broadcaster_id&#x60; must match the &#x60;user_id&#x60; in the auth token.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateGuestStarSessionApiResponse"/>&gt;</returns>
        public async Task<ICreateGuestStarSessionApiResponse> CreateGuestStarSessionAsync(string broadcasterId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateGuestStarSession(broadcasterId);

                FormatCreateGuestStarSession(ref broadcasterId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/guest_star/session"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/guest_star/session");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["broadcaster_id"] = ClientUtils.ParameterToString(broadcasterId);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateGuestStarSessionApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateGuestStarSessionApiResponse>();

                        CreateGuestStarSessionApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/guest_star/session", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateGuestStarSessionDefaultImplementation(apiResponseLocalVar, broadcasterId);

                        Events.ExecuteOnCreateGuestStarSession(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateGuestStarSessionDefaultImplementation(e, "/guest_star/session", uriBuilderLocalVar.Path, broadcasterId);
                Events.ExecuteOnErrorCreateGuestStarSession(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateGuestStarSessionApiResponse"/>
        /// </summary>
        public partial class CreateGuestStarSessionApiResponse : TwistedTaleweaver.Integration.Twitch.Helix.Client.ApiResponse, ICreateGuestStarSessionApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateGuestStarSessionApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateGuestStarSessionApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateGuestStarSessionApiResponse(ILogger<CreateGuestStarSessionApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public TwistedTaleweaver.Integration.Twitch.Helix.Model.CreateGuestStarSessionResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<TwistedTaleweaver.Integration.Twitch.Helix.Model.CreateGuestStarSessionResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out TwistedTaleweaver.Integration.Twitch.Helix.Model.CreateGuestStarSessionResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteGuestStarInvite(ref string broadcasterId, ref string moderatorId, ref string sessionId, ref string guestId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="broadcasterId"></param>
        /// <param name="moderatorId"></param>
        /// <param name="sessionId"></param>
        /// <param name="guestId"></param>
        /// <returns></returns>
        private void ValidateDeleteGuestStarInvite(string broadcasterId, string moderatorId, string sessionId, string guestId)
        {
            if (broadcasterId == null)
                throw new ArgumentNullException(nameof(broadcasterId));

            if (moderatorId == null)
                throw new ArgumentNullException(nameof(moderatorId));

            if (sessionId == null)
                throw new ArgumentNullException(nameof(sessionId));

            if (guestId == null)
                throw new ArgumentNullException(nameof(guestId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="broadcasterId"></param>
        /// <param name="moderatorId"></param>
        /// <param name="sessionId"></param>
        /// <param name="guestId"></param>
        private void AfterDeleteGuestStarInviteDefaultImplementation(IDeleteGuestStarInviteApiResponse apiResponseLocalVar, string broadcasterId, string moderatorId, string sessionId, string guestId)
        {
            bool suppressDefaultLog = false;
            AfterDeleteGuestStarInvite(ref suppressDefaultLog, apiResponseLocalVar, broadcasterId, moderatorId, sessionId, guestId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="broadcasterId"></param>
        /// <param name="moderatorId"></param>
        /// <param name="sessionId"></param>
        /// <param name="guestId"></param>
        partial void AfterDeleteGuestStarInvite(ref bool suppressDefaultLog, IDeleteGuestStarInviteApiResponse apiResponseLocalVar, string broadcasterId, string moderatorId, string sessionId, string guestId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="broadcasterId"></param>
        /// <param name="moderatorId"></param>
        /// <param name="sessionId"></param>
        /// <param name="guestId"></param>
        private void OnErrorDeleteGuestStarInviteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string broadcasterId, string moderatorId, string sessionId, string guestId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteGuestStarInvite(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, broadcasterId, moderatorId, sessionId, guestId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="broadcasterId"></param>
        /// <param name="moderatorId"></param>
        /// <param name="sessionId"></param>
        /// <param name="guestId"></param>
        partial void OnErrorDeleteGuestStarInvite(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string broadcasterId, string moderatorId, string sessionId, string guestId);

        /// <summary>
        /// BETA Revokes a previously sent invite for a Guest Star session. BETA Revokes a previously sent invite for a Guest Star session.  __Authorization:__  * Query parameter &#x60;moderator_id&#x60; must match the &#x60;user_id&#x60; in the [User-Access token](https://dev.twitch.tv/docs/authentication#user-access-tokens) * Requires OAuth Scope: &#x60;channel:manage:guest_star&#x60; or &#x60;moderator:manage:guest_star&#x60;
        /// </summary>
        /// <param name="broadcasterId">The ID of the broadcaster running the Guest Star session.</param>
        /// <param name="moderatorId">The ID of the broadcaster or a user that has permission to moderate the broadcaster’s chat room. This ID must match the &#x60;user_id&#x60; in the user access token.</param>
        /// <param name="sessionId">The ID of the session for the invite to be revoked on behalf of the broadcaster.</param>
        /// <param name="guestId">Twitch User ID for the guest to revoke the Guest Star session invite from.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteGuestStarInviteApiResponse"/>&gt;</returns>
        public async Task<IDeleteGuestStarInviteApiResponse?> DeleteGuestStarInviteOrDefaultAsync(string broadcasterId, string moderatorId, string sessionId, string guestId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteGuestStarInviteAsync(broadcasterId, moderatorId, sessionId, guestId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// BETA Revokes a previously sent invite for a Guest Star session. BETA Revokes a previously sent invite for a Guest Star session.  __Authorization:__  * Query parameter &#x60;moderator_id&#x60; must match the &#x60;user_id&#x60; in the [User-Access token](https://dev.twitch.tv/docs/authentication#user-access-tokens) * Requires OAuth Scope: &#x60;channel:manage:guest_star&#x60; or &#x60;moderator:manage:guest_star&#x60;
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="broadcasterId">The ID of the broadcaster running the Guest Star session.</param>
        /// <param name="moderatorId">The ID of the broadcaster or a user that has permission to moderate the broadcaster’s chat room. This ID must match the &#x60;user_id&#x60; in the user access token.</param>
        /// <param name="sessionId">The ID of the session for the invite to be revoked on behalf of the broadcaster.</param>
        /// <param name="guestId">Twitch User ID for the guest to revoke the Guest Star session invite from.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteGuestStarInviteApiResponse"/>&gt;</returns>
        public async Task<IDeleteGuestStarInviteApiResponse> DeleteGuestStarInviteAsync(string broadcasterId, string moderatorId, string sessionId, string guestId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteGuestStarInvite(broadcasterId, moderatorId, sessionId, guestId);

                FormatDeleteGuestStarInvite(ref broadcasterId, ref moderatorId, ref sessionId, ref guestId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/guest_star/invites"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/guest_star/invites");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["broadcaster_id"] = ClientUtils.ParameterToString(broadcasterId);
                    parseQueryStringLocalVar["moderator_id"] = ClientUtils.ParameterToString(moderatorId);
                    parseQueryStringLocalVar["session_id"] = ClientUtils.ParameterToString(sessionId);
                    parseQueryStringLocalVar["guest_id"] = ClientUtils.ParameterToString(guestId);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteGuestStarInviteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteGuestStarInviteApiResponse>();

                        DeleteGuestStarInviteApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/guest_star/invites", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteGuestStarInviteDefaultImplementation(apiResponseLocalVar, broadcasterId, moderatorId, sessionId, guestId);

                        Events.ExecuteOnDeleteGuestStarInvite(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteGuestStarInviteDefaultImplementation(e, "/guest_star/invites", uriBuilderLocalVar.Path, broadcasterId, moderatorId, sessionId, guestId);
                Events.ExecuteOnErrorDeleteGuestStarInvite(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteGuestStarInviteApiResponse"/>
        /// </summary>
        public partial class DeleteGuestStarInviteApiResponse : TwistedTaleweaver.Integration.Twitch.Helix.Client.ApiResponse, IDeleteGuestStarInviteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteGuestStarInviteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteGuestStarInviteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteGuestStarInviteApiResponse(ILogger<DeleteGuestStarInviteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteGuestStarSlot(ref string broadcasterId, ref string moderatorId, ref string sessionId, ref string guestId, ref string slotId, ref Option<string> shouldReinviteGuest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="broadcasterId"></param>
        /// <param name="moderatorId"></param>
        /// <param name="sessionId"></param>
        /// <param name="guestId"></param>
        /// <param name="slotId"></param>
        /// <param name="shouldReinviteGuest"></param>
        /// <returns></returns>
        private void ValidateDeleteGuestStarSlot(string broadcasterId, string moderatorId, string sessionId, string guestId, string slotId, Option<string> shouldReinviteGuest)
        {
            if (broadcasterId == null)
                throw new ArgumentNullException(nameof(broadcasterId));

            if (moderatorId == null)
                throw new ArgumentNullException(nameof(moderatorId));

            if (sessionId == null)
                throw new ArgumentNullException(nameof(sessionId));

            if (guestId == null)
                throw new ArgumentNullException(nameof(guestId));

            if (slotId == null)
                throw new ArgumentNullException(nameof(slotId));

            if (shouldReinviteGuest.IsSet && shouldReinviteGuest.Value == null)
                throw new ArgumentNullException(nameof(shouldReinviteGuest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="broadcasterId"></param>
        /// <param name="moderatorId"></param>
        /// <param name="sessionId"></param>
        /// <param name="guestId"></param>
        /// <param name="slotId"></param>
        /// <param name="shouldReinviteGuest"></param>
        private void AfterDeleteGuestStarSlotDefaultImplementation(IDeleteGuestStarSlotApiResponse apiResponseLocalVar, string broadcasterId, string moderatorId, string sessionId, string guestId, string slotId, Option<string> shouldReinviteGuest)
        {
            bool suppressDefaultLog = false;
            AfterDeleteGuestStarSlot(ref suppressDefaultLog, apiResponseLocalVar, broadcasterId, moderatorId, sessionId, guestId, slotId, shouldReinviteGuest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="broadcasterId"></param>
        /// <param name="moderatorId"></param>
        /// <param name="sessionId"></param>
        /// <param name="guestId"></param>
        /// <param name="slotId"></param>
        /// <param name="shouldReinviteGuest"></param>
        partial void AfterDeleteGuestStarSlot(ref bool suppressDefaultLog, IDeleteGuestStarSlotApiResponse apiResponseLocalVar, string broadcasterId, string moderatorId, string sessionId, string guestId, string slotId, Option<string> shouldReinviteGuest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="broadcasterId"></param>
        /// <param name="moderatorId"></param>
        /// <param name="sessionId"></param>
        /// <param name="guestId"></param>
        /// <param name="slotId"></param>
        /// <param name="shouldReinviteGuest"></param>
        private void OnErrorDeleteGuestStarSlotDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string broadcasterId, string moderatorId, string sessionId, string guestId, string slotId, Option<string> shouldReinviteGuest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteGuestStarSlot(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, broadcasterId, moderatorId, sessionId, guestId, slotId, shouldReinviteGuest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="broadcasterId"></param>
        /// <param name="moderatorId"></param>
        /// <param name="sessionId"></param>
        /// <param name="guestId"></param>
        /// <param name="slotId"></param>
        /// <param name="shouldReinviteGuest"></param>
        partial void OnErrorDeleteGuestStarSlot(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string broadcasterId, string moderatorId, string sessionId, string guestId, string slotId, Option<string> shouldReinviteGuest);

        /// <summary>
        /// BETA Allows a caller to remove a slot assignment from a user participating in an active Guest Star session. BETA Allows a caller to remove a slot assignment from a user participating in an active Guest Star session. This revokes their access to the session immediately and disables their access to publish or subscribe to media within the session.  __Authorization:__  * Query parameter &#x60;moderator_id&#x60; must match the &#x60;user_id&#x60; in the [User-Access token](https://dev.twitch.tv/docs/authentication#user-access-tokens) * Requires OAuth Scope: &#x60;channel:manage:guest_star&#x60; or &#x60;moderator:manage:guest_star&#x60;
        /// </summary>
        /// <param name="broadcasterId">The ID of the broadcaster running the Guest Star session.</param>
        /// <param name="moderatorId">The ID of the broadcaster or a user that has permission to moderate the broadcaster’s chat room. This ID must match the user ID in the user access token.</param>
        /// <param name="sessionId">The ID of the Guest Star session in which to remove the slot assignment.</param>
        /// <param name="guestId">The Twitch User ID corresponding to the guest to remove from the session.</param>
        /// <param name="slotId">The slot ID representing the slot assignment to remove from the session.</param>
        /// <param name="shouldReinviteGuest">Flag signaling that the guest should be reinvited to the session, sending them back to the invite queue. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteGuestStarSlotApiResponse"/>&gt;</returns>
        public async Task<IDeleteGuestStarSlotApiResponse?> DeleteGuestStarSlotOrDefaultAsync(string broadcasterId, string moderatorId, string sessionId, string guestId, string slotId, Option<string> shouldReinviteGuest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteGuestStarSlotAsync(broadcasterId, moderatorId, sessionId, guestId, slotId, shouldReinviteGuest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// BETA Allows a caller to remove a slot assignment from a user participating in an active Guest Star session. BETA Allows a caller to remove a slot assignment from a user participating in an active Guest Star session. This revokes their access to the session immediately and disables their access to publish or subscribe to media within the session.  __Authorization:__  * Query parameter &#x60;moderator_id&#x60; must match the &#x60;user_id&#x60; in the [User-Access token](https://dev.twitch.tv/docs/authentication#user-access-tokens) * Requires OAuth Scope: &#x60;channel:manage:guest_star&#x60; or &#x60;moderator:manage:guest_star&#x60;
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="broadcasterId">The ID of the broadcaster running the Guest Star session.</param>
        /// <param name="moderatorId">The ID of the broadcaster or a user that has permission to moderate the broadcaster’s chat room. This ID must match the user ID in the user access token.</param>
        /// <param name="sessionId">The ID of the Guest Star session in which to remove the slot assignment.</param>
        /// <param name="guestId">The Twitch User ID corresponding to the guest to remove from the session.</param>
        /// <param name="slotId">The slot ID representing the slot assignment to remove from the session.</param>
        /// <param name="shouldReinviteGuest">Flag signaling that the guest should be reinvited to the session, sending them back to the invite queue. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteGuestStarSlotApiResponse"/>&gt;</returns>
        public async Task<IDeleteGuestStarSlotApiResponse> DeleteGuestStarSlotAsync(string broadcasterId, string moderatorId, string sessionId, string guestId, string slotId, Option<string> shouldReinviteGuest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteGuestStarSlot(broadcasterId, moderatorId, sessionId, guestId, slotId, shouldReinviteGuest);

                FormatDeleteGuestStarSlot(ref broadcasterId, ref moderatorId, ref sessionId, ref guestId, ref slotId, ref shouldReinviteGuest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/guest_star/slot"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/guest_star/slot");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["broadcaster_id"] = ClientUtils.ParameterToString(broadcasterId);
                    parseQueryStringLocalVar["moderator_id"] = ClientUtils.ParameterToString(moderatorId);
                    parseQueryStringLocalVar["session_id"] = ClientUtils.ParameterToString(sessionId);
                    parseQueryStringLocalVar["guest_id"] = ClientUtils.ParameterToString(guestId);
                    parseQueryStringLocalVar["slot_id"] = ClientUtils.ParameterToString(slotId);

                    if (shouldReinviteGuest.IsSet)
                        parseQueryStringLocalVar["should_reinvite_guest"] = ClientUtils.ParameterToString(shouldReinviteGuest.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteGuestStarSlotApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteGuestStarSlotApiResponse>();

                        DeleteGuestStarSlotApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/guest_star/slot", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteGuestStarSlotDefaultImplementation(apiResponseLocalVar, broadcasterId, moderatorId, sessionId, guestId, slotId, shouldReinviteGuest);

                        Events.ExecuteOnDeleteGuestStarSlot(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteGuestStarSlotDefaultImplementation(e, "/guest_star/slot", uriBuilderLocalVar.Path, broadcasterId, moderatorId, sessionId, guestId, slotId, shouldReinviteGuest);
                Events.ExecuteOnErrorDeleteGuestStarSlot(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteGuestStarSlotApiResponse"/>
        /// </summary>
        public partial class DeleteGuestStarSlotApiResponse : TwistedTaleweaver.Integration.Twitch.Helix.Client.ApiResponse, IDeleteGuestStarSlotApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteGuestStarSlotApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteGuestStarSlotApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteGuestStarSlotApiResponse(ILogger<DeleteGuestStarSlotApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatEndGuestStarSession(ref string broadcasterId, ref string sessionId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="broadcasterId"></param>
        /// <param name="sessionId"></param>
        /// <returns></returns>
        private void ValidateEndGuestStarSession(string broadcasterId, string sessionId)
        {
            if (broadcasterId == null)
                throw new ArgumentNullException(nameof(broadcasterId));

            if (sessionId == null)
                throw new ArgumentNullException(nameof(sessionId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="broadcasterId"></param>
        /// <param name="sessionId"></param>
        private void AfterEndGuestStarSessionDefaultImplementation(IEndGuestStarSessionApiResponse apiResponseLocalVar, string broadcasterId, string sessionId)
        {
            bool suppressDefaultLog = false;
            AfterEndGuestStarSession(ref suppressDefaultLog, apiResponseLocalVar, broadcasterId, sessionId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="broadcasterId"></param>
        /// <param name="sessionId"></param>
        partial void AfterEndGuestStarSession(ref bool suppressDefaultLog, IEndGuestStarSessionApiResponse apiResponseLocalVar, string broadcasterId, string sessionId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="broadcasterId"></param>
        /// <param name="sessionId"></param>
        private void OnErrorEndGuestStarSessionDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string broadcasterId, string sessionId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEndGuestStarSession(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, broadcasterId, sessionId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="broadcasterId"></param>
        /// <param name="sessionId"></param>
        partial void OnErrorEndGuestStarSession(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string broadcasterId, string sessionId);

        /// <summary>
        /// BETA Programmatically ends a Guest Star session on behalf of the broadcaster. BETA Programmatically ends a Guest Star session on behalf of the broadcaster. Performs the same action as if the host clicked the “End Call” button in the Guest Star UI.  __Authorization:__  * Query parameter &#x60;broadcaster_id&#x60; must match the &#x60;user_id&#x60; in the [User-Access token](https://dev.twitch.tv/docs/authentication#user-access-tokens) * Requires OAuth Scope: &#x60;channel:manage:guest_star&#x60;
        /// </summary>
        /// <param name="broadcasterId">The ID of the broadcaster you want to end a Guest Star session for. Provided &#x60;broadcaster_id&#x60; must match the &#x60;user_id&#x60; in the auth token.</param>
        /// <param name="sessionId">ID for the session to end on behalf of the broadcaster.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEndGuestStarSessionApiResponse"/>&gt;</returns>
        public async Task<IEndGuestStarSessionApiResponse?> EndGuestStarSessionOrDefaultAsync(string broadcasterId, string sessionId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EndGuestStarSessionAsync(broadcasterId, sessionId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// BETA Programmatically ends a Guest Star session on behalf of the broadcaster. BETA Programmatically ends a Guest Star session on behalf of the broadcaster. Performs the same action as if the host clicked the “End Call” button in the Guest Star UI.  __Authorization:__  * Query parameter &#x60;broadcaster_id&#x60; must match the &#x60;user_id&#x60; in the [User-Access token](https://dev.twitch.tv/docs/authentication#user-access-tokens) * Requires OAuth Scope: &#x60;channel:manage:guest_star&#x60;
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="broadcasterId">The ID of the broadcaster you want to end a Guest Star session for. Provided &#x60;broadcaster_id&#x60; must match the &#x60;user_id&#x60; in the auth token.</param>
        /// <param name="sessionId">ID for the session to end on behalf of the broadcaster.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEndGuestStarSessionApiResponse"/>&gt;</returns>
        public async Task<IEndGuestStarSessionApiResponse> EndGuestStarSessionAsync(string broadcasterId, string sessionId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateEndGuestStarSession(broadcasterId, sessionId);

                FormatEndGuestStarSession(ref broadcasterId, ref sessionId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/guest_star/session"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/guest_star/session");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["broadcaster_id"] = ClientUtils.ParameterToString(broadcasterId);
                    parseQueryStringLocalVar["session_id"] = ClientUtils.ParameterToString(sessionId);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EndGuestStarSessionApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EndGuestStarSessionApiResponse>();

                        EndGuestStarSessionApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/guest_star/session", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEndGuestStarSessionDefaultImplementation(apiResponseLocalVar, broadcasterId, sessionId);

                        Events.ExecuteOnEndGuestStarSession(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEndGuestStarSessionDefaultImplementation(e, "/guest_star/session", uriBuilderLocalVar.Path, broadcasterId, sessionId);
                Events.ExecuteOnErrorEndGuestStarSession(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EndGuestStarSessionApiResponse"/>
        /// </summary>
        public partial class EndGuestStarSessionApiResponse : TwistedTaleweaver.Integration.Twitch.Helix.Client.ApiResponse, IEndGuestStarSessionApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EndGuestStarSessionApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EndGuestStarSessionApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EndGuestStarSessionApiResponse(ILogger<EndGuestStarSessionApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetChannelGuestStarSettings(ref string broadcasterId, ref string moderatorId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="broadcasterId"></param>
        /// <param name="moderatorId"></param>
        /// <returns></returns>
        private void ValidateGetChannelGuestStarSettings(string broadcasterId, string moderatorId)
        {
            if (broadcasterId == null)
                throw new ArgumentNullException(nameof(broadcasterId));

            if (moderatorId == null)
                throw new ArgumentNullException(nameof(moderatorId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="broadcasterId"></param>
        /// <param name="moderatorId"></param>
        private void AfterGetChannelGuestStarSettingsDefaultImplementation(IGetChannelGuestStarSettingsApiResponse apiResponseLocalVar, string broadcasterId, string moderatorId)
        {
            bool suppressDefaultLog = false;
            AfterGetChannelGuestStarSettings(ref suppressDefaultLog, apiResponseLocalVar, broadcasterId, moderatorId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="broadcasterId"></param>
        /// <param name="moderatorId"></param>
        partial void AfterGetChannelGuestStarSettings(ref bool suppressDefaultLog, IGetChannelGuestStarSettingsApiResponse apiResponseLocalVar, string broadcasterId, string moderatorId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="broadcasterId"></param>
        /// <param name="moderatorId"></param>
        private void OnErrorGetChannelGuestStarSettingsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string broadcasterId, string moderatorId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetChannelGuestStarSettings(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, broadcasterId, moderatorId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="broadcasterId"></param>
        /// <param name="moderatorId"></param>
        partial void OnErrorGetChannelGuestStarSettings(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string broadcasterId, string moderatorId);

        /// <summary>
        /// BETA Gets the channel settings for configuration of the Guest Star feature for a particular host. BETA Gets the channel settings for configuration of the Guest Star feature for a particular host.  __Authorization:__  * Query parameter &#x60;moderator_id&#x60; must match the &#x60;user_id&#x60; in the [User-Access token](https://dev.twitch.tv/docs/authentication#user-access-tokens) * Requires OAuth Scope: &#x60;channel:read:guest_star&#x60;, &#x60;channel:manage:guest_star&#x60;, &#x60;moderator:read:guest_star&#x60; or &#x60;moderator:manage:guest_star&#x60;
        /// </summary>
        /// <param name="broadcasterId">The ID of the broadcaster you want to get guest star settings for.</param>
        /// <param name="moderatorId">The ID of the broadcaster or a user that has permission to moderate the broadcaster’s chat room. This ID must match the user ID in the user access token.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChannelGuestStarSettingsApiResponse"/>&gt;</returns>
        public async Task<IGetChannelGuestStarSettingsApiResponse?> GetChannelGuestStarSettingsOrDefaultAsync(string broadcasterId, string moderatorId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetChannelGuestStarSettingsAsync(broadcasterId, moderatorId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// BETA Gets the channel settings for configuration of the Guest Star feature for a particular host. BETA Gets the channel settings for configuration of the Guest Star feature for a particular host.  __Authorization:__  * Query parameter &#x60;moderator_id&#x60; must match the &#x60;user_id&#x60; in the [User-Access token](https://dev.twitch.tv/docs/authentication#user-access-tokens) * Requires OAuth Scope: &#x60;channel:read:guest_star&#x60;, &#x60;channel:manage:guest_star&#x60;, &#x60;moderator:read:guest_star&#x60; or &#x60;moderator:manage:guest_star&#x60;
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="broadcasterId">The ID of the broadcaster you want to get guest star settings for.</param>
        /// <param name="moderatorId">The ID of the broadcaster or a user that has permission to moderate the broadcaster’s chat room. This ID must match the user ID in the user access token.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChannelGuestStarSettingsApiResponse"/>&gt;</returns>
        public async Task<IGetChannelGuestStarSettingsApiResponse> GetChannelGuestStarSettingsAsync(string broadcasterId, string moderatorId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetChannelGuestStarSettings(broadcasterId, moderatorId);

                FormatGetChannelGuestStarSettings(ref broadcasterId, ref moderatorId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/guest_star/channel_settings"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/guest_star/channel_settings");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["broadcaster_id"] = ClientUtils.ParameterToString(broadcasterId);
                    parseQueryStringLocalVar["moderator_id"] = ClientUtils.ParameterToString(moderatorId);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetChannelGuestStarSettingsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetChannelGuestStarSettingsApiResponse>();

                        GetChannelGuestStarSettingsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/guest_star/channel_settings", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetChannelGuestStarSettingsDefaultImplementation(apiResponseLocalVar, broadcasterId, moderatorId);

                        Events.ExecuteOnGetChannelGuestStarSettings(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetChannelGuestStarSettingsDefaultImplementation(e, "/guest_star/channel_settings", uriBuilderLocalVar.Path, broadcasterId, moderatorId);
                Events.ExecuteOnErrorGetChannelGuestStarSettings(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetChannelGuestStarSettingsApiResponse"/>
        /// </summary>
        public partial class GetChannelGuestStarSettingsApiResponse : TwistedTaleweaver.Integration.Twitch.Helix.Client.ApiResponse, IGetChannelGuestStarSettingsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetChannelGuestStarSettingsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetChannelGuestStarSettingsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetChannelGuestStarSettingsApiResponse(ILogger<GetChannelGuestStarSettingsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public TwistedTaleweaver.Integration.Twitch.Helix.Model.GetChannelGuestStarSettingsResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<TwistedTaleweaver.Integration.Twitch.Helix.Model.GetChannelGuestStarSettingsResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out TwistedTaleweaver.Integration.Twitch.Helix.Model.GetChannelGuestStarSettingsResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetGuestStarInvites(ref string broadcasterId, ref string moderatorId, ref string sessionId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="broadcasterId"></param>
        /// <param name="moderatorId"></param>
        /// <param name="sessionId"></param>
        /// <returns></returns>
        private void ValidateGetGuestStarInvites(string broadcasterId, string moderatorId, string sessionId)
        {
            if (broadcasterId == null)
                throw new ArgumentNullException(nameof(broadcasterId));

            if (moderatorId == null)
                throw new ArgumentNullException(nameof(moderatorId));

            if (sessionId == null)
                throw new ArgumentNullException(nameof(sessionId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="broadcasterId"></param>
        /// <param name="moderatorId"></param>
        /// <param name="sessionId"></param>
        private void AfterGetGuestStarInvitesDefaultImplementation(IGetGuestStarInvitesApiResponse apiResponseLocalVar, string broadcasterId, string moderatorId, string sessionId)
        {
            bool suppressDefaultLog = false;
            AfterGetGuestStarInvites(ref suppressDefaultLog, apiResponseLocalVar, broadcasterId, moderatorId, sessionId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="broadcasterId"></param>
        /// <param name="moderatorId"></param>
        /// <param name="sessionId"></param>
        partial void AfterGetGuestStarInvites(ref bool suppressDefaultLog, IGetGuestStarInvitesApiResponse apiResponseLocalVar, string broadcasterId, string moderatorId, string sessionId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="broadcasterId"></param>
        /// <param name="moderatorId"></param>
        /// <param name="sessionId"></param>
        private void OnErrorGetGuestStarInvitesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string broadcasterId, string moderatorId, string sessionId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetGuestStarInvites(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, broadcasterId, moderatorId, sessionId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="broadcasterId"></param>
        /// <param name="moderatorId"></param>
        /// <param name="sessionId"></param>
        partial void OnErrorGetGuestStarInvites(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string broadcasterId, string moderatorId, string sessionId);

        /// <summary>
        /// BETA Provides the caller with a list of pending invites to a Guest Star session. BETA Provides the caller with a list of pending invites to a Guest Star session, including the invitee’s ready status while joining the waiting room.  __Authorization:__  * Query parameter &#x60;broadcaster_id&#x60; must match the &#x60;user_id&#x60; in the [User-Access token](https://dev.twitch.tv/docs/authentication#user-access-tokens) * Requires OAuth Scope: &#x60;channel:read:guest_star&#x60;, &#x60;channel:manage:guest_star&#x60;, &#x60;moderator:read:guest_star&#x60; or &#x60;moderator:manage:guest_star&#x60;
        /// </summary>
        /// <param name="broadcasterId">The ID of the broadcaster running the Guest Star session.</param>
        /// <param name="moderatorId">The ID of the broadcaster or a user that has permission to moderate the broadcaster’s chat room. This ID must match the &#x60;user_id&#x60; in the user access token.</param>
        /// <param name="sessionId">The session ID to query for invite status.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetGuestStarInvitesApiResponse"/>&gt;</returns>
        public async Task<IGetGuestStarInvitesApiResponse?> GetGuestStarInvitesOrDefaultAsync(string broadcasterId, string moderatorId, string sessionId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetGuestStarInvitesAsync(broadcasterId, moderatorId, sessionId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// BETA Provides the caller with a list of pending invites to a Guest Star session. BETA Provides the caller with a list of pending invites to a Guest Star session, including the invitee’s ready status while joining the waiting room.  __Authorization:__  * Query parameter &#x60;broadcaster_id&#x60; must match the &#x60;user_id&#x60; in the [User-Access token](https://dev.twitch.tv/docs/authentication#user-access-tokens) * Requires OAuth Scope: &#x60;channel:read:guest_star&#x60;, &#x60;channel:manage:guest_star&#x60;, &#x60;moderator:read:guest_star&#x60; or &#x60;moderator:manage:guest_star&#x60;
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="broadcasterId">The ID of the broadcaster running the Guest Star session.</param>
        /// <param name="moderatorId">The ID of the broadcaster or a user that has permission to moderate the broadcaster’s chat room. This ID must match the &#x60;user_id&#x60; in the user access token.</param>
        /// <param name="sessionId">The session ID to query for invite status.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetGuestStarInvitesApiResponse"/>&gt;</returns>
        public async Task<IGetGuestStarInvitesApiResponse> GetGuestStarInvitesAsync(string broadcasterId, string moderatorId, string sessionId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetGuestStarInvites(broadcasterId, moderatorId, sessionId);

                FormatGetGuestStarInvites(ref broadcasterId, ref moderatorId, ref sessionId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/guest_star/invites"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/guest_star/invites");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["broadcaster_id"] = ClientUtils.ParameterToString(broadcasterId);
                    parseQueryStringLocalVar["moderator_id"] = ClientUtils.ParameterToString(moderatorId);
                    parseQueryStringLocalVar["session_id"] = ClientUtils.ParameterToString(sessionId);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetGuestStarInvitesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetGuestStarInvitesApiResponse>();

                        GetGuestStarInvitesApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/guest_star/invites", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetGuestStarInvitesDefaultImplementation(apiResponseLocalVar, broadcasterId, moderatorId, sessionId);

                        Events.ExecuteOnGetGuestStarInvites(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetGuestStarInvitesDefaultImplementation(e, "/guest_star/invites", uriBuilderLocalVar.Path, broadcasterId, moderatorId, sessionId);
                Events.ExecuteOnErrorGetGuestStarInvites(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetGuestStarInvitesApiResponse"/>
        /// </summary>
        public partial class GetGuestStarInvitesApiResponse : TwistedTaleweaver.Integration.Twitch.Helix.Client.ApiResponse, IGetGuestStarInvitesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetGuestStarInvitesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetGuestStarInvitesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetGuestStarInvitesApiResponse(ILogger<GetGuestStarInvitesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public TwistedTaleweaver.Integration.Twitch.Helix.Model.GetGuestStarInvitesResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<TwistedTaleweaver.Integration.Twitch.Helix.Model.GetGuestStarInvitesResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out TwistedTaleweaver.Integration.Twitch.Helix.Model.GetGuestStarInvitesResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetGuestStarSession(ref string broadcasterId, ref string moderatorId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="broadcasterId"></param>
        /// <param name="moderatorId"></param>
        /// <returns></returns>
        private void ValidateGetGuestStarSession(string broadcasterId, string moderatorId)
        {
            if (broadcasterId == null)
                throw new ArgumentNullException(nameof(broadcasterId));

            if (moderatorId == null)
                throw new ArgumentNullException(nameof(moderatorId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="broadcasterId"></param>
        /// <param name="moderatorId"></param>
        private void AfterGetGuestStarSessionDefaultImplementation(IGetGuestStarSessionApiResponse apiResponseLocalVar, string broadcasterId, string moderatorId)
        {
            bool suppressDefaultLog = false;
            AfterGetGuestStarSession(ref suppressDefaultLog, apiResponseLocalVar, broadcasterId, moderatorId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="broadcasterId"></param>
        /// <param name="moderatorId"></param>
        partial void AfterGetGuestStarSession(ref bool suppressDefaultLog, IGetGuestStarSessionApiResponse apiResponseLocalVar, string broadcasterId, string moderatorId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="broadcasterId"></param>
        /// <param name="moderatorId"></param>
        private void OnErrorGetGuestStarSessionDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string broadcasterId, string moderatorId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetGuestStarSession(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, broadcasterId, moderatorId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="broadcasterId"></param>
        /// <param name="moderatorId"></param>
        partial void OnErrorGetGuestStarSession(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string broadcasterId, string moderatorId);

        /// <summary>
        /// BETA Gets information about an ongoing Guest Star session for a particular channel. BETA Gets information about an ongoing Guest Star session for a particular channel.  __Authorization:__  * Requires OAuth Scope: &#x60;channel:read:guest_star&#x60;, &#x60;channel:manage:guest_star&#x60;, &#x60;moderator:read:guest_star&#x60; or &#x60;moderator:manage:guest_star&#x60; * Guests must be either invited or assigned a slot within the session
        /// </summary>
        /// <param name="broadcasterId">ID for the user hosting the Guest Star session.</param>
        /// <param name="moderatorId">The ID of the broadcaster or a user that has permission to moderate the broadcaster’s chat room. This ID must match the user ID in the user access token.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetGuestStarSessionApiResponse"/>&gt;</returns>
        public async Task<IGetGuestStarSessionApiResponse?> GetGuestStarSessionOrDefaultAsync(string broadcasterId, string moderatorId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetGuestStarSessionAsync(broadcasterId, moderatorId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// BETA Gets information about an ongoing Guest Star session for a particular channel. BETA Gets information about an ongoing Guest Star session for a particular channel.  __Authorization:__  * Requires OAuth Scope: &#x60;channel:read:guest_star&#x60;, &#x60;channel:manage:guest_star&#x60;, &#x60;moderator:read:guest_star&#x60; or &#x60;moderator:manage:guest_star&#x60; * Guests must be either invited or assigned a slot within the session
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="broadcasterId">ID for the user hosting the Guest Star session.</param>
        /// <param name="moderatorId">The ID of the broadcaster or a user that has permission to moderate the broadcaster’s chat room. This ID must match the user ID in the user access token.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetGuestStarSessionApiResponse"/>&gt;</returns>
        public async Task<IGetGuestStarSessionApiResponse> GetGuestStarSessionAsync(string broadcasterId, string moderatorId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetGuestStarSession(broadcasterId, moderatorId);

                FormatGetGuestStarSession(ref broadcasterId, ref moderatorId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/guest_star/session"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/guest_star/session");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["broadcaster_id"] = ClientUtils.ParameterToString(broadcasterId);
                    parseQueryStringLocalVar["moderator_id"] = ClientUtils.ParameterToString(moderatorId);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetGuestStarSessionApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetGuestStarSessionApiResponse>();

                        GetGuestStarSessionApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/guest_star/session", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetGuestStarSessionDefaultImplementation(apiResponseLocalVar, broadcasterId, moderatorId);

                        Events.ExecuteOnGetGuestStarSession(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetGuestStarSessionDefaultImplementation(e, "/guest_star/session", uriBuilderLocalVar.Path, broadcasterId, moderatorId);
                Events.ExecuteOnErrorGetGuestStarSession(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetGuestStarSessionApiResponse"/>
        /// </summary>
        public partial class GetGuestStarSessionApiResponse : TwistedTaleweaver.Integration.Twitch.Helix.Client.ApiResponse, IGetGuestStarSessionApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetGuestStarSessionApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetGuestStarSessionApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetGuestStarSessionApiResponse(ILogger<GetGuestStarSessionApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public TwistedTaleweaver.Integration.Twitch.Helix.Model.GetGuestStarSessionResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<TwistedTaleweaver.Integration.Twitch.Helix.Model.GetGuestStarSessionResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out TwistedTaleweaver.Integration.Twitch.Helix.Model.GetGuestStarSessionResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSendGuestStarInvite(ref string broadcasterId, ref string moderatorId, ref string sessionId, ref string guestId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="broadcasterId"></param>
        /// <param name="moderatorId"></param>
        /// <param name="sessionId"></param>
        /// <param name="guestId"></param>
        /// <returns></returns>
        private void ValidateSendGuestStarInvite(string broadcasterId, string moderatorId, string sessionId, string guestId)
        {
            if (broadcasterId == null)
                throw new ArgumentNullException(nameof(broadcasterId));

            if (moderatorId == null)
                throw new ArgumentNullException(nameof(moderatorId));

            if (sessionId == null)
                throw new ArgumentNullException(nameof(sessionId));

            if (guestId == null)
                throw new ArgumentNullException(nameof(guestId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="broadcasterId"></param>
        /// <param name="moderatorId"></param>
        /// <param name="sessionId"></param>
        /// <param name="guestId"></param>
        private void AfterSendGuestStarInviteDefaultImplementation(ISendGuestStarInviteApiResponse apiResponseLocalVar, string broadcasterId, string moderatorId, string sessionId, string guestId)
        {
            bool suppressDefaultLog = false;
            AfterSendGuestStarInvite(ref suppressDefaultLog, apiResponseLocalVar, broadcasterId, moderatorId, sessionId, guestId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="broadcasterId"></param>
        /// <param name="moderatorId"></param>
        /// <param name="sessionId"></param>
        /// <param name="guestId"></param>
        partial void AfterSendGuestStarInvite(ref bool suppressDefaultLog, ISendGuestStarInviteApiResponse apiResponseLocalVar, string broadcasterId, string moderatorId, string sessionId, string guestId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="broadcasterId"></param>
        /// <param name="moderatorId"></param>
        /// <param name="sessionId"></param>
        /// <param name="guestId"></param>
        private void OnErrorSendGuestStarInviteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string broadcasterId, string moderatorId, string sessionId, string guestId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSendGuestStarInvite(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, broadcasterId, moderatorId, sessionId, guestId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="broadcasterId"></param>
        /// <param name="moderatorId"></param>
        /// <param name="sessionId"></param>
        /// <param name="guestId"></param>
        partial void OnErrorSendGuestStarInvite(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string broadcasterId, string moderatorId, string sessionId, string guestId);

        /// <summary>
        /// BETA Sends an invite to a specified guest on behalf of the broadcaster for a Guest Star session in progress. BETA Sends an invite to a specified guest on behalf of the broadcaster for a Guest Star session in progress.  __Authorization:__  * Query parameter &#x60;moderator_id&#x60; must match the &#x60;user_id&#x60; in the [User-Access token](https://dev.twitch.tv/docs/authentication#user-access-tokens) * Requires OAuth Scope: &#x60;channel:manage:guest_star&#x60; or &#x60;moderator:manage:guest_star&#x60;
        /// </summary>
        /// <param name="broadcasterId">The ID of the broadcaster running the Guest Star session.</param>
        /// <param name="moderatorId">The ID of the broadcaster or a user that has permission to moderate the broadcaster’s chat room. This ID must match the &#x60;user_id&#x60; in the user access token.</param>
        /// <param name="sessionId">The session ID for the invite to be sent on behalf of the broadcaster.</param>
        /// <param name="guestId">Twitch User ID for the guest to invite to the Guest Star session.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendGuestStarInviteApiResponse"/>&gt;</returns>
        public async Task<ISendGuestStarInviteApiResponse?> SendGuestStarInviteOrDefaultAsync(string broadcasterId, string moderatorId, string sessionId, string guestId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SendGuestStarInviteAsync(broadcasterId, moderatorId, sessionId, guestId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// BETA Sends an invite to a specified guest on behalf of the broadcaster for a Guest Star session in progress. BETA Sends an invite to a specified guest on behalf of the broadcaster for a Guest Star session in progress.  __Authorization:__  * Query parameter &#x60;moderator_id&#x60; must match the &#x60;user_id&#x60; in the [User-Access token](https://dev.twitch.tv/docs/authentication#user-access-tokens) * Requires OAuth Scope: &#x60;channel:manage:guest_star&#x60; or &#x60;moderator:manage:guest_star&#x60;
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="broadcasterId">The ID of the broadcaster running the Guest Star session.</param>
        /// <param name="moderatorId">The ID of the broadcaster or a user that has permission to moderate the broadcaster’s chat room. This ID must match the &#x60;user_id&#x60; in the user access token.</param>
        /// <param name="sessionId">The session ID for the invite to be sent on behalf of the broadcaster.</param>
        /// <param name="guestId">Twitch User ID for the guest to invite to the Guest Star session.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendGuestStarInviteApiResponse"/>&gt;</returns>
        public async Task<ISendGuestStarInviteApiResponse> SendGuestStarInviteAsync(string broadcasterId, string moderatorId, string sessionId, string guestId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateSendGuestStarInvite(broadcasterId, moderatorId, sessionId, guestId);

                FormatSendGuestStarInvite(ref broadcasterId, ref moderatorId, ref sessionId, ref guestId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/guest_star/invites"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/guest_star/invites");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["broadcaster_id"] = ClientUtils.ParameterToString(broadcasterId);
                    parseQueryStringLocalVar["moderator_id"] = ClientUtils.ParameterToString(moderatorId);
                    parseQueryStringLocalVar["session_id"] = ClientUtils.ParameterToString(sessionId);
                    parseQueryStringLocalVar["guest_id"] = ClientUtils.ParameterToString(guestId);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<SendGuestStarInviteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SendGuestStarInviteApiResponse>();

                        SendGuestStarInviteApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/guest_star/invites", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterSendGuestStarInviteDefaultImplementation(apiResponseLocalVar, broadcasterId, moderatorId, sessionId, guestId);

                        Events.ExecuteOnSendGuestStarInvite(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSendGuestStarInviteDefaultImplementation(e, "/guest_star/invites", uriBuilderLocalVar.Path, broadcasterId, moderatorId, sessionId, guestId);
                Events.ExecuteOnErrorSendGuestStarInvite(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SendGuestStarInviteApiResponse"/>
        /// </summary>
        public partial class SendGuestStarInviteApiResponse : TwistedTaleweaver.Integration.Twitch.Helix.Client.ApiResponse, ISendGuestStarInviteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SendGuestStarInviteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SendGuestStarInviteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SendGuestStarInviteApiResponse(ILogger<SendGuestStarInviteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateChannelGuestStarSettings(ref string broadcasterId, Option<UpdateChannelGuestStarSettingsBody> updateChannelGuestStarSettingsBody);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="broadcasterId"></param>
        /// <param name="updateChannelGuestStarSettingsBody"></param>
        /// <returns></returns>
        private void ValidateUpdateChannelGuestStarSettings(string broadcasterId, Option<UpdateChannelGuestStarSettingsBody> updateChannelGuestStarSettingsBody)
        {
            if (broadcasterId == null)
                throw new ArgumentNullException(nameof(broadcasterId));

            if (updateChannelGuestStarSettingsBody.IsSet && updateChannelGuestStarSettingsBody.Value == null)
                throw new ArgumentNullException(nameof(updateChannelGuestStarSettingsBody));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="broadcasterId"></param>
        /// <param name="updateChannelGuestStarSettingsBody"></param>
        private void AfterUpdateChannelGuestStarSettingsDefaultImplementation(IUpdateChannelGuestStarSettingsApiResponse apiResponseLocalVar, string broadcasterId, Option<UpdateChannelGuestStarSettingsBody> updateChannelGuestStarSettingsBody)
        {
            bool suppressDefaultLog = false;
            AfterUpdateChannelGuestStarSettings(ref suppressDefaultLog, apiResponseLocalVar, broadcasterId, updateChannelGuestStarSettingsBody);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="broadcasterId"></param>
        /// <param name="updateChannelGuestStarSettingsBody"></param>
        partial void AfterUpdateChannelGuestStarSettings(ref bool suppressDefaultLog, IUpdateChannelGuestStarSettingsApiResponse apiResponseLocalVar, string broadcasterId, Option<UpdateChannelGuestStarSettingsBody> updateChannelGuestStarSettingsBody);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="broadcasterId"></param>
        /// <param name="updateChannelGuestStarSettingsBody"></param>
        private void OnErrorUpdateChannelGuestStarSettingsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string broadcasterId, Option<UpdateChannelGuestStarSettingsBody> updateChannelGuestStarSettingsBody)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateChannelGuestStarSettings(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, broadcasterId, updateChannelGuestStarSettingsBody);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="broadcasterId"></param>
        /// <param name="updateChannelGuestStarSettingsBody"></param>
        partial void OnErrorUpdateChannelGuestStarSettings(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string broadcasterId, Option<UpdateChannelGuestStarSettingsBody> updateChannelGuestStarSettingsBody);

        /// <summary>
        /// BETA Mutates the channel settings for configuration of the Guest Star feature for a particular host. BETA Mutates the channel settings for configuration of the Guest Star feature for a particular host.  __Authorization:__  * Query parameter &#x60;broadcaster_id&#x60; must match the &#x60;user_id&#x60; in the [User-Access token](https://dev.twitch.tv/docs/authentication#user-access-tokens) * Requires OAuth Scope: &#x60;channel:manage:guest_star&#x60;
        /// </summary>
        /// <param name="broadcasterId">The ID of the broadcaster you want to update Guest Star settings for.</param>
        /// <param name="updateChannelGuestStarSettingsBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateChannelGuestStarSettingsApiResponse"/>&gt;</returns>
        public async Task<IUpdateChannelGuestStarSettingsApiResponse?> UpdateChannelGuestStarSettingsOrDefaultAsync(string broadcasterId, Option<UpdateChannelGuestStarSettingsBody> updateChannelGuestStarSettingsBody = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateChannelGuestStarSettingsAsync(broadcasterId, updateChannelGuestStarSettingsBody, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// BETA Mutates the channel settings for configuration of the Guest Star feature for a particular host. BETA Mutates the channel settings for configuration of the Guest Star feature for a particular host.  __Authorization:__  * Query parameter &#x60;broadcaster_id&#x60; must match the &#x60;user_id&#x60; in the [User-Access token](https://dev.twitch.tv/docs/authentication#user-access-tokens) * Requires OAuth Scope: &#x60;channel:manage:guest_star&#x60;
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="broadcasterId">The ID of the broadcaster you want to update Guest Star settings for.</param>
        /// <param name="updateChannelGuestStarSettingsBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateChannelGuestStarSettingsApiResponse"/>&gt;</returns>
        public async Task<IUpdateChannelGuestStarSettingsApiResponse> UpdateChannelGuestStarSettingsAsync(string broadcasterId, Option<UpdateChannelGuestStarSettingsBody> updateChannelGuestStarSettingsBody = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateChannelGuestStarSettings(broadcasterId, updateChannelGuestStarSettingsBody);

                FormatUpdateChannelGuestStarSettings(ref broadcasterId, updateChannelGuestStarSettingsBody);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/guest_star/channel_settings"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/guest_star/channel_settings");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["broadcaster_id"] = ClientUtils.ParameterToString(broadcasterId);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (updateChannelGuestStarSettingsBody.IsSet)
                        httpRequestMessageLocalVar.Content = (updateChannelGuestStarSettingsBody.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(updateChannelGuestStarSettingsBody.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UpdateChannelGuestStarSettingsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateChannelGuestStarSettingsApiResponse>();

                        UpdateChannelGuestStarSettingsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/guest_star/channel_settings", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateChannelGuestStarSettingsDefaultImplementation(apiResponseLocalVar, broadcasterId, updateChannelGuestStarSettingsBody);

                        Events.ExecuteOnUpdateChannelGuestStarSettings(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateChannelGuestStarSettingsDefaultImplementation(e, "/guest_star/channel_settings", uriBuilderLocalVar.Path, broadcasterId, updateChannelGuestStarSettingsBody);
                Events.ExecuteOnErrorUpdateChannelGuestStarSettings(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateChannelGuestStarSettingsApiResponse"/>
        /// </summary>
        public partial class UpdateChannelGuestStarSettingsApiResponse : TwistedTaleweaver.Integration.Twitch.Helix.Client.ApiResponse, IUpdateChannelGuestStarSettingsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateChannelGuestStarSettingsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateChannelGuestStarSettingsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateChannelGuestStarSettingsApiResponse(ILogger<UpdateChannelGuestStarSettingsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateGuestStarSlot(ref string broadcasterId, ref string moderatorId, ref string sessionId, ref string sourceSlotId, ref Option<string> destinationSlotId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="broadcasterId"></param>
        /// <param name="moderatorId"></param>
        /// <param name="sessionId"></param>
        /// <param name="sourceSlotId"></param>
        /// <param name="destinationSlotId"></param>
        /// <returns></returns>
        private void ValidateUpdateGuestStarSlot(string broadcasterId, string moderatorId, string sessionId, string sourceSlotId, Option<string> destinationSlotId)
        {
            if (broadcasterId == null)
                throw new ArgumentNullException(nameof(broadcasterId));

            if (moderatorId == null)
                throw new ArgumentNullException(nameof(moderatorId));

            if (sessionId == null)
                throw new ArgumentNullException(nameof(sessionId));

            if (sourceSlotId == null)
                throw new ArgumentNullException(nameof(sourceSlotId));

            if (destinationSlotId.IsSet && destinationSlotId.Value == null)
                throw new ArgumentNullException(nameof(destinationSlotId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="broadcasterId"></param>
        /// <param name="moderatorId"></param>
        /// <param name="sessionId"></param>
        /// <param name="sourceSlotId"></param>
        /// <param name="destinationSlotId"></param>
        private void AfterUpdateGuestStarSlotDefaultImplementation(IUpdateGuestStarSlotApiResponse apiResponseLocalVar, string broadcasterId, string moderatorId, string sessionId, string sourceSlotId, Option<string> destinationSlotId)
        {
            bool suppressDefaultLog = false;
            AfterUpdateGuestStarSlot(ref suppressDefaultLog, apiResponseLocalVar, broadcasterId, moderatorId, sessionId, sourceSlotId, destinationSlotId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="broadcasterId"></param>
        /// <param name="moderatorId"></param>
        /// <param name="sessionId"></param>
        /// <param name="sourceSlotId"></param>
        /// <param name="destinationSlotId"></param>
        partial void AfterUpdateGuestStarSlot(ref bool suppressDefaultLog, IUpdateGuestStarSlotApiResponse apiResponseLocalVar, string broadcasterId, string moderatorId, string sessionId, string sourceSlotId, Option<string> destinationSlotId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="broadcasterId"></param>
        /// <param name="moderatorId"></param>
        /// <param name="sessionId"></param>
        /// <param name="sourceSlotId"></param>
        /// <param name="destinationSlotId"></param>
        private void OnErrorUpdateGuestStarSlotDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string broadcasterId, string moderatorId, string sessionId, string sourceSlotId, Option<string> destinationSlotId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateGuestStarSlot(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, broadcasterId, moderatorId, sessionId, sourceSlotId, destinationSlotId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="broadcasterId"></param>
        /// <param name="moderatorId"></param>
        /// <param name="sessionId"></param>
        /// <param name="sourceSlotId"></param>
        /// <param name="destinationSlotId"></param>
        partial void OnErrorUpdateGuestStarSlot(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string broadcasterId, string moderatorId, string sessionId, string sourceSlotId, Option<string> destinationSlotId);

        /// <summary>
        /// BETA Allows a user to update the assigned slot for a particular user within the active Guest Star session. BETA Allows a user to update the assigned slot for a particular user within the active Guest Star session.  __Authorization:__  * Query parameter &#x60;moderator_id&#x60; must match the &#x60;user_id&#x60; in the [User-Access token](https://dev.twitch.tv/docs/authentication#user-access-tokens) * Requires OAuth Scope: &#x60;channel:manage:guest_star&#x60; or &#x60;moderator:manage:guest_star&#x60;
        /// </summary>
        /// <param name="broadcasterId">The ID of the broadcaster running the Guest Star session.</param>
        /// <param name="moderatorId">The ID of the broadcaster or a user that has permission to moderate the broadcaster’s chat room. This ID must match the &#x60;user_id&#x60; in the user access token.</param>
        /// <param name="sessionId">The ID of the Guest Star session in which to update slot settings.</param>
        /// <param name="sourceSlotId">The slot assignment previously assigned to a user.</param>
        /// <param name="destinationSlotId">The slot to move this user assignment to. If the destination slot is occupied, the user assigned will be swapped into &#x60;source_slot_id&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateGuestStarSlotApiResponse"/>&gt;</returns>
        public async Task<IUpdateGuestStarSlotApiResponse?> UpdateGuestStarSlotOrDefaultAsync(string broadcasterId, string moderatorId, string sessionId, string sourceSlotId, Option<string> destinationSlotId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateGuestStarSlotAsync(broadcasterId, moderatorId, sessionId, sourceSlotId, destinationSlotId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// BETA Allows a user to update the assigned slot for a particular user within the active Guest Star session. BETA Allows a user to update the assigned slot for a particular user within the active Guest Star session.  __Authorization:__  * Query parameter &#x60;moderator_id&#x60; must match the &#x60;user_id&#x60; in the [User-Access token](https://dev.twitch.tv/docs/authentication#user-access-tokens) * Requires OAuth Scope: &#x60;channel:manage:guest_star&#x60; or &#x60;moderator:manage:guest_star&#x60;
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="broadcasterId">The ID of the broadcaster running the Guest Star session.</param>
        /// <param name="moderatorId">The ID of the broadcaster or a user that has permission to moderate the broadcaster’s chat room. This ID must match the &#x60;user_id&#x60; in the user access token.</param>
        /// <param name="sessionId">The ID of the Guest Star session in which to update slot settings.</param>
        /// <param name="sourceSlotId">The slot assignment previously assigned to a user.</param>
        /// <param name="destinationSlotId">The slot to move this user assignment to. If the destination slot is occupied, the user assigned will be swapped into &#x60;source_slot_id&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateGuestStarSlotApiResponse"/>&gt;</returns>
        public async Task<IUpdateGuestStarSlotApiResponse> UpdateGuestStarSlotAsync(string broadcasterId, string moderatorId, string sessionId, string sourceSlotId, Option<string> destinationSlotId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateGuestStarSlot(broadcasterId, moderatorId, sessionId, sourceSlotId, destinationSlotId);

                FormatUpdateGuestStarSlot(ref broadcasterId, ref moderatorId, ref sessionId, ref sourceSlotId, ref destinationSlotId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/guest_star/slot"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/guest_star/slot");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["broadcaster_id"] = ClientUtils.ParameterToString(broadcasterId);
                    parseQueryStringLocalVar["moderator_id"] = ClientUtils.ParameterToString(moderatorId);
                    parseQueryStringLocalVar["session_id"] = ClientUtils.ParameterToString(sessionId);
                    parseQueryStringLocalVar["source_slot_id"] = ClientUtils.ParameterToString(sourceSlotId);

                    if (destinationSlotId.IsSet)
                        parseQueryStringLocalVar["destination_slot_id"] = ClientUtils.ParameterToString(destinationSlotId.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    httpRequestMessageLocalVar.Method = HttpMethod.Patch;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UpdateGuestStarSlotApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateGuestStarSlotApiResponse>();

                        UpdateGuestStarSlotApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/guest_star/slot", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateGuestStarSlotDefaultImplementation(apiResponseLocalVar, broadcasterId, moderatorId, sessionId, sourceSlotId, destinationSlotId);

                        Events.ExecuteOnUpdateGuestStarSlot(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateGuestStarSlotDefaultImplementation(e, "/guest_star/slot", uriBuilderLocalVar.Path, broadcasterId, moderatorId, sessionId, sourceSlotId, destinationSlotId);
                Events.ExecuteOnErrorUpdateGuestStarSlot(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateGuestStarSlotApiResponse"/>
        /// </summary>
        public partial class UpdateGuestStarSlotApiResponse : TwistedTaleweaver.Integration.Twitch.Helix.Client.ApiResponse, IUpdateGuestStarSlotApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateGuestStarSlotApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateGuestStarSlotApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateGuestStarSlotApiResponse(ILogger<UpdateGuestStarSlotApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateGuestStarSlotSettings(ref string broadcasterId, ref string moderatorId, ref string sessionId, ref string slotId, ref Option<bool> isAudioEnabled, ref Option<bool> isVideoEnabled, ref Option<bool> isLive, ref Option<int> volume);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="broadcasterId"></param>
        /// <param name="moderatorId"></param>
        /// <param name="sessionId"></param>
        /// <param name="slotId"></param>
        /// <returns></returns>
        private void ValidateUpdateGuestStarSlotSettings(string broadcasterId, string moderatorId, string sessionId, string slotId)
        {
            if (broadcasterId == null)
                throw new ArgumentNullException(nameof(broadcasterId));

            if (moderatorId == null)
                throw new ArgumentNullException(nameof(moderatorId));

            if (sessionId == null)
                throw new ArgumentNullException(nameof(sessionId));

            if (slotId == null)
                throw new ArgumentNullException(nameof(slotId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="broadcasterId"></param>
        /// <param name="moderatorId"></param>
        /// <param name="sessionId"></param>
        /// <param name="slotId"></param>
        /// <param name="isAudioEnabled"></param>
        /// <param name="isVideoEnabled"></param>
        /// <param name="isLive"></param>
        /// <param name="volume"></param>
        private void AfterUpdateGuestStarSlotSettingsDefaultImplementation(IUpdateGuestStarSlotSettingsApiResponse apiResponseLocalVar, string broadcasterId, string moderatorId, string sessionId, string slotId, Option<bool> isAudioEnabled, Option<bool> isVideoEnabled, Option<bool> isLive, Option<int> volume)
        {
            bool suppressDefaultLog = false;
            AfterUpdateGuestStarSlotSettings(ref suppressDefaultLog, apiResponseLocalVar, broadcasterId, moderatorId, sessionId, slotId, isAudioEnabled, isVideoEnabled, isLive, volume);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="broadcasterId"></param>
        /// <param name="moderatorId"></param>
        /// <param name="sessionId"></param>
        /// <param name="slotId"></param>
        /// <param name="isAudioEnabled"></param>
        /// <param name="isVideoEnabled"></param>
        /// <param name="isLive"></param>
        /// <param name="volume"></param>
        partial void AfterUpdateGuestStarSlotSettings(ref bool suppressDefaultLog, IUpdateGuestStarSlotSettingsApiResponse apiResponseLocalVar, string broadcasterId, string moderatorId, string sessionId, string slotId, Option<bool> isAudioEnabled, Option<bool> isVideoEnabled, Option<bool> isLive, Option<int> volume);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="broadcasterId"></param>
        /// <param name="moderatorId"></param>
        /// <param name="sessionId"></param>
        /// <param name="slotId"></param>
        /// <param name="isAudioEnabled"></param>
        /// <param name="isVideoEnabled"></param>
        /// <param name="isLive"></param>
        /// <param name="volume"></param>
        private void OnErrorUpdateGuestStarSlotSettingsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string broadcasterId, string moderatorId, string sessionId, string slotId, Option<bool> isAudioEnabled, Option<bool> isVideoEnabled, Option<bool> isLive, Option<int> volume)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateGuestStarSlotSettings(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, broadcasterId, moderatorId, sessionId, slotId, isAudioEnabled, isVideoEnabled, isLive, volume);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="broadcasterId"></param>
        /// <param name="moderatorId"></param>
        /// <param name="sessionId"></param>
        /// <param name="slotId"></param>
        /// <param name="isAudioEnabled"></param>
        /// <param name="isVideoEnabled"></param>
        /// <param name="isLive"></param>
        /// <param name="volume"></param>
        partial void OnErrorUpdateGuestStarSlotSettings(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string broadcasterId, string moderatorId, string sessionId, string slotId, Option<bool> isAudioEnabled, Option<bool> isVideoEnabled, Option<bool> isLive, Option<int> volume);

        /// <summary>
        /// BETA Allows a user to update slot settings for a particular guest within a Guest Star session. BETA Allows a user to update slot settings for a particular guest within a Guest Star session, such as allowing the user to share audio or video within the call as a host. These settings will be broadcasted to all subscribers which control their view of the guest in that slot. One or more of the optional parameters to this API can be specified at any time.  __Authorization:__  * Query parameter &#x60;moderator_id&#x60; must match the &#x60;user_id&#x60; in the [User-Access token](https://dev.twitch.tv/docs/authentication#user-access-tokens) * Requires OAuth Scope: &#x60;channel:manage:guest_star&#x60; or &#x60;moderator:manage:guest_star&#x60;
        /// </summary>
        /// <param name="broadcasterId">The ID of the broadcaster running the Guest Star session.</param>
        /// <param name="moderatorId">The ID of the broadcaster or a user that has permission to moderate the broadcaster’s chat room. This ID must match the user ID in the user access token.</param>
        /// <param name="sessionId">The ID of the Guest Star session in which to update a slot’s settings.</param>
        /// <param name="slotId">The slot assignment that has previously been assigned to a user.</param>
        /// <param name="isAudioEnabled">Flag indicating whether the slot is allowed to share their audio with the rest of the session. If false, the slot will be muted in any views containing the slot. (optional)</param>
        /// <param name="isVideoEnabled">Flag indicating whether the slot is allowed to share their video with the rest of the session. If false, the slot will have no video shared in any views containing the slot. (optional)</param>
        /// <param name="isLive">Flag indicating whether the user assigned to this slot is visible/can be heard from any public subscriptions. Generally, this determines whether or not the slot is enabled in any broadcasting software integrations. (optional)</param>
        /// <param name="volume">Value from 0-100 that controls the audio volume for shared views containing the slot. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateGuestStarSlotSettingsApiResponse"/>&gt;</returns>
        public async Task<IUpdateGuestStarSlotSettingsApiResponse?> UpdateGuestStarSlotSettingsOrDefaultAsync(string broadcasterId, string moderatorId, string sessionId, string slotId, Option<bool> isAudioEnabled = default, Option<bool> isVideoEnabled = default, Option<bool> isLive = default, Option<int> volume = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateGuestStarSlotSettingsAsync(broadcasterId, moderatorId, sessionId, slotId, isAudioEnabled, isVideoEnabled, isLive, volume, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// BETA Allows a user to update slot settings for a particular guest within a Guest Star session. BETA Allows a user to update slot settings for a particular guest within a Guest Star session, such as allowing the user to share audio or video within the call as a host. These settings will be broadcasted to all subscribers which control their view of the guest in that slot. One or more of the optional parameters to this API can be specified at any time.  __Authorization:__  * Query parameter &#x60;moderator_id&#x60; must match the &#x60;user_id&#x60; in the [User-Access token](https://dev.twitch.tv/docs/authentication#user-access-tokens) * Requires OAuth Scope: &#x60;channel:manage:guest_star&#x60; or &#x60;moderator:manage:guest_star&#x60;
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="broadcasterId">The ID of the broadcaster running the Guest Star session.</param>
        /// <param name="moderatorId">The ID of the broadcaster or a user that has permission to moderate the broadcaster’s chat room. This ID must match the user ID in the user access token.</param>
        /// <param name="sessionId">The ID of the Guest Star session in which to update a slot’s settings.</param>
        /// <param name="slotId">The slot assignment that has previously been assigned to a user.</param>
        /// <param name="isAudioEnabled">Flag indicating whether the slot is allowed to share their audio with the rest of the session. If false, the slot will be muted in any views containing the slot. (optional)</param>
        /// <param name="isVideoEnabled">Flag indicating whether the slot is allowed to share their video with the rest of the session. If false, the slot will have no video shared in any views containing the slot. (optional)</param>
        /// <param name="isLive">Flag indicating whether the user assigned to this slot is visible/can be heard from any public subscriptions. Generally, this determines whether or not the slot is enabled in any broadcasting software integrations. (optional)</param>
        /// <param name="volume">Value from 0-100 that controls the audio volume for shared views containing the slot. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateGuestStarSlotSettingsApiResponse"/>&gt;</returns>
        public async Task<IUpdateGuestStarSlotSettingsApiResponse> UpdateGuestStarSlotSettingsAsync(string broadcasterId, string moderatorId, string sessionId, string slotId, Option<bool> isAudioEnabled = default, Option<bool> isVideoEnabled = default, Option<bool> isLive = default, Option<int> volume = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateGuestStarSlotSettings(broadcasterId, moderatorId, sessionId, slotId);

                FormatUpdateGuestStarSlotSettings(ref broadcasterId, ref moderatorId, ref sessionId, ref slotId, ref isAudioEnabled, ref isVideoEnabled, ref isLive, ref volume);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/guest_star/slot_settings"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/guest_star/slot_settings");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["broadcaster_id"] = ClientUtils.ParameterToString(broadcasterId);
                    parseQueryStringLocalVar["moderator_id"] = ClientUtils.ParameterToString(moderatorId);
                    parseQueryStringLocalVar["session_id"] = ClientUtils.ParameterToString(sessionId);
                    parseQueryStringLocalVar["slot_id"] = ClientUtils.ParameterToString(slotId);

                    if (isAudioEnabled.IsSet)
                        parseQueryStringLocalVar["is_audio_enabled"] = ClientUtils.ParameterToString(isAudioEnabled.Value);

                    if (isVideoEnabled.IsSet)
                        parseQueryStringLocalVar["is_video_enabled"] = ClientUtils.ParameterToString(isVideoEnabled.Value);

                    if (isLive.IsSet)
                        parseQueryStringLocalVar["is_live"] = ClientUtils.ParameterToString(isLive.Value);

                    if (volume.IsSet)
                        parseQueryStringLocalVar["volume"] = ClientUtils.ParameterToString(volume.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    httpRequestMessageLocalVar.Method = HttpMethod.Patch;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UpdateGuestStarSlotSettingsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateGuestStarSlotSettingsApiResponse>();

                        UpdateGuestStarSlotSettingsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/guest_star/slot_settings", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateGuestStarSlotSettingsDefaultImplementation(apiResponseLocalVar, broadcasterId, moderatorId, sessionId, slotId, isAudioEnabled, isVideoEnabled, isLive, volume);

                        Events.ExecuteOnUpdateGuestStarSlotSettings(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateGuestStarSlotSettingsDefaultImplementation(e, "/guest_star/slot_settings", uriBuilderLocalVar.Path, broadcasterId, moderatorId, sessionId, slotId, isAudioEnabled, isVideoEnabled, isLive, volume);
                Events.ExecuteOnErrorUpdateGuestStarSlotSettings(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateGuestStarSlotSettingsApiResponse"/>
        /// </summary>
        public partial class UpdateGuestStarSlotSettingsApiResponse : TwistedTaleweaver.Integration.Twitch.Helix.Client.ApiResponse, IUpdateGuestStarSlotSettingsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateGuestStarSlotSettingsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateGuestStarSlotSettingsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateGuestStarSlotSettingsApiResponse(ILogger<UpdateGuestStarSlotSettingsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}

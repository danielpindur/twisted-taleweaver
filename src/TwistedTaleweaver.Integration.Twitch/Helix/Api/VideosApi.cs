// <auto-generated>
/*
 * Twitch API Swagger UI (Unofficial)
 *
 * Unofficial Swagger UI for Twitch API.  All endpoints are generated automatically from the [twitch docs](https://dev.twitch.tv/docs/api/reference) page.  __Features:__  * Swagger UI for all Twitch API endpoints * Schemas for _Request Query Parameters_, _Request Body_, _Response Body_ * Some additional schemas like _Clip_, _ChatBadge_, _Prediction_, _Game_, _Channel_, _Video_ etc. * Response codes and examples * Generated types for TypeScript: [ts-twitch-api](https://github.com/DmitryScaletta/ts-twitch-api)  __Repository:__ [github.com/DmitryScaletta/twitch-api-swagger](https://github.com/DmitryScaletta/twitch-api-swagger)
 *
 * The version of the OpenAPI document: helix
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using TwistedTaleweaver.Integration.Twitch.Helix.Client;
using TwistedTaleweaver.Integration.Twitch.Helix.Model;
using System.Diagnostics.CodeAnalysis;

namespace TwistedTaleweaver.Integration.Twitch.Helix.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IVideosApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        VideosApiEvents Events { get; }

        /// <summary>
        /// Deletes one or more videos.
        /// </summary>
        /// <remarks>
        /// Deletes one or more videos. You may delete past broadcasts, highlights, or uploads.  __Authorization:__  Requires a [user access token](https://dev.twitch.tv/docs/authentication#user-access-tokens) that includes the **channel:manage:videos** scope.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The list of videos to delete. To specify more than one video, include the _id_ parameter for each video to delete. For example, &#x60;id&#x3D;1234&amp;id&#x3D;5678&#x60;. You can delete a maximum of 5 videos per request. Ignores invalid video IDs.      If the user doesn’t have permission to delete one of the videos in the list, none of the videos are deleted.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteVideosApiResponse"/>&gt;</returns>
        Task<IDeleteVideosApiResponse> DeleteVideosAsync(List<string> id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Deletes one or more videos.
        /// </summary>
        /// <remarks>
        /// Deletes one or more videos. You may delete past broadcasts, highlights, or uploads.  __Authorization:__  Requires a [user access token](https://dev.twitch.tv/docs/authentication#user-access-tokens) that includes the **channel:manage:videos** scope.
        /// </remarks>
        /// <param name="id">The list of videos to delete. To specify more than one video, include the _id_ parameter for each video to delete. For example, &#x60;id&#x3D;1234&amp;id&#x3D;5678&#x60;. You can delete a maximum of 5 videos per request. Ignores invalid video IDs.      If the user doesn’t have permission to delete one of the videos in the list, none of the videos are deleted.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteVideosApiResponse"/>?&gt;</returns>
        Task<IDeleteVideosApiResponse?> DeleteVideosOrDefaultAsync(List<string> id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets information about one or more published videos.
        /// </summary>
        /// <remarks>
        /// Gets information about one or more published videos. You may get videos by ID, by user, or by game/category.  You may apply several filters to get a subset of the videos. The filters are applied as an AND operation to each video. For example, if _language_ is set to ‘de’ and _game\\_id_ is set to 21779, the response includes only videos that show playing League of Legends by users that stream in German. The filters apply only if you get videos by user ID or game ID.  __Authorization:__  Requires an [app access token](https://dev.twitch.tv/docs/authentication#app-access-tokens) or [user access token](https://dev.twitch.tv/docs/authentication#user-access-tokens).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A list of IDs that identify the videos you want to get. To get more than one video, include this parameter for each video you want to get. For example, &#x60;id&#x3D;1234&amp;id&#x3D;5678&#x60;. You may specify a maximum of 100 IDs. The endpoint ignores duplicate IDs and IDs that weren&#39;t found (if there&#39;s at least one valid ID).      The _id_, _user\\_id_, and _game\\_id_ parameters are mutually exclusive. (optional)</param>
        /// <param name="userId">The ID of the user whose list of videos you want to get.      The _id_, _user\\_id_, and _game\\_id_ parameters are mutually exclusive. (optional)</param>
        /// <param name="gameId">A category or game ID. The response contains a maximum of 500 videos that show this content. To get category/game IDs, use the [Search Categories](https://dev.twitch.tv/docs/api/reference#search-categories) endpoint.      The _id_, _user\\_id_, and _game\\_id_ parameters are mutually exclusive. (optional)</param>
        /// <param name="language">A filter used to filter the list of videos by the language that the video owner broadcasts in. For example, to get videos that were broadcast in German, set this parameter to the ISO 639-1 two-letter code for German (i.e., DE). For a list of supported languages, see [Supported Stream Language](https://help.twitch.tv/s/article/languages-on-twitch#streamlang). If the language is not supported, use “other.”      Specify this parameter only if you specify the _game\\_id_ query parameter. (optional)</param>
        /// <param name="period">A filter used to filter the list of videos by when they were published. For example, videos published in the last week. Possible values are:      * all * day * month * week    The default is \&quot;all,\&quot; which returns videos published in all periods.      Specify this parameter only if you specify the _game\\_id_ or _user\\_id_ query parameter. (optional)</param>
        /// <param name="sort">The order to sort the returned videos in. Possible values are:      * time — Sort the results in descending order by when they were created (i.e., latest video first). * trending — Sort the results in descending order by biggest gains in viewership (i.e., highest trending video first). * views — Sort the results in descending order by most views (i.e., highest number of views first).    The default is \&quot;time.\&quot;      Specify this parameter only if you specify the _game\\_id_ or _user\\_id_ query parameter. (optional)</param>
        /// <param name="type">A filter used to filter the list of videos by the video&#39;s type. Possible case-sensitive values are:      * all * archive — On-demand videos (VODs) of past streams. * highlight — Highlight reels of past streams. * upload — External videos that the broadcaster uploaded using the Video Producer.    The default is \&quot;all,\&quot; which returns all video types.      Specify this parameter only if you specify the _game\\_id_ or _user\\_id_ query parameter. (optional)</param>
        /// <param name="first">The maximum number of items to return per page in the response. The minimum page size is 1 item per page and the maximum is 100\\. The default is 20.      Specify this parameter only if you specify the _game\\_id_ or _user\\_id_ query parameter. (optional)</param>
        /// <param name="after">The cursor used to get the next page of results. The **Pagination** object in the response contains the cursor’s value. [Read More](https://dev.twitch.tv/docs/api/guide#pagination)      Specify this parameter only if you specify the _user\\_id_ query parameter. (optional)</param>
        /// <param name="before">The cursor used to get the previous page of results. The **Pagination** object in the response contains the cursor’s value. [Read More](https://dev.twitch.tv/docs/api/guide#pagination)      Specify this parameter only if you specify the _user\\_id_ query parameter. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetVideosApiResponse"/>&gt;</returns>
        Task<IGetVideosApiResponse> GetVideosAsync(Option<List<string>> id = default, Option<string> userId = default, Option<string> gameId = default, Option<string> language = default, Option<string> period = default, Option<string> sort = default, Option<string> type = default, Option<string> first = default, Option<string> after = default, Option<string> before = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets information about one or more published videos.
        /// </summary>
        /// <remarks>
        /// Gets information about one or more published videos. You may get videos by ID, by user, or by game/category.  You may apply several filters to get a subset of the videos. The filters are applied as an AND operation to each video. For example, if _language_ is set to ‘de’ and _game\\_id_ is set to 21779, the response includes only videos that show playing League of Legends by users that stream in German. The filters apply only if you get videos by user ID or game ID.  __Authorization:__  Requires an [app access token](https://dev.twitch.tv/docs/authentication#app-access-tokens) or [user access token](https://dev.twitch.tv/docs/authentication#user-access-tokens).
        /// </remarks>
        /// <param name="id">A list of IDs that identify the videos you want to get. To get more than one video, include this parameter for each video you want to get. For example, &#x60;id&#x3D;1234&amp;id&#x3D;5678&#x60;. You may specify a maximum of 100 IDs. The endpoint ignores duplicate IDs and IDs that weren&#39;t found (if there&#39;s at least one valid ID).      The _id_, _user\\_id_, and _game\\_id_ parameters are mutually exclusive. (optional)</param>
        /// <param name="userId">The ID of the user whose list of videos you want to get.      The _id_, _user\\_id_, and _game\\_id_ parameters are mutually exclusive. (optional)</param>
        /// <param name="gameId">A category or game ID. The response contains a maximum of 500 videos that show this content. To get category/game IDs, use the [Search Categories](https://dev.twitch.tv/docs/api/reference#search-categories) endpoint.      The _id_, _user\\_id_, and _game\\_id_ parameters are mutually exclusive. (optional)</param>
        /// <param name="language">A filter used to filter the list of videos by the language that the video owner broadcasts in. For example, to get videos that were broadcast in German, set this parameter to the ISO 639-1 two-letter code for German (i.e., DE). For a list of supported languages, see [Supported Stream Language](https://help.twitch.tv/s/article/languages-on-twitch#streamlang). If the language is not supported, use “other.”      Specify this parameter only if you specify the _game\\_id_ query parameter. (optional)</param>
        /// <param name="period">A filter used to filter the list of videos by when they were published. For example, videos published in the last week. Possible values are:      * all * day * month * week    The default is \&quot;all,\&quot; which returns videos published in all periods.      Specify this parameter only if you specify the _game\\_id_ or _user\\_id_ query parameter. (optional)</param>
        /// <param name="sort">The order to sort the returned videos in. Possible values are:      * time — Sort the results in descending order by when they were created (i.e., latest video first). * trending — Sort the results in descending order by biggest gains in viewership (i.e., highest trending video first). * views — Sort the results in descending order by most views (i.e., highest number of views first).    The default is \&quot;time.\&quot;      Specify this parameter only if you specify the _game\\_id_ or _user\\_id_ query parameter. (optional)</param>
        /// <param name="type">A filter used to filter the list of videos by the video&#39;s type. Possible case-sensitive values are:      * all * archive — On-demand videos (VODs) of past streams. * highlight — Highlight reels of past streams. * upload — External videos that the broadcaster uploaded using the Video Producer.    The default is \&quot;all,\&quot; which returns all video types.      Specify this parameter only if you specify the _game\\_id_ or _user\\_id_ query parameter. (optional)</param>
        /// <param name="first">The maximum number of items to return per page in the response. The minimum page size is 1 item per page and the maximum is 100\\. The default is 20.      Specify this parameter only if you specify the _game\\_id_ or _user\\_id_ query parameter. (optional)</param>
        /// <param name="after">The cursor used to get the next page of results. The **Pagination** object in the response contains the cursor’s value. [Read More](https://dev.twitch.tv/docs/api/guide#pagination)      Specify this parameter only if you specify the _user\\_id_ query parameter. (optional)</param>
        /// <param name="before">The cursor used to get the previous page of results. The **Pagination** object in the response contains the cursor’s value. [Read More](https://dev.twitch.tv/docs/api/guide#pagination)      Specify this parameter only if you specify the _user\\_id_ query parameter. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetVideosApiResponse"/>?&gt;</returns>
        Task<IGetVideosApiResponse?> GetVideosOrDefaultAsync(Option<List<string>> id = default, Option<string> userId = default, Option<string> gameId = default, Option<string> language = default, Option<string> period = default, Option<string> sort = default, Option<string> type = default, Option<string> first = default, Option<string> after = default, Option<string> before = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IDeleteVideosApiResponse"/>
    /// </summary>
    public interface IDeleteVideosApiResponse : TwistedTaleweaver.Integration.Twitch.Helix.Client.IApiResponse, IOk<TwistedTaleweaver.Integration.Twitch.Helix.Model.DeleteVideosResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }
    }

    /// <summary>
    /// The <see cref="IGetVideosApiResponse"/>
    /// </summary>
    public interface IGetVideosApiResponse : TwistedTaleweaver.Integration.Twitch.Helix.Client.IApiResponse, IOk<TwistedTaleweaver.Integration.Twitch.Helix.Model.GetVideosResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class VideosApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteVideos;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteVideos;

        internal void ExecuteOnDeleteVideos(VideosApi.DeleteVideosApiResponse apiResponse)
        {
            OnDeleteVideos?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteVideos(Exception exception)
        {
            OnErrorDeleteVideos?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetVideos;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetVideos;

        internal void ExecuteOnGetVideos(VideosApi.GetVideosApiResponse apiResponse)
        {
            OnGetVideos?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetVideos(Exception exception)
        {
            OnErrorGetVideos?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class VideosApi : IVideosApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<VideosApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public VideosApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="OauthTokenProvider"/>
        /// </summary>
        public TokenProvider<OAuthToken> OauthTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="VideosApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VideosApi(ILogger<VideosApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, VideosApiEvents videosApiEvents,
            TokenProvider<OAuthToken> oauthTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<VideosApi>();
            HttpClient = httpClient;
            Events = videosApiEvents;
            OauthTokenProvider = oauthTokenProvider;
        }

        partial void FormatDeleteVideos(List<string> id);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        private void ValidateDeleteVideos(List<string> id)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterDeleteVideosDefaultImplementation(IDeleteVideosApiResponse apiResponseLocalVar, List<string> id)
        {
            bool suppressDefaultLog = false;
            AfterDeleteVideos(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterDeleteVideos(ref bool suppressDefaultLog, IDeleteVideosApiResponse apiResponseLocalVar, List<string> id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorDeleteVideosDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, List<string> id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteVideos(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorDeleteVideos(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, List<string> id);

        /// <summary>
        /// Deletes one or more videos. Deletes one or more videos. You may delete past broadcasts, highlights, or uploads.  __Authorization:__  Requires a [user access token](https://dev.twitch.tv/docs/authentication#user-access-tokens) that includes the **channel:manage:videos** scope.
        /// </summary>
        /// <param name="id">The list of videos to delete. To specify more than one video, include the _id_ parameter for each video to delete. For example, &#x60;id&#x3D;1234&amp;id&#x3D;5678&#x60;. You can delete a maximum of 5 videos per request. Ignores invalid video IDs.      If the user doesn’t have permission to delete one of the videos in the list, none of the videos are deleted.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteVideosApiResponse"/>&gt;</returns>
        public async Task<IDeleteVideosApiResponse?> DeleteVideosOrDefaultAsync(List<string> id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteVideosAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Deletes one or more videos. Deletes one or more videos. You may delete past broadcasts, highlights, or uploads.  __Authorization:__  Requires a [user access token](https://dev.twitch.tv/docs/authentication#user-access-tokens) that includes the **channel:manage:videos** scope.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The list of videos to delete. To specify more than one video, include the _id_ parameter for each video to delete. For example, &#x60;id&#x3D;1234&amp;id&#x3D;5678&#x60;. You can delete a maximum of 5 videos per request. Ignores invalid video IDs.      If the user doesn’t have permission to delete one of the videos in the list, none of the videos are deleted.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteVideosApiResponse"/>&gt;</returns>
        public async Task<IDeleteVideosApiResponse> DeleteVideosAsync(List<string> id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteVideos(id);

                FormatDeleteVideos(id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/videos"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/videos");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["id"] = ClientUtils.ParameterToString(id);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteVideosApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteVideosApiResponse>();

                        DeleteVideosApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/videos", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteVideosDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnDeleteVideos(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteVideosDefaultImplementation(e, "/videos", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorDeleteVideos(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteVideosApiResponse"/>
        /// </summary>
        public partial class DeleteVideosApiResponse : TwistedTaleweaver.Integration.Twitch.Helix.Client.ApiResponse, IDeleteVideosApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteVideosApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteVideosApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteVideosApiResponse(ILogger<DeleteVideosApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public TwistedTaleweaver.Integration.Twitch.Helix.Model.DeleteVideosResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<TwistedTaleweaver.Integration.Twitch.Helix.Model.DeleteVideosResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out TwistedTaleweaver.Integration.Twitch.Helix.Model.DeleteVideosResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetVideos(Option<List<string>> id, ref Option<string> userId, ref Option<string> gameId, ref Option<string> language, ref Option<string> period, ref Option<string> sort, ref Option<string> type, ref Option<string> first, ref Option<string> after, ref Option<string> before);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="userId"></param>
        /// <param name="gameId"></param>
        /// <param name="language"></param>
        /// <param name="period"></param>
        /// <param name="sort"></param>
        /// <param name="type"></param>
        /// <param name="first"></param>
        /// <param name="after"></param>
        /// <param name="before"></param>
        /// <returns></returns>
        private void ValidateGetVideos(Option<List<string>> id, Option<string> userId, Option<string> gameId, Option<string> language, Option<string> period, Option<string> sort, Option<string> type, Option<string> first, Option<string> after, Option<string> before)
        {
            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id));

            if (userId.IsSet && userId.Value == null)
                throw new ArgumentNullException(nameof(userId));

            if (gameId.IsSet && gameId.Value == null)
                throw new ArgumentNullException(nameof(gameId));

            if (language.IsSet && language.Value == null)
                throw new ArgumentNullException(nameof(language));

            if (period.IsSet && period.Value == null)
                throw new ArgumentNullException(nameof(period));

            if (sort.IsSet && sort.Value == null)
                throw new ArgumentNullException(nameof(sort));

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type));

            if (first.IsSet && first.Value == null)
                throw new ArgumentNullException(nameof(first));

            if (after.IsSet && after.Value == null)
                throw new ArgumentNullException(nameof(after));

            if (before.IsSet && before.Value == null)
                throw new ArgumentNullException(nameof(before));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="userId"></param>
        /// <param name="gameId"></param>
        /// <param name="language"></param>
        /// <param name="period"></param>
        /// <param name="sort"></param>
        /// <param name="type"></param>
        /// <param name="first"></param>
        /// <param name="after"></param>
        /// <param name="before"></param>
        private void AfterGetVideosDefaultImplementation(IGetVideosApiResponse apiResponseLocalVar, Option<List<string>> id, Option<string> userId, Option<string> gameId, Option<string> language, Option<string> period, Option<string> sort, Option<string> type, Option<string> first, Option<string> after, Option<string> before)
        {
            bool suppressDefaultLog = false;
            AfterGetVideos(ref suppressDefaultLog, apiResponseLocalVar, id, userId, gameId, language, period, sort, type, first, after, before);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="userId"></param>
        /// <param name="gameId"></param>
        /// <param name="language"></param>
        /// <param name="period"></param>
        /// <param name="sort"></param>
        /// <param name="type"></param>
        /// <param name="first"></param>
        /// <param name="after"></param>
        /// <param name="before"></param>
        partial void AfterGetVideos(ref bool suppressDefaultLog, IGetVideosApiResponse apiResponseLocalVar, Option<List<string>> id, Option<string> userId, Option<string> gameId, Option<string> language, Option<string> period, Option<string> sort, Option<string> type, Option<string> first, Option<string> after, Option<string> before);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="userId"></param>
        /// <param name="gameId"></param>
        /// <param name="language"></param>
        /// <param name="period"></param>
        /// <param name="sort"></param>
        /// <param name="type"></param>
        /// <param name="first"></param>
        /// <param name="after"></param>
        /// <param name="before"></param>
        private void OnErrorGetVideosDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<List<string>> id, Option<string> userId, Option<string> gameId, Option<string> language, Option<string> period, Option<string> sort, Option<string> type, Option<string> first, Option<string> after, Option<string> before)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetVideos(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, userId, gameId, language, period, sort, type, first, after, before);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="userId"></param>
        /// <param name="gameId"></param>
        /// <param name="language"></param>
        /// <param name="period"></param>
        /// <param name="sort"></param>
        /// <param name="type"></param>
        /// <param name="first"></param>
        /// <param name="after"></param>
        /// <param name="before"></param>
        partial void OnErrorGetVideos(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<List<string>> id, Option<string> userId, Option<string> gameId, Option<string> language, Option<string> period, Option<string> sort, Option<string> type, Option<string> first, Option<string> after, Option<string> before);

        /// <summary>
        /// Gets information about one or more published videos. Gets information about one or more published videos. You may get videos by ID, by user, or by game/category.  You may apply several filters to get a subset of the videos. The filters are applied as an AND operation to each video. For example, if _language_ is set to ‘de’ and _game\\_id_ is set to 21779, the response includes only videos that show playing League of Legends by users that stream in German. The filters apply only if you get videos by user ID or game ID.  __Authorization:__  Requires an [app access token](https://dev.twitch.tv/docs/authentication#app-access-tokens) or [user access token](https://dev.twitch.tv/docs/authentication#user-access-tokens).
        /// </summary>
        /// <param name="id">A list of IDs that identify the videos you want to get. To get more than one video, include this parameter for each video you want to get. For example, &#x60;id&#x3D;1234&amp;id&#x3D;5678&#x60;. You may specify a maximum of 100 IDs. The endpoint ignores duplicate IDs and IDs that weren&#39;t found (if there&#39;s at least one valid ID).      The _id_, _user\\_id_, and _game\\_id_ parameters are mutually exclusive. (optional)</param>
        /// <param name="userId">The ID of the user whose list of videos you want to get.      The _id_, _user\\_id_, and _game\\_id_ parameters are mutually exclusive. (optional)</param>
        /// <param name="gameId">A category or game ID. The response contains a maximum of 500 videos that show this content. To get category/game IDs, use the [Search Categories](https://dev.twitch.tv/docs/api/reference#search-categories) endpoint.      The _id_, _user\\_id_, and _game\\_id_ parameters are mutually exclusive. (optional)</param>
        /// <param name="language">A filter used to filter the list of videos by the language that the video owner broadcasts in. For example, to get videos that were broadcast in German, set this parameter to the ISO 639-1 two-letter code for German (i.e., DE). For a list of supported languages, see [Supported Stream Language](https://help.twitch.tv/s/article/languages-on-twitch#streamlang). If the language is not supported, use “other.”      Specify this parameter only if you specify the _game\\_id_ query parameter. (optional)</param>
        /// <param name="period">A filter used to filter the list of videos by when they were published. For example, videos published in the last week. Possible values are:      * all * day * month * week    The default is \&quot;all,\&quot; which returns videos published in all periods.      Specify this parameter only if you specify the _game\\_id_ or _user\\_id_ query parameter. (optional)</param>
        /// <param name="sort">The order to sort the returned videos in. Possible values are:      * time — Sort the results in descending order by when they were created (i.e., latest video first). * trending — Sort the results in descending order by biggest gains in viewership (i.e., highest trending video first). * views — Sort the results in descending order by most views (i.e., highest number of views first).    The default is \&quot;time.\&quot;      Specify this parameter only if you specify the _game\\_id_ or _user\\_id_ query parameter. (optional)</param>
        /// <param name="type">A filter used to filter the list of videos by the video&#39;s type. Possible case-sensitive values are:      * all * archive — On-demand videos (VODs) of past streams. * highlight — Highlight reels of past streams. * upload — External videos that the broadcaster uploaded using the Video Producer.    The default is \&quot;all,\&quot; which returns all video types.      Specify this parameter only if you specify the _game\\_id_ or _user\\_id_ query parameter. (optional)</param>
        /// <param name="first">The maximum number of items to return per page in the response. The minimum page size is 1 item per page and the maximum is 100\\. The default is 20.      Specify this parameter only if you specify the _game\\_id_ or _user\\_id_ query parameter. (optional)</param>
        /// <param name="after">The cursor used to get the next page of results. The **Pagination** object in the response contains the cursor’s value. [Read More](https://dev.twitch.tv/docs/api/guide#pagination)      Specify this parameter only if you specify the _user\\_id_ query parameter. (optional)</param>
        /// <param name="before">The cursor used to get the previous page of results. The **Pagination** object in the response contains the cursor’s value. [Read More](https://dev.twitch.tv/docs/api/guide#pagination)      Specify this parameter only if you specify the _user\\_id_ query parameter. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetVideosApiResponse"/>&gt;</returns>
        public async Task<IGetVideosApiResponse?> GetVideosOrDefaultAsync(Option<List<string>> id = default, Option<string> userId = default, Option<string> gameId = default, Option<string> language = default, Option<string> period = default, Option<string> sort = default, Option<string> type = default, Option<string> first = default, Option<string> after = default, Option<string> before = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetVideosAsync(id, userId, gameId, language, period, sort, type, first, after, before, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Gets information about one or more published videos. Gets information about one or more published videos. You may get videos by ID, by user, or by game/category.  You may apply several filters to get a subset of the videos. The filters are applied as an AND operation to each video. For example, if _language_ is set to ‘de’ and _game\\_id_ is set to 21779, the response includes only videos that show playing League of Legends by users that stream in German. The filters apply only if you get videos by user ID or game ID.  __Authorization:__  Requires an [app access token](https://dev.twitch.tv/docs/authentication#app-access-tokens) or [user access token](https://dev.twitch.tv/docs/authentication#user-access-tokens).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A list of IDs that identify the videos you want to get. To get more than one video, include this parameter for each video you want to get. For example, &#x60;id&#x3D;1234&amp;id&#x3D;5678&#x60;. You may specify a maximum of 100 IDs. The endpoint ignores duplicate IDs and IDs that weren&#39;t found (if there&#39;s at least one valid ID).      The _id_, _user\\_id_, and _game\\_id_ parameters are mutually exclusive. (optional)</param>
        /// <param name="userId">The ID of the user whose list of videos you want to get.      The _id_, _user\\_id_, and _game\\_id_ parameters are mutually exclusive. (optional)</param>
        /// <param name="gameId">A category or game ID. The response contains a maximum of 500 videos that show this content. To get category/game IDs, use the [Search Categories](https://dev.twitch.tv/docs/api/reference#search-categories) endpoint.      The _id_, _user\\_id_, and _game\\_id_ parameters are mutually exclusive. (optional)</param>
        /// <param name="language">A filter used to filter the list of videos by the language that the video owner broadcasts in. For example, to get videos that were broadcast in German, set this parameter to the ISO 639-1 two-letter code for German (i.e., DE). For a list of supported languages, see [Supported Stream Language](https://help.twitch.tv/s/article/languages-on-twitch#streamlang). If the language is not supported, use “other.”      Specify this parameter only if you specify the _game\\_id_ query parameter. (optional)</param>
        /// <param name="period">A filter used to filter the list of videos by when they were published. For example, videos published in the last week. Possible values are:      * all * day * month * week    The default is \&quot;all,\&quot; which returns videos published in all periods.      Specify this parameter only if you specify the _game\\_id_ or _user\\_id_ query parameter. (optional)</param>
        /// <param name="sort">The order to sort the returned videos in. Possible values are:      * time — Sort the results in descending order by when they were created (i.e., latest video first). * trending — Sort the results in descending order by biggest gains in viewership (i.e., highest trending video first). * views — Sort the results in descending order by most views (i.e., highest number of views first).    The default is \&quot;time.\&quot;      Specify this parameter only if you specify the _game\\_id_ or _user\\_id_ query parameter. (optional)</param>
        /// <param name="type">A filter used to filter the list of videos by the video&#39;s type. Possible case-sensitive values are:      * all * archive — On-demand videos (VODs) of past streams. * highlight — Highlight reels of past streams. * upload — External videos that the broadcaster uploaded using the Video Producer.    The default is \&quot;all,\&quot; which returns all video types.      Specify this parameter only if you specify the _game\\_id_ or _user\\_id_ query parameter. (optional)</param>
        /// <param name="first">The maximum number of items to return per page in the response. The minimum page size is 1 item per page and the maximum is 100\\. The default is 20.      Specify this parameter only if you specify the _game\\_id_ or _user\\_id_ query parameter. (optional)</param>
        /// <param name="after">The cursor used to get the next page of results. The **Pagination** object in the response contains the cursor’s value. [Read More](https://dev.twitch.tv/docs/api/guide#pagination)      Specify this parameter only if you specify the _user\\_id_ query parameter. (optional)</param>
        /// <param name="before">The cursor used to get the previous page of results. The **Pagination** object in the response contains the cursor’s value. [Read More](https://dev.twitch.tv/docs/api/guide#pagination)      Specify this parameter only if you specify the _user\\_id_ query parameter. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetVideosApiResponse"/>&gt;</returns>
        public async Task<IGetVideosApiResponse> GetVideosAsync(Option<List<string>> id = default, Option<string> userId = default, Option<string> gameId = default, Option<string> language = default, Option<string> period = default, Option<string> sort = default, Option<string> type = default, Option<string> first = default, Option<string> after = default, Option<string> before = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetVideos(id, userId, gameId, language, period, sort, type, first, after, before);

                FormatGetVideos(id, ref userId, ref gameId, ref language, ref period, ref sort, ref type, ref first, ref after, ref before);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/videos"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/videos");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (id.IsSet)
                        parseQueryStringLocalVar["id"] = ClientUtils.ParameterToString(id.Value);

                    if (userId.IsSet)
                        parseQueryStringLocalVar["user_id"] = ClientUtils.ParameterToString(userId.Value);

                    if (gameId.IsSet)
                        parseQueryStringLocalVar["game_id"] = ClientUtils.ParameterToString(gameId.Value);

                    if (language.IsSet)
                        parseQueryStringLocalVar["language"] = ClientUtils.ParameterToString(language.Value);

                    if (period.IsSet)
                        parseQueryStringLocalVar["period"] = ClientUtils.ParameterToString(period.Value);

                    if (sort.IsSet)
                        parseQueryStringLocalVar["sort"] = ClientUtils.ParameterToString(sort.Value);

                    if (type.IsSet)
                        parseQueryStringLocalVar["type"] = ClientUtils.ParameterToString(type.Value);

                    if (first.IsSet)
                        parseQueryStringLocalVar["first"] = ClientUtils.ParameterToString(first.Value);

                    if (after.IsSet)
                        parseQueryStringLocalVar["after"] = ClientUtils.ParameterToString(after.Value);

                    if (before.IsSet)
                        parseQueryStringLocalVar["before"] = ClientUtils.ParameterToString(before.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetVideosApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetVideosApiResponse>();

                        GetVideosApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/videos", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetVideosDefaultImplementation(apiResponseLocalVar, id, userId, gameId, language, period, sort, type, first, after, before);

                        Events.ExecuteOnGetVideos(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetVideosDefaultImplementation(e, "/videos", uriBuilderLocalVar.Path, id, userId, gameId, language, period, sort, type, first, after, before);
                Events.ExecuteOnErrorGetVideos(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetVideosApiResponse"/>
        /// </summary>
        public partial class GetVideosApiResponse : TwistedTaleweaver.Integration.Twitch.Helix.Client.ApiResponse, IGetVideosApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetVideosApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetVideosApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetVideosApiResponse(ILogger<GetVideosApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public TwistedTaleweaver.Integration.Twitch.Helix.Model.GetVideosResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<TwistedTaleweaver.Integration.Twitch.Helix.Model.GetVideosResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out TwistedTaleweaver.Integration.Twitch.Helix.Model.GetVideosResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}

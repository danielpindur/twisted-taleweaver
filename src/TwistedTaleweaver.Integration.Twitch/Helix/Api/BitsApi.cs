// <auto-generated>
/*
 * Twitch API Swagger UI (Unofficial)
 *
 * Unofficial Swagger UI for Twitch API.  All endpoints are generated automatically from the [twitch docs](https://dev.twitch.tv/docs/api/reference) page.  __Features:__  * Swagger UI for all Twitch API endpoints * Schemas for _Request Query Parameters_, _Request Body_, _Response Body_ * Some additional schemas like _Clip_, _ChatBadge_, _Prediction_, _Game_, _Channel_, _Video_ etc. * Response codes and examples * Generated types for TypeScript: [ts-twitch-api](https://github.com/DmitryScaletta/ts-twitch-api)  __Repository:__ [github.com/DmitryScaletta/twitch-api-swagger](https://github.com/DmitryScaletta/twitch-api-swagger)
 *
 * The version of the OpenAPI document: helix
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using TwistedTaleweaver.Integration.Twitch.Helix.Client;
using TwistedTaleweaver.Integration.Twitch.Helix.Model;
using System.Diagnostics.CodeAnalysis;

namespace TwistedTaleweaver.Integration.Twitch.Helix.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IBitsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        BitsApiEvents Events { get; }

        /// <summary>
        /// Gets the Bits leaderboard for the authenticated broadcaster.
        /// </summary>
        /// <remarks>
        /// Gets the Bits leaderboard for the authenticated broadcaster.  __Authorization:__  Requires a [user access token](https://dev.twitch.tv/docs/authentication#user-access-tokens) that includes the **bits:read** scope.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">The number of results to return. The minimum count is 1 and the maximum is 100\\. The default is 10. (optional)</param>
        /// <param name="period">The time period over which data is aggregated (uses the PST time zone). Possible values are:      * day — A day spans from 00:00:00 on the day specified in _started\\_at_ and runs through 00:00:00 of the next day. * week — A week spans from 00:00:00 on the Monday of the week specified in _started\\_at_ and runs through 00:00:00 of the next Monday. * month — A month spans from 00:00:00 on the first day of the month specified in _started\\_at_ and runs through 00:00:00 of the first day of the next month. * year — A year spans from 00:00:00 on the first day of the year specified in _started\\_at_ and runs through 00:00:00 of the first day of the next year. * all — Default. The lifetime of the broadcaster&#39;s channel. (optional)</param>
        /// <param name="startedAt">The start date, in RFC3339 format, used for determining the aggregation period. Specify this parameter only if you specify the _period_ query parameter. The start date is ignored if _period_ is all.      Note that the date is converted to PST before being used, so if you set the start time to &#x60;2022-01-01T00:00:00.0Z&#x60; and _period_ to month, the actual reporting period is December 2021, not January 2022\\. If you want the reporting period to be January 2022, you must set the start time to &#x60;2022-01-01T08:00:00.0Z&#x60; or &#x60;2022-01-01T00:00:00.0-08:00&#x60;.      If your start date uses the ‘+’ offset operator (for example, &#x60;2022-01-01T00:00:00.0+05:00&#x60;), you must URL encode the start date. (optional)</param>
        /// <param name="userId">An ID that identifies a user that cheered bits in the channel. If _count_ is greater than 1, the response may include users ranked above and below the specified user. To get the leaderboard’s top leaders, don’t specify a user ID. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetBitsLeaderboardApiResponse"/>&gt;</returns>
        Task<IGetBitsLeaderboardApiResponse> GetBitsLeaderboardAsync(Option<int> count = default, Option<string> period = default, Option<DateTime> startedAt = default, Option<string> userId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets the Bits leaderboard for the authenticated broadcaster.
        /// </summary>
        /// <remarks>
        /// Gets the Bits leaderboard for the authenticated broadcaster.  __Authorization:__  Requires a [user access token](https://dev.twitch.tv/docs/authentication#user-access-tokens) that includes the **bits:read** scope.
        /// </remarks>
        /// <param name="count">The number of results to return. The minimum count is 1 and the maximum is 100\\. The default is 10. (optional)</param>
        /// <param name="period">The time period over which data is aggregated (uses the PST time zone). Possible values are:      * day — A day spans from 00:00:00 on the day specified in _started\\_at_ and runs through 00:00:00 of the next day. * week — A week spans from 00:00:00 on the Monday of the week specified in _started\\_at_ and runs through 00:00:00 of the next Monday. * month — A month spans from 00:00:00 on the first day of the month specified in _started\\_at_ and runs through 00:00:00 of the first day of the next month. * year — A year spans from 00:00:00 on the first day of the year specified in _started\\_at_ and runs through 00:00:00 of the first day of the next year. * all — Default. The lifetime of the broadcaster&#39;s channel. (optional)</param>
        /// <param name="startedAt">The start date, in RFC3339 format, used for determining the aggregation period. Specify this parameter only if you specify the _period_ query parameter. The start date is ignored if _period_ is all.      Note that the date is converted to PST before being used, so if you set the start time to &#x60;2022-01-01T00:00:00.0Z&#x60; and _period_ to month, the actual reporting period is December 2021, not January 2022\\. If you want the reporting period to be January 2022, you must set the start time to &#x60;2022-01-01T08:00:00.0Z&#x60; or &#x60;2022-01-01T00:00:00.0-08:00&#x60;.      If your start date uses the ‘+’ offset operator (for example, &#x60;2022-01-01T00:00:00.0+05:00&#x60;), you must URL encode the start date. (optional)</param>
        /// <param name="userId">An ID that identifies a user that cheered bits in the channel. If _count_ is greater than 1, the response may include users ranked above and below the specified user. To get the leaderboard’s top leaders, don’t specify a user ID. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetBitsLeaderboardApiResponse"/>?&gt;</returns>
        Task<IGetBitsLeaderboardApiResponse?> GetBitsLeaderboardOrDefaultAsync(Option<int> count = default, Option<string> period = default, Option<DateTime> startedAt = default, Option<string> userId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets a list of Cheermotes that users can use to cheer Bits.
        /// </summary>
        /// <remarks>
        /// Gets a list of Cheermotes that users can use to cheer Bits in any Bits-enabled channel’s chat room. Cheermotes are animated emotes that viewers can assign Bits to.  __Authorization:__  Requires an [app access token](https://dev.twitch.tv/docs/authentication#app-access-tokens) or [user access token](https://dev.twitch.tv/docs/authentication#user-access-tokens).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="broadcasterId">The ID of the broadcaster whose custom Cheermotes you want to get. Specify the broadcaster’s ID if you want to include the broadcaster’s Cheermotes in the response (not all broadcasters upload Cheermotes). If not specified, the response contains only global Cheermotes.      If the broadcaster uploaded Cheermotes, the &#x60;type&#x60; field in the response is set to **channel\\_custom**. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetCheermotesApiResponse"/>&gt;</returns>
        Task<IGetCheermotesApiResponse> GetCheermotesAsync(Option<string> broadcasterId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets a list of Cheermotes that users can use to cheer Bits.
        /// </summary>
        /// <remarks>
        /// Gets a list of Cheermotes that users can use to cheer Bits in any Bits-enabled channel’s chat room. Cheermotes are animated emotes that viewers can assign Bits to.  __Authorization:__  Requires an [app access token](https://dev.twitch.tv/docs/authentication#app-access-tokens) or [user access token](https://dev.twitch.tv/docs/authentication#user-access-tokens).
        /// </remarks>
        /// <param name="broadcasterId">The ID of the broadcaster whose custom Cheermotes you want to get. Specify the broadcaster’s ID if you want to include the broadcaster’s Cheermotes in the response (not all broadcasters upload Cheermotes). If not specified, the response contains only global Cheermotes.      If the broadcaster uploaded Cheermotes, the &#x60;type&#x60; field in the response is set to **channel\\_custom**. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetCheermotesApiResponse"/>?&gt;</returns>
        Task<IGetCheermotesApiResponse?> GetCheermotesOrDefaultAsync(Option<string> broadcasterId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets an extension’s list of transactions.
        /// </summary>
        /// <remarks>
        /// Gets an extension’s list of transactions. A transaction records the exchange of a currency (for example, Bits) for a digital product.  __Authorization:__  Requires an [app access token](https://dev.twitch.tv/docs/authentication#app-access-tokens).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">The ID of the extension whose list of transactions you want to get.</param>
        /// <param name="id">A transaction ID used to filter the list of transactions. Specify this parameter for each transaction you want to get. For example, &#x60;id&#x3D;1234&amp;id&#x3D;5678&#x60;. You may specify a maximum of 100 IDs. (optional)</param>
        /// <param name="first">The maximum number of items to return per page in the response. The minimum page size is 1 item per page and the maximum is 100 items per page. The default is 20. (optional)</param>
        /// <param name="after">The cursor used to get the next page of results. The **Pagination** object in the response contains the cursor’s value. [Read More](https://dev.twitch.tv/docs/api/guide#pagination) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetExtensionTransactionsApiResponse"/>&gt;</returns>
        Task<IGetExtensionTransactionsApiResponse> GetExtensionTransactionsAsync(string extensionId, Option<List<string>> id = default, Option<int> first = default, Option<string> after = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets an extension’s list of transactions.
        /// </summary>
        /// <remarks>
        /// Gets an extension’s list of transactions. A transaction records the exchange of a currency (for example, Bits) for a digital product.  __Authorization:__  Requires an [app access token](https://dev.twitch.tv/docs/authentication#app-access-tokens).
        /// </remarks>
        /// <param name="extensionId">The ID of the extension whose list of transactions you want to get.</param>
        /// <param name="id">A transaction ID used to filter the list of transactions. Specify this parameter for each transaction you want to get. For example, &#x60;id&#x3D;1234&amp;id&#x3D;5678&#x60;. You may specify a maximum of 100 IDs. (optional)</param>
        /// <param name="first">The maximum number of items to return per page in the response. The minimum page size is 1 item per page and the maximum is 100 items per page. The default is 20. (optional)</param>
        /// <param name="after">The cursor used to get the next page of results. The **Pagination** object in the response contains the cursor’s value. [Read More](https://dev.twitch.tv/docs/api/guide#pagination) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetExtensionTransactionsApiResponse"/>?&gt;</returns>
        Task<IGetExtensionTransactionsApiResponse?> GetExtensionTransactionsOrDefaultAsync(string extensionId, Option<List<string>> id = default, Option<int> first = default, Option<string> after = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IGetBitsLeaderboardApiResponse"/>
    /// </summary>
    public interface IGetBitsLeaderboardApiResponse : TwistedTaleweaver.Integration.Twitch.Helix.Client.IApiResponse, IOk<TwistedTaleweaver.Integration.Twitch.Helix.Model.GetBitsLeaderboardResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }
    }

    /// <summary>
    /// The <see cref="IGetCheermotesApiResponse"/>
    /// </summary>
    public interface IGetCheermotesApiResponse : TwistedTaleweaver.Integration.Twitch.Helix.Client.IApiResponse, IOk<TwistedTaleweaver.Integration.Twitch.Helix.Model.GetCheermotesResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }
    }

    /// <summary>
    /// The <see cref="IGetExtensionTransactionsApiResponse"/>
    /// </summary>
    public interface IGetExtensionTransactionsApiResponse : TwistedTaleweaver.Integration.Twitch.Helix.Client.IApiResponse, IOk<TwistedTaleweaver.Integration.Twitch.Helix.Model.GetExtensionTransactionsResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class BitsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetBitsLeaderboard;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetBitsLeaderboard;

        internal void ExecuteOnGetBitsLeaderboard(BitsApi.GetBitsLeaderboardApiResponse apiResponse)
        {
            OnGetBitsLeaderboard?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetBitsLeaderboard(Exception exception)
        {
            OnErrorGetBitsLeaderboard?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetCheermotes;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetCheermotes;

        internal void ExecuteOnGetCheermotes(BitsApi.GetCheermotesApiResponse apiResponse)
        {
            OnGetCheermotes?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetCheermotes(Exception exception)
        {
            OnErrorGetCheermotes?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetExtensionTransactions;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetExtensionTransactions;

        internal void ExecuteOnGetExtensionTransactions(BitsApi.GetExtensionTransactionsApiResponse apiResponse)
        {
            OnGetExtensionTransactions?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetExtensionTransactions(Exception exception)
        {
            OnErrorGetExtensionTransactions?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class BitsApi : IBitsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<BitsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public BitsApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="OauthTokenProvider"/>
        /// </summary>
        public TokenProvider<OAuthToken> OauthTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="BitsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BitsApi(ILogger<BitsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, BitsApiEvents bitsApiEvents,
            TokenProvider<OAuthToken> oauthTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<BitsApi>();
            HttpClient = httpClient;
            Events = bitsApiEvents;
            OauthTokenProvider = oauthTokenProvider;
        }

        partial void FormatGetBitsLeaderboard(ref Option<int> count, ref Option<string> period, ref Option<DateTime> startedAt, ref Option<string> userId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="period"></param>
        /// <param name="userId"></param>
        /// <returns></returns>
        private void ValidateGetBitsLeaderboard(Option<string> period, Option<string> userId)
        {
            if (period.IsSet && period.Value == null)
                throw new ArgumentNullException(nameof(period));

            if (userId.IsSet && userId.Value == null)
                throw new ArgumentNullException(nameof(userId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="count"></param>
        /// <param name="period"></param>
        /// <param name="startedAt"></param>
        /// <param name="userId"></param>
        private void AfterGetBitsLeaderboardDefaultImplementation(IGetBitsLeaderboardApiResponse apiResponseLocalVar, Option<int> count, Option<string> period, Option<DateTime> startedAt, Option<string> userId)
        {
            bool suppressDefaultLog = false;
            AfterGetBitsLeaderboard(ref suppressDefaultLog, apiResponseLocalVar, count, period, startedAt, userId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="count"></param>
        /// <param name="period"></param>
        /// <param name="startedAt"></param>
        /// <param name="userId"></param>
        partial void AfterGetBitsLeaderboard(ref bool suppressDefaultLog, IGetBitsLeaderboardApiResponse apiResponseLocalVar, Option<int> count, Option<string> period, Option<DateTime> startedAt, Option<string> userId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="count"></param>
        /// <param name="period"></param>
        /// <param name="startedAt"></param>
        /// <param name="userId"></param>
        private void OnErrorGetBitsLeaderboardDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> count, Option<string> period, Option<DateTime> startedAt, Option<string> userId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetBitsLeaderboard(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, count, period, startedAt, userId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="count"></param>
        /// <param name="period"></param>
        /// <param name="startedAt"></param>
        /// <param name="userId"></param>
        partial void OnErrorGetBitsLeaderboard(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> count, Option<string> period, Option<DateTime> startedAt, Option<string> userId);

        /// <summary>
        /// Gets the Bits leaderboard for the authenticated broadcaster. Gets the Bits leaderboard for the authenticated broadcaster.  __Authorization:__  Requires a [user access token](https://dev.twitch.tv/docs/authentication#user-access-tokens) that includes the **bits:read** scope.
        /// </summary>
        /// <param name="count">The number of results to return. The minimum count is 1 and the maximum is 100\\. The default is 10. (optional)</param>
        /// <param name="period">The time period over which data is aggregated (uses the PST time zone). Possible values are:      * day — A day spans from 00:00:00 on the day specified in _started\\_at_ and runs through 00:00:00 of the next day. * week — A week spans from 00:00:00 on the Monday of the week specified in _started\\_at_ and runs through 00:00:00 of the next Monday. * month — A month spans from 00:00:00 on the first day of the month specified in _started\\_at_ and runs through 00:00:00 of the first day of the next month. * year — A year spans from 00:00:00 on the first day of the year specified in _started\\_at_ and runs through 00:00:00 of the first day of the next year. * all — Default. The lifetime of the broadcaster&#39;s channel. (optional)</param>
        /// <param name="startedAt">The start date, in RFC3339 format, used for determining the aggregation period. Specify this parameter only if you specify the _period_ query parameter. The start date is ignored if _period_ is all.      Note that the date is converted to PST before being used, so if you set the start time to &#x60;2022-01-01T00:00:00.0Z&#x60; and _period_ to month, the actual reporting period is December 2021, not January 2022\\. If you want the reporting period to be January 2022, you must set the start time to &#x60;2022-01-01T08:00:00.0Z&#x60; or &#x60;2022-01-01T00:00:00.0-08:00&#x60;.      If your start date uses the ‘+’ offset operator (for example, &#x60;2022-01-01T00:00:00.0+05:00&#x60;), you must URL encode the start date. (optional)</param>
        /// <param name="userId">An ID that identifies a user that cheered bits in the channel. If _count_ is greater than 1, the response may include users ranked above and below the specified user. To get the leaderboard’s top leaders, don’t specify a user ID. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetBitsLeaderboardApiResponse"/>&gt;</returns>
        public async Task<IGetBitsLeaderboardApiResponse?> GetBitsLeaderboardOrDefaultAsync(Option<int> count = default, Option<string> period = default, Option<DateTime> startedAt = default, Option<string> userId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetBitsLeaderboardAsync(count, period, startedAt, userId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Gets the Bits leaderboard for the authenticated broadcaster. Gets the Bits leaderboard for the authenticated broadcaster.  __Authorization:__  Requires a [user access token](https://dev.twitch.tv/docs/authentication#user-access-tokens) that includes the **bits:read** scope.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">The number of results to return. The minimum count is 1 and the maximum is 100\\. The default is 10. (optional)</param>
        /// <param name="period">The time period over which data is aggregated (uses the PST time zone). Possible values are:      * day — A day spans from 00:00:00 on the day specified in _started\\_at_ and runs through 00:00:00 of the next day. * week — A week spans from 00:00:00 on the Monday of the week specified in _started\\_at_ and runs through 00:00:00 of the next Monday. * month — A month spans from 00:00:00 on the first day of the month specified in _started\\_at_ and runs through 00:00:00 of the first day of the next month. * year — A year spans from 00:00:00 on the first day of the year specified in _started\\_at_ and runs through 00:00:00 of the first day of the next year. * all — Default. The lifetime of the broadcaster&#39;s channel. (optional)</param>
        /// <param name="startedAt">The start date, in RFC3339 format, used for determining the aggregation period. Specify this parameter only if you specify the _period_ query parameter. The start date is ignored if _period_ is all.      Note that the date is converted to PST before being used, so if you set the start time to &#x60;2022-01-01T00:00:00.0Z&#x60; and _period_ to month, the actual reporting period is December 2021, not January 2022\\. If you want the reporting period to be January 2022, you must set the start time to &#x60;2022-01-01T08:00:00.0Z&#x60; or &#x60;2022-01-01T00:00:00.0-08:00&#x60;.      If your start date uses the ‘+’ offset operator (for example, &#x60;2022-01-01T00:00:00.0+05:00&#x60;), you must URL encode the start date. (optional)</param>
        /// <param name="userId">An ID that identifies a user that cheered bits in the channel. If _count_ is greater than 1, the response may include users ranked above and below the specified user. To get the leaderboard’s top leaders, don’t specify a user ID. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetBitsLeaderboardApiResponse"/>&gt;</returns>
        public async Task<IGetBitsLeaderboardApiResponse> GetBitsLeaderboardAsync(Option<int> count = default, Option<string> period = default, Option<DateTime> startedAt = default, Option<string> userId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetBitsLeaderboard(period, userId);

                FormatGetBitsLeaderboard(ref count, ref period, ref startedAt, ref userId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/bits/leaderboard"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/bits/leaderboard");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (count.IsSet)
                        parseQueryStringLocalVar["count"] = ClientUtils.ParameterToString(count.Value);

                    if (period.IsSet)
                        parseQueryStringLocalVar["period"] = ClientUtils.ParameterToString(period.Value);

                    if (startedAt.IsSet)
                        parseQueryStringLocalVar["started_at"] = ClientUtils.ParameterToString(startedAt.Value);

                    if (userId.IsSet)
                        parseQueryStringLocalVar["user_id"] = ClientUtils.ParameterToString(userId.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetBitsLeaderboardApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetBitsLeaderboardApiResponse>();

                        GetBitsLeaderboardApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/bits/leaderboard", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetBitsLeaderboardDefaultImplementation(apiResponseLocalVar, count, period, startedAt, userId);

                        Events.ExecuteOnGetBitsLeaderboard(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetBitsLeaderboardDefaultImplementation(e, "/bits/leaderboard", uriBuilderLocalVar.Path, count, period, startedAt, userId);
                Events.ExecuteOnErrorGetBitsLeaderboard(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetBitsLeaderboardApiResponse"/>
        /// </summary>
        public partial class GetBitsLeaderboardApiResponse : TwistedTaleweaver.Integration.Twitch.Helix.Client.ApiResponse, IGetBitsLeaderboardApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetBitsLeaderboardApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetBitsLeaderboardApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetBitsLeaderboardApiResponse(ILogger<GetBitsLeaderboardApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public TwistedTaleweaver.Integration.Twitch.Helix.Model.GetBitsLeaderboardResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<TwistedTaleweaver.Integration.Twitch.Helix.Model.GetBitsLeaderboardResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out TwistedTaleweaver.Integration.Twitch.Helix.Model.GetBitsLeaderboardResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetCheermotes(ref Option<string> broadcasterId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="broadcasterId"></param>
        /// <returns></returns>
        private void ValidateGetCheermotes(Option<string> broadcasterId)
        {
            if (broadcasterId.IsSet && broadcasterId.Value == null)
                throw new ArgumentNullException(nameof(broadcasterId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="broadcasterId"></param>
        private void AfterGetCheermotesDefaultImplementation(IGetCheermotesApiResponse apiResponseLocalVar, Option<string> broadcasterId)
        {
            bool suppressDefaultLog = false;
            AfterGetCheermotes(ref suppressDefaultLog, apiResponseLocalVar, broadcasterId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="broadcasterId"></param>
        partial void AfterGetCheermotes(ref bool suppressDefaultLog, IGetCheermotesApiResponse apiResponseLocalVar, Option<string> broadcasterId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="broadcasterId"></param>
        private void OnErrorGetCheermotesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> broadcasterId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetCheermotes(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, broadcasterId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="broadcasterId"></param>
        partial void OnErrorGetCheermotes(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> broadcasterId);

        /// <summary>
        /// Gets a list of Cheermotes that users can use to cheer Bits. Gets a list of Cheermotes that users can use to cheer Bits in any Bits-enabled channel’s chat room. Cheermotes are animated emotes that viewers can assign Bits to.  __Authorization:__  Requires an [app access token](https://dev.twitch.tv/docs/authentication#app-access-tokens) or [user access token](https://dev.twitch.tv/docs/authentication#user-access-tokens).
        /// </summary>
        /// <param name="broadcasterId">The ID of the broadcaster whose custom Cheermotes you want to get. Specify the broadcaster’s ID if you want to include the broadcaster’s Cheermotes in the response (not all broadcasters upload Cheermotes). If not specified, the response contains only global Cheermotes.      If the broadcaster uploaded Cheermotes, the &#x60;type&#x60; field in the response is set to **channel\\_custom**. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetCheermotesApiResponse"/>&gt;</returns>
        public async Task<IGetCheermotesApiResponse?> GetCheermotesOrDefaultAsync(Option<string> broadcasterId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetCheermotesAsync(broadcasterId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Gets a list of Cheermotes that users can use to cheer Bits. Gets a list of Cheermotes that users can use to cheer Bits in any Bits-enabled channel’s chat room. Cheermotes are animated emotes that viewers can assign Bits to.  __Authorization:__  Requires an [app access token](https://dev.twitch.tv/docs/authentication#app-access-tokens) or [user access token](https://dev.twitch.tv/docs/authentication#user-access-tokens).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="broadcasterId">The ID of the broadcaster whose custom Cheermotes you want to get. Specify the broadcaster’s ID if you want to include the broadcaster’s Cheermotes in the response (not all broadcasters upload Cheermotes). If not specified, the response contains only global Cheermotes.      If the broadcaster uploaded Cheermotes, the &#x60;type&#x60; field in the response is set to **channel\\_custom**. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetCheermotesApiResponse"/>&gt;</returns>
        public async Task<IGetCheermotesApiResponse> GetCheermotesAsync(Option<string> broadcasterId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetCheermotes(broadcasterId);

                FormatGetCheermotes(ref broadcasterId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/bits/cheermotes"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/bits/cheermotes");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (broadcasterId.IsSet)
                        parseQueryStringLocalVar["broadcaster_id"] = ClientUtils.ParameterToString(broadcasterId.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetCheermotesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetCheermotesApiResponse>();

                        GetCheermotesApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/bits/cheermotes", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetCheermotesDefaultImplementation(apiResponseLocalVar, broadcasterId);

                        Events.ExecuteOnGetCheermotes(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetCheermotesDefaultImplementation(e, "/bits/cheermotes", uriBuilderLocalVar.Path, broadcasterId);
                Events.ExecuteOnErrorGetCheermotes(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetCheermotesApiResponse"/>
        /// </summary>
        public partial class GetCheermotesApiResponse : TwistedTaleweaver.Integration.Twitch.Helix.Client.ApiResponse, IGetCheermotesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetCheermotesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetCheermotesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetCheermotesApiResponse(ILogger<GetCheermotesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public TwistedTaleweaver.Integration.Twitch.Helix.Model.GetCheermotesResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<TwistedTaleweaver.Integration.Twitch.Helix.Model.GetCheermotesResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out TwistedTaleweaver.Integration.Twitch.Helix.Model.GetCheermotesResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetExtensionTransactions(ref string extensionId, Option<List<string>> id, ref Option<int> first, ref Option<string> after);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="extensionId"></param>
        /// <param name="id"></param>
        /// <param name="after"></param>
        /// <returns></returns>
        private void ValidateGetExtensionTransactions(string extensionId, Option<List<string>> id, Option<string> after)
        {
            if (extensionId == null)
                throw new ArgumentNullException(nameof(extensionId));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id));

            if (after.IsSet && after.Value == null)
                throw new ArgumentNullException(nameof(after));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="extensionId"></param>
        /// <param name="id"></param>
        /// <param name="first"></param>
        /// <param name="after"></param>
        private void AfterGetExtensionTransactionsDefaultImplementation(IGetExtensionTransactionsApiResponse apiResponseLocalVar, string extensionId, Option<List<string>> id, Option<int> first, Option<string> after)
        {
            bool suppressDefaultLog = false;
            AfterGetExtensionTransactions(ref suppressDefaultLog, apiResponseLocalVar, extensionId, id, first, after);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="extensionId"></param>
        /// <param name="id"></param>
        /// <param name="first"></param>
        /// <param name="after"></param>
        partial void AfterGetExtensionTransactions(ref bool suppressDefaultLog, IGetExtensionTransactionsApiResponse apiResponseLocalVar, string extensionId, Option<List<string>> id, Option<int> first, Option<string> after);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="extensionId"></param>
        /// <param name="id"></param>
        /// <param name="first"></param>
        /// <param name="after"></param>
        private void OnErrorGetExtensionTransactionsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string extensionId, Option<List<string>> id, Option<int> first, Option<string> after)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetExtensionTransactions(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, extensionId, id, first, after);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="extensionId"></param>
        /// <param name="id"></param>
        /// <param name="first"></param>
        /// <param name="after"></param>
        partial void OnErrorGetExtensionTransactions(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string extensionId, Option<List<string>> id, Option<int> first, Option<string> after);

        /// <summary>
        /// Gets an extension’s list of transactions. Gets an extension’s list of transactions. A transaction records the exchange of a currency (for example, Bits) for a digital product.  __Authorization:__  Requires an [app access token](https://dev.twitch.tv/docs/authentication#app-access-tokens).
        /// </summary>
        /// <param name="extensionId">The ID of the extension whose list of transactions you want to get.</param>
        /// <param name="id">A transaction ID used to filter the list of transactions. Specify this parameter for each transaction you want to get. For example, &#x60;id&#x3D;1234&amp;id&#x3D;5678&#x60;. You may specify a maximum of 100 IDs. (optional)</param>
        /// <param name="first">The maximum number of items to return per page in the response. The minimum page size is 1 item per page and the maximum is 100 items per page. The default is 20. (optional)</param>
        /// <param name="after">The cursor used to get the next page of results. The **Pagination** object in the response contains the cursor’s value. [Read More](https://dev.twitch.tv/docs/api/guide#pagination) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetExtensionTransactionsApiResponse"/>&gt;</returns>
        public async Task<IGetExtensionTransactionsApiResponse?> GetExtensionTransactionsOrDefaultAsync(string extensionId, Option<List<string>> id = default, Option<int> first = default, Option<string> after = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetExtensionTransactionsAsync(extensionId, id, first, after, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Gets an extension’s list of transactions. Gets an extension’s list of transactions. A transaction records the exchange of a currency (for example, Bits) for a digital product.  __Authorization:__  Requires an [app access token](https://dev.twitch.tv/docs/authentication#app-access-tokens).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="extensionId">The ID of the extension whose list of transactions you want to get.</param>
        /// <param name="id">A transaction ID used to filter the list of transactions. Specify this parameter for each transaction you want to get. For example, &#x60;id&#x3D;1234&amp;id&#x3D;5678&#x60;. You may specify a maximum of 100 IDs. (optional)</param>
        /// <param name="first">The maximum number of items to return per page in the response. The minimum page size is 1 item per page and the maximum is 100 items per page. The default is 20. (optional)</param>
        /// <param name="after">The cursor used to get the next page of results. The **Pagination** object in the response contains the cursor’s value. [Read More](https://dev.twitch.tv/docs/api/guide#pagination) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetExtensionTransactionsApiResponse"/>&gt;</returns>
        public async Task<IGetExtensionTransactionsApiResponse> GetExtensionTransactionsAsync(string extensionId, Option<List<string>> id = default, Option<int> first = default, Option<string> after = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetExtensionTransactions(extensionId, id, after);

                FormatGetExtensionTransactions(ref extensionId, id, ref first, ref after);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/extensions/transactions"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/extensions/transactions");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["extension_id"] = ClientUtils.ParameterToString(extensionId);

                    if (id.IsSet)
                        parseQueryStringLocalVar["id"] = ClientUtils.ParameterToString(id.Value);

                    if (first.IsSet)
                        parseQueryStringLocalVar["first"] = ClientUtils.ParameterToString(first.Value);

                    if (after.IsSet)
                        parseQueryStringLocalVar["after"] = ClientUtils.ParameterToString(after.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetExtensionTransactionsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetExtensionTransactionsApiResponse>();

                        GetExtensionTransactionsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/extensions/transactions", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetExtensionTransactionsDefaultImplementation(apiResponseLocalVar, extensionId, id, first, after);

                        Events.ExecuteOnGetExtensionTransactions(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetExtensionTransactionsDefaultImplementation(e, "/extensions/transactions", uriBuilderLocalVar.Path, extensionId, id, first, after);
                Events.ExecuteOnErrorGetExtensionTransactions(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetExtensionTransactionsApiResponse"/>
        /// </summary>
        public partial class GetExtensionTransactionsApiResponse : TwistedTaleweaver.Integration.Twitch.Helix.Client.ApiResponse, IGetExtensionTransactionsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetExtensionTransactionsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetExtensionTransactionsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetExtensionTransactionsApiResponse(ILogger<GetExtensionTransactionsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public TwistedTaleweaver.Integration.Twitch.Helix.Model.GetExtensionTransactionsResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<TwistedTaleweaver.Integration.Twitch.Helix.Model.GetExtensionTransactionsResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out TwistedTaleweaver.Integration.Twitch.Helix.Model.GetExtensionTransactionsResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}

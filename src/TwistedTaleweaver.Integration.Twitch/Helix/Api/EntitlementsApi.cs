// <auto-generated>
/*
 * Twitch API Swagger UI (Unofficial)
 *
 * Unofficial Swagger UI for Twitch API.  All endpoints are generated automatically from the [twitch docs](https://dev.twitch.tv/docs/api/reference) page.  __Features:__  * Swagger UI for all Twitch API endpoints * Schemas for _Request Query Parameters_, _Request Body_, _Response Body_ * Some additional schemas like _Clip_, _ChatBadge_, _Prediction_, _Game_, _Channel_, _Video_ etc. * Response codes and examples * Generated types for TypeScript: [ts-twitch-api](https://github.com/DmitryScaletta/ts-twitch-api)  __Repository:__ [github.com/DmitryScaletta/twitch-api-swagger](https://github.com/DmitryScaletta/twitch-api-swagger)
 *
 * The version of the OpenAPI document: helix
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using TwistedTaleweaver.Integration.Twitch.Helix.Client;
using TwistedTaleweaver.Integration.Twitch.Helix.Model;
using System.Diagnostics.CodeAnalysis;

namespace TwistedTaleweaver.Integration.Twitch.Helix.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IEntitlementsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        EntitlementsApiEvents Events { get; }

        /// <summary>
        /// Gets an organization’s list of entitlements that have been granted to a game, a user, or both.
        /// </summary>
        /// <remarks>
        /// Gets an organization’s list of entitlements that have been granted to a game, a user, or both.  **NOTE:** Entitlements returned in the response body data are not guaranteed to be sorted by any field returned by the API. To retrieve **CLAIMED** or **FULFILLED** entitlements, use the &#x60;fulfillment_status&#x60; query parameter to filter results. To retrieve entitlements for a specific game, use the &#x60;game_id&#x60; query parameter to filter results.  The following table identifies the request parameters that you may specify based on the type of access token used.  | Access token type | Parameter | Description | | - | - | - | | App | None | If you don’t specify request parameters, the request returns all entitlements that your organization owns. | | App | user_id | The request returns all entitlements for any game that the organization granted to the specified user. | | App | user_id, game_id | The request returns all entitlements that the specified game granted to the specified user. | | App | game_id | The request returns all entitlements that the specified game granted to all entitled users. | | User | None | If you don’t specify request parameters, the request returns all entitlements for any game that the organization granted to the user identified in the access token. | | User | user_id | Invalid. | | User | user_id, game_id | Invalid. | | User | game_id | The request returns all entitlements that the specified game granted to the user identified in the access token. |   __Authorization:__  Requires an [app access token](https://dev.twitch.tv/docs/authentication#app-access-tokens) or [user access token](https://dev.twitch.tv/docs/authentication#user-access-tokens). The client ID in the access token must own the game.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">An ID that identifies the entitlement to get. Include this parameter for each entitlement you want to get. For example, &#x60;id&#x3D;1234&amp;id&#x3D;5678&#x60;. You may specify a maximum of 100 IDs. (optional)</param>
        /// <param name="userId">An ID that identifies a user that was granted entitlements. (optional)</param>
        /// <param name="gameId">An ID that identifies a game that offered entitlements. (optional)</param>
        /// <param name="fulfillmentStatus">The entitlement’s fulfillment status. Used to filter the list to only those with the specified status. Possible values are:       * CLAIMED * FULFILLED (optional)</param>
        /// <param name="after">The cursor used to get the next page of results. The **Pagination** object in the response contains the cursor’s value. [Read More](https://dev.twitch.tv/docs/api/guide#pagination) (optional)</param>
        /// <param name="first">The maximum number of entitlements to return per page in the response. The minimum page size is 1 entitlement per page and the maximum is 1000\\. The default is 20. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetDropsEntitlementsApiResponse"/>&gt;</returns>
        Task<IGetDropsEntitlementsApiResponse> GetDropsEntitlementsAsync(Option<List<string>> id = default, Option<string> userId = default, Option<string> gameId = default, Option<string> fulfillmentStatus = default, Option<string> after = default, Option<int> first = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets an organization’s list of entitlements that have been granted to a game, a user, or both.
        /// </summary>
        /// <remarks>
        /// Gets an organization’s list of entitlements that have been granted to a game, a user, or both.  **NOTE:** Entitlements returned in the response body data are not guaranteed to be sorted by any field returned by the API. To retrieve **CLAIMED** or **FULFILLED** entitlements, use the &#x60;fulfillment_status&#x60; query parameter to filter results. To retrieve entitlements for a specific game, use the &#x60;game_id&#x60; query parameter to filter results.  The following table identifies the request parameters that you may specify based on the type of access token used.  | Access token type | Parameter | Description | | - | - | - | | App | None | If you don’t specify request parameters, the request returns all entitlements that your organization owns. | | App | user_id | The request returns all entitlements for any game that the organization granted to the specified user. | | App | user_id, game_id | The request returns all entitlements that the specified game granted to the specified user. | | App | game_id | The request returns all entitlements that the specified game granted to all entitled users. | | User | None | If you don’t specify request parameters, the request returns all entitlements for any game that the organization granted to the user identified in the access token. | | User | user_id | Invalid. | | User | user_id, game_id | Invalid. | | User | game_id | The request returns all entitlements that the specified game granted to the user identified in the access token. |   __Authorization:__  Requires an [app access token](https://dev.twitch.tv/docs/authentication#app-access-tokens) or [user access token](https://dev.twitch.tv/docs/authentication#user-access-tokens). The client ID in the access token must own the game.
        /// </remarks>
        /// <param name="id">An ID that identifies the entitlement to get. Include this parameter for each entitlement you want to get. For example, &#x60;id&#x3D;1234&amp;id&#x3D;5678&#x60;. You may specify a maximum of 100 IDs. (optional)</param>
        /// <param name="userId">An ID that identifies a user that was granted entitlements. (optional)</param>
        /// <param name="gameId">An ID that identifies a game that offered entitlements. (optional)</param>
        /// <param name="fulfillmentStatus">The entitlement’s fulfillment status. Used to filter the list to only those with the specified status. Possible values are:       * CLAIMED * FULFILLED (optional)</param>
        /// <param name="after">The cursor used to get the next page of results. The **Pagination** object in the response contains the cursor’s value. [Read More](https://dev.twitch.tv/docs/api/guide#pagination) (optional)</param>
        /// <param name="first">The maximum number of entitlements to return per page in the response. The minimum page size is 1 entitlement per page and the maximum is 1000\\. The default is 20. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetDropsEntitlementsApiResponse"/>?&gt;</returns>
        Task<IGetDropsEntitlementsApiResponse?> GetDropsEntitlementsOrDefaultAsync(Option<List<string>> id = default, Option<string> userId = default, Option<string> gameId = default, Option<string> fulfillmentStatus = default, Option<string> after = default, Option<int> first = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates the Drop entitlement’s fulfillment status.
        /// </summary>
        /// <remarks>
        /// Updates the Drop entitlement’s fulfillment status.  The following table identifies which entitlements are updated based on the type of access token used.  | Access token type | Data that’s updated | | - | - | | App | Updates all entitlements with benefits owned by the organization in the access token. | | User | Updates all entitlements owned by the user in the access token and where the benefits are owned by the organization in the access token. |   __Authorization:__  Requires an [app access token](https://dev.twitch.tv/docs/authentication#app-access-tokens) or [user access token](https://dev.twitch.tv/docs/authentication#user-access-tokens). The client ID in the access token must own the game.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateDropsEntitlementsBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateDropsEntitlementsApiResponse"/>&gt;</returns>
        Task<IUpdateDropsEntitlementsApiResponse> UpdateDropsEntitlementsAsync(Option<UpdateDropsEntitlementsBody> updateDropsEntitlementsBody = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates the Drop entitlement’s fulfillment status.
        /// </summary>
        /// <remarks>
        /// Updates the Drop entitlement’s fulfillment status.  The following table identifies which entitlements are updated based on the type of access token used.  | Access token type | Data that’s updated | | - | - | | App | Updates all entitlements with benefits owned by the organization in the access token. | | User | Updates all entitlements owned by the user in the access token and where the benefits are owned by the organization in the access token. |   __Authorization:__  Requires an [app access token](https://dev.twitch.tv/docs/authentication#app-access-tokens) or [user access token](https://dev.twitch.tv/docs/authentication#user-access-tokens). The client ID in the access token must own the game.
        /// </remarks>
        /// <param name="updateDropsEntitlementsBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateDropsEntitlementsApiResponse"/>?&gt;</returns>
        Task<IUpdateDropsEntitlementsApiResponse?> UpdateDropsEntitlementsOrDefaultAsync(Option<UpdateDropsEntitlementsBody> updateDropsEntitlementsBody = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IGetDropsEntitlementsApiResponse"/>
    /// </summary>
    public interface IGetDropsEntitlementsApiResponse : TwistedTaleweaver.Integration.Twitch.Helix.Client.IApiResponse, IOk<TwistedTaleweaver.Integration.Twitch.Helix.Model.GetDropsEntitlementsResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateDropsEntitlementsApiResponse"/>
    /// </summary>
    public interface IUpdateDropsEntitlementsApiResponse : TwistedTaleweaver.Integration.Twitch.Helix.Client.IApiResponse, IOk<TwistedTaleweaver.Integration.Twitch.Helix.Model.UpdateDropsEntitlementsResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class EntitlementsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetDropsEntitlements;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetDropsEntitlements;

        internal void ExecuteOnGetDropsEntitlements(EntitlementsApi.GetDropsEntitlementsApiResponse apiResponse)
        {
            OnGetDropsEntitlements?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetDropsEntitlements(Exception exception)
        {
            OnErrorGetDropsEntitlements?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateDropsEntitlements;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateDropsEntitlements;

        internal void ExecuteOnUpdateDropsEntitlements(EntitlementsApi.UpdateDropsEntitlementsApiResponse apiResponse)
        {
            OnUpdateDropsEntitlements?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateDropsEntitlements(Exception exception)
        {
            OnErrorUpdateDropsEntitlements?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class EntitlementsApi : IEntitlementsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<EntitlementsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public EntitlementsApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="OauthTokenProvider"/>
        /// </summary>
        public TokenProvider<OAuthToken> OauthTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="EntitlementsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EntitlementsApi(ILogger<EntitlementsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, EntitlementsApiEvents entitlementsApiEvents,
            TokenProvider<OAuthToken> oauthTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<EntitlementsApi>();
            HttpClient = httpClient;
            Events = entitlementsApiEvents;
            OauthTokenProvider = oauthTokenProvider;
        }

        partial void FormatGetDropsEntitlements(Option<List<string>> id, ref Option<string> userId, ref Option<string> gameId, ref Option<string> fulfillmentStatus, ref Option<string> after, ref Option<int> first);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="userId"></param>
        /// <param name="gameId"></param>
        /// <param name="fulfillmentStatus"></param>
        /// <param name="after"></param>
        /// <returns></returns>
        private void ValidateGetDropsEntitlements(Option<List<string>> id, Option<string> userId, Option<string> gameId, Option<string> fulfillmentStatus, Option<string> after)
        {
            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id));

            if (userId.IsSet && userId.Value == null)
                throw new ArgumentNullException(nameof(userId));

            if (gameId.IsSet && gameId.Value == null)
                throw new ArgumentNullException(nameof(gameId));

            if (fulfillmentStatus.IsSet && fulfillmentStatus.Value == null)
                throw new ArgumentNullException(nameof(fulfillmentStatus));

            if (after.IsSet && after.Value == null)
                throw new ArgumentNullException(nameof(after));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="userId"></param>
        /// <param name="gameId"></param>
        /// <param name="fulfillmentStatus"></param>
        /// <param name="after"></param>
        /// <param name="first"></param>
        private void AfterGetDropsEntitlementsDefaultImplementation(IGetDropsEntitlementsApiResponse apiResponseLocalVar, Option<List<string>> id, Option<string> userId, Option<string> gameId, Option<string> fulfillmentStatus, Option<string> after, Option<int> first)
        {
            bool suppressDefaultLog = false;
            AfterGetDropsEntitlements(ref suppressDefaultLog, apiResponseLocalVar, id, userId, gameId, fulfillmentStatus, after, first);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="userId"></param>
        /// <param name="gameId"></param>
        /// <param name="fulfillmentStatus"></param>
        /// <param name="after"></param>
        /// <param name="first"></param>
        partial void AfterGetDropsEntitlements(ref bool suppressDefaultLog, IGetDropsEntitlementsApiResponse apiResponseLocalVar, Option<List<string>> id, Option<string> userId, Option<string> gameId, Option<string> fulfillmentStatus, Option<string> after, Option<int> first);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="userId"></param>
        /// <param name="gameId"></param>
        /// <param name="fulfillmentStatus"></param>
        /// <param name="after"></param>
        /// <param name="first"></param>
        private void OnErrorGetDropsEntitlementsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<List<string>> id, Option<string> userId, Option<string> gameId, Option<string> fulfillmentStatus, Option<string> after, Option<int> first)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetDropsEntitlements(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, userId, gameId, fulfillmentStatus, after, first);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="userId"></param>
        /// <param name="gameId"></param>
        /// <param name="fulfillmentStatus"></param>
        /// <param name="after"></param>
        /// <param name="first"></param>
        partial void OnErrorGetDropsEntitlements(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<List<string>> id, Option<string> userId, Option<string> gameId, Option<string> fulfillmentStatus, Option<string> after, Option<int> first);

        /// <summary>
        /// Gets an organization’s list of entitlements that have been granted to a game, a user, or both. Gets an organization’s list of entitlements that have been granted to a game, a user, or both.  **NOTE:** Entitlements returned in the response body data are not guaranteed to be sorted by any field returned by the API. To retrieve **CLAIMED** or **FULFILLED** entitlements, use the &#x60;fulfillment_status&#x60; query parameter to filter results. To retrieve entitlements for a specific game, use the &#x60;game_id&#x60; query parameter to filter results.  The following table identifies the request parameters that you may specify based on the type of access token used.  | Access token type | Parameter | Description | | - | - | - | | App | None | If you don’t specify request parameters, the request returns all entitlements that your organization owns. | | App | user_id | The request returns all entitlements for any game that the organization granted to the specified user. | | App | user_id, game_id | The request returns all entitlements that the specified game granted to the specified user. | | App | game_id | The request returns all entitlements that the specified game granted to all entitled users. | | User | None | If you don’t specify request parameters, the request returns all entitlements for any game that the organization granted to the user identified in the access token. | | User | user_id | Invalid. | | User | user_id, game_id | Invalid. | | User | game_id | The request returns all entitlements that the specified game granted to the user identified in the access token. |   __Authorization:__  Requires an [app access token](https://dev.twitch.tv/docs/authentication#app-access-tokens) or [user access token](https://dev.twitch.tv/docs/authentication#user-access-tokens). The client ID in the access token must own the game.
        /// </summary>
        /// <param name="id">An ID that identifies the entitlement to get. Include this parameter for each entitlement you want to get. For example, &#x60;id&#x3D;1234&amp;id&#x3D;5678&#x60;. You may specify a maximum of 100 IDs. (optional)</param>
        /// <param name="userId">An ID that identifies a user that was granted entitlements. (optional)</param>
        /// <param name="gameId">An ID that identifies a game that offered entitlements. (optional)</param>
        /// <param name="fulfillmentStatus">The entitlement’s fulfillment status. Used to filter the list to only those with the specified status. Possible values are:       * CLAIMED * FULFILLED (optional)</param>
        /// <param name="after">The cursor used to get the next page of results. The **Pagination** object in the response contains the cursor’s value. [Read More](https://dev.twitch.tv/docs/api/guide#pagination) (optional)</param>
        /// <param name="first">The maximum number of entitlements to return per page in the response. The minimum page size is 1 entitlement per page and the maximum is 1000\\. The default is 20. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetDropsEntitlementsApiResponse"/>&gt;</returns>
        public async Task<IGetDropsEntitlementsApiResponse?> GetDropsEntitlementsOrDefaultAsync(Option<List<string>> id = default, Option<string> userId = default, Option<string> gameId = default, Option<string> fulfillmentStatus = default, Option<string> after = default, Option<int> first = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetDropsEntitlementsAsync(id, userId, gameId, fulfillmentStatus, after, first, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Gets an organization’s list of entitlements that have been granted to a game, a user, or both. Gets an organization’s list of entitlements that have been granted to a game, a user, or both.  **NOTE:** Entitlements returned in the response body data are not guaranteed to be sorted by any field returned by the API. To retrieve **CLAIMED** or **FULFILLED** entitlements, use the &#x60;fulfillment_status&#x60; query parameter to filter results. To retrieve entitlements for a specific game, use the &#x60;game_id&#x60; query parameter to filter results.  The following table identifies the request parameters that you may specify based on the type of access token used.  | Access token type | Parameter | Description | | - | - | - | | App | None | If you don’t specify request parameters, the request returns all entitlements that your organization owns. | | App | user_id | The request returns all entitlements for any game that the organization granted to the specified user. | | App | user_id, game_id | The request returns all entitlements that the specified game granted to the specified user. | | App | game_id | The request returns all entitlements that the specified game granted to all entitled users. | | User | None | If you don’t specify request parameters, the request returns all entitlements for any game that the organization granted to the user identified in the access token. | | User | user_id | Invalid. | | User | user_id, game_id | Invalid. | | User | game_id | The request returns all entitlements that the specified game granted to the user identified in the access token. |   __Authorization:__  Requires an [app access token](https://dev.twitch.tv/docs/authentication#app-access-tokens) or [user access token](https://dev.twitch.tv/docs/authentication#user-access-tokens). The client ID in the access token must own the game.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">An ID that identifies the entitlement to get. Include this parameter for each entitlement you want to get. For example, &#x60;id&#x3D;1234&amp;id&#x3D;5678&#x60;. You may specify a maximum of 100 IDs. (optional)</param>
        /// <param name="userId">An ID that identifies a user that was granted entitlements. (optional)</param>
        /// <param name="gameId">An ID that identifies a game that offered entitlements. (optional)</param>
        /// <param name="fulfillmentStatus">The entitlement’s fulfillment status. Used to filter the list to only those with the specified status. Possible values are:       * CLAIMED * FULFILLED (optional)</param>
        /// <param name="after">The cursor used to get the next page of results. The **Pagination** object in the response contains the cursor’s value. [Read More](https://dev.twitch.tv/docs/api/guide#pagination) (optional)</param>
        /// <param name="first">The maximum number of entitlements to return per page in the response. The minimum page size is 1 entitlement per page and the maximum is 1000\\. The default is 20. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetDropsEntitlementsApiResponse"/>&gt;</returns>
        public async Task<IGetDropsEntitlementsApiResponse> GetDropsEntitlementsAsync(Option<List<string>> id = default, Option<string> userId = default, Option<string> gameId = default, Option<string> fulfillmentStatus = default, Option<string> after = default, Option<int> first = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetDropsEntitlements(id, userId, gameId, fulfillmentStatus, after);

                FormatGetDropsEntitlements(id, ref userId, ref gameId, ref fulfillmentStatus, ref after, ref first);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/entitlements/drops"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/entitlements/drops");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (id.IsSet)
                        parseQueryStringLocalVar["id"] = ClientUtils.ParameterToString(id.Value);

                    if (userId.IsSet)
                        parseQueryStringLocalVar["user_id"] = ClientUtils.ParameterToString(userId.Value);

                    if (gameId.IsSet)
                        parseQueryStringLocalVar["game_id"] = ClientUtils.ParameterToString(gameId.Value);

                    if (fulfillmentStatus.IsSet)
                        parseQueryStringLocalVar["fulfillment_status"] = ClientUtils.ParameterToString(fulfillmentStatus.Value);

                    if (after.IsSet)
                        parseQueryStringLocalVar["after"] = ClientUtils.ParameterToString(after.Value);

                    if (first.IsSet)
                        parseQueryStringLocalVar["first"] = ClientUtils.ParameterToString(first.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetDropsEntitlementsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetDropsEntitlementsApiResponse>();

                        GetDropsEntitlementsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/entitlements/drops", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetDropsEntitlementsDefaultImplementation(apiResponseLocalVar, id, userId, gameId, fulfillmentStatus, after, first);

                        Events.ExecuteOnGetDropsEntitlements(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetDropsEntitlementsDefaultImplementation(e, "/entitlements/drops", uriBuilderLocalVar.Path, id, userId, gameId, fulfillmentStatus, after, first);
                Events.ExecuteOnErrorGetDropsEntitlements(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetDropsEntitlementsApiResponse"/>
        /// </summary>
        public partial class GetDropsEntitlementsApiResponse : TwistedTaleweaver.Integration.Twitch.Helix.Client.ApiResponse, IGetDropsEntitlementsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetDropsEntitlementsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetDropsEntitlementsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetDropsEntitlementsApiResponse(ILogger<GetDropsEntitlementsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public TwistedTaleweaver.Integration.Twitch.Helix.Model.GetDropsEntitlementsResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<TwistedTaleweaver.Integration.Twitch.Helix.Model.GetDropsEntitlementsResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out TwistedTaleweaver.Integration.Twitch.Helix.Model.GetDropsEntitlementsResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateDropsEntitlements(Option<UpdateDropsEntitlementsBody> updateDropsEntitlementsBody);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="updateDropsEntitlementsBody"></param>
        /// <returns></returns>
        private void ValidateUpdateDropsEntitlements(Option<UpdateDropsEntitlementsBody> updateDropsEntitlementsBody)
        {
            if (updateDropsEntitlementsBody.IsSet && updateDropsEntitlementsBody.Value == null)
                throw new ArgumentNullException(nameof(updateDropsEntitlementsBody));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="updateDropsEntitlementsBody"></param>
        private void AfterUpdateDropsEntitlementsDefaultImplementation(IUpdateDropsEntitlementsApiResponse apiResponseLocalVar, Option<UpdateDropsEntitlementsBody> updateDropsEntitlementsBody)
        {
            bool suppressDefaultLog = false;
            AfterUpdateDropsEntitlements(ref suppressDefaultLog, apiResponseLocalVar, updateDropsEntitlementsBody);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="updateDropsEntitlementsBody"></param>
        partial void AfterUpdateDropsEntitlements(ref bool suppressDefaultLog, IUpdateDropsEntitlementsApiResponse apiResponseLocalVar, Option<UpdateDropsEntitlementsBody> updateDropsEntitlementsBody);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="updateDropsEntitlementsBody"></param>
        private void OnErrorUpdateDropsEntitlementsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<UpdateDropsEntitlementsBody> updateDropsEntitlementsBody)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateDropsEntitlements(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, updateDropsEntitlementsBody);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="updateDropsEntitlementsBody"></param>
        partial void OnErrorUpdateDropsEntitlements(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<UpdateDropsEntitlementsBody> updateDropsEntitlementsBody);

        /// <summary>
        /// Updates the Drop entitlement’s fulfillment status. Updates the Drop entitlement’s fulfillment status.  The following table identifies which entitlements are updated based on the type of access token used.  | Access token type | Data that’s updated | | - | - | | App | Updates all entitlements with benefits owned by the organization in the access token. | | User | Updates all entitlements owned by the user in the access token and where the benefits are owned by the organization in the access token. |   __Authorization:__  Requires an [app access token](https://dev.twitch.tv/docs/authentication#app-access-tokens) or [user access token](https://dev.twitch.tv/docs/authentication#user-access-tokens). The client ID in the access token must own the game.
        /// </summary>
        /// <param name="updateDropsEntitlementsBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateDropsEntitlementsApiResponse"/>&gt;</returns>
        public async Task<IUpdateDropsEntitlementsApiResponse?> UpdateDropsEntitlementsOrDefaultAsync(Option<UpdateDropsEntitlementsBody> updateDropsEntitlementsBody = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateDropsEntitlementsAsync(updateDropsEntitlementsBody, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Updates the Drop entitlement’s fulfillment status. Updates the Drop entitlement’s fulfillment status.  The following table identifies which entitlements are updated based on the type of access token used.  | Access token type | Data that’s updated | | - | - | | App | Updates all entitlements with benefits owned by the organization in the access token. | | User | Updates all entitlements owned by the user in the access token and where the benefits are owned by the organization in the access token. |   __Authorization:__  Requires an [app access token](https://dev.twitch.tv/docs/authentication#app-access-tokens) or [user access token](https://dev.twitch.tv/docs/authentication#user-access-tokens). The client ID in the access token must own the game.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateDropsEntitlementsBody"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateDropsEntitlementsApiResponse"/>&gt;</returns>
        public async Task<IUpdateDropsEntitlementsApiResponse> UpdateDropsEntitlementsAsync(Option<UpdateDropsEntitlementsBody> updateDropsEntitlementsBody = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateDropsEntitlements(updateDropsEntitlementsBody);

                FormatUpdateDropsEntitlements(updateDropsEntitlementsBody);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/entitlements/drops"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/entitlements/drops");

                    if (updateDropsEntitlementsBody.IsSet)
                        httpRequestMessageLocalVar.Content = (updateDropsEntitlementsBody.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(updateDropsEntitlementsBody.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Patch;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UpdateDropsEntitlementsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateDropsEntitlementsApiResponse>();

                        UpdateDropsEntitlementsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/entitlements/drops", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateDropsEntitlementsDefaultImplementation(apiResponseLocalVar, updateDropsEntitlementsBody);

                        Events.ExecuteOnUpdateDropsEntitlements(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateDropsEntitlementsDefaultImplementation(e, "/entitlements/drops", uriBuilderLocalVar.Path, updateDropsEntitlementsBody);
                Events.ExecuteOnErrorUpdateDropsEntitlements(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateDropsEntitlementsApiResponse"/>
        /// </summary>
        public partial class UpdateDropsEntitlementsApiResponse : TwistedTaleweaver.Integration.Twitch.Helix.Client.ApiResponse, IUpdateDropsEntitlementsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateDropsEntitlementsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateDropsEntitlementsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateDropsEntitlementsApiResponse(ILogger<UpdateDropsEntitlementsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public TwistedTaleweaver.Integration.Twitch.Helix.Model.UpdateDropsEntitlementsResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<TwistedTaleweaver.Integration.Twitch.Helix.Model.UpdateDropsEntitlementsResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out TwistedTaleweaver.Integration.Twitch.Helix.Model.UpdateDropsEntitlementsResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}

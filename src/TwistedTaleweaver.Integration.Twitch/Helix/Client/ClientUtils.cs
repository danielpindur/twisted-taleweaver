/*
 * Twitch API Swagger UI (Unofficial)
 *
 * Unofficial Swagger UI for Twitch API.  All endpoints are generated automatically from the [twitch docs](https://dev.twitch.tv/docs/api/reference) page.  __Features:__  * Swagger UI for all Twitch API endpoints * Schemas for _Request Query Parameters_, _Request Body_, _Response Body_ * Some additional schemas like _Clip_, _ChatBadge_, _Prediction_, _Game_, _Channel_, _Video_ etc. * Response codes and examples * Generated types for TypeScript: [ts-twitch-api](https://github.com/DmitryScaletta/ts-twitch-api)  __Repository:__ [github.com/DmitryScaletta/twitch-api-swagger](https://github.com/DmitryScaletta/twitch-api-swagger)
 *
 * The version of the OpenAPI document: helix
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System.Collections;
using System.Text;
using System.Text.Json;
using System.Text.RegularExpressions;
using TwistedTaleweaver.Integration.Twitch.Helix.Model;
using System.Runtime.CompilerServices;
using Stream = TwistedTaleweaver.Integration.Twitch.Helix.Model.Stream;

[assembly: InternalsVisibleTo("TwistedTaleweaver.Integration.Twitch.Helix.Test")]

namespace TwistedTaleweaver.Integration.Twitch.Helix.Client
{
    /// <summary>
    /// Utility functions providing some benefit to API client consumers.
    /// </summary>
    public static partial class ClientUtils
    {

        /// <summary>
        /// A delegate for events.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        /// <returns></returns>
        public delegate void EventHandler<T>(object sender, T e) where T : EventArgs;

        /// <summary>
        /// Returns true when deserialization succeeds.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="json"></param>
        /// <param name="options"></param>
        /// <param name="result"></param>
        /// <returns></returns>
        public static bool TryDeserialize<T>(string json, JsonSerializerOptions options, [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out T? result)
        {
            try
            {
                result = JsonSerializer.Deserialize<T>(json, options);
                return result != null;
            }
            catch (Exception)
            {
                result = default;
                return false;
            }
        }

        /// <summary>
        /// Returns true when deserialization succeeds.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="reader"></param>
        /// <param name="options"></param>
        /// <param name="result"></param>
        /// <returns></returns>
        public static bool TryDeserialize<T>(ref Utf8JsonReader reader, JsonSerializerOptions options, [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out T? result)
        {
            try
            {
                result = JsonSerializer.Deserialize<T>(ref reader, options);
                return result != null;
            }
            catch (Exception)
            {
                result = default;
                return false;
            }
        }

        /// <summary>
        /// If parameter is DateTime, output in a formatted string (default ISO 8601), customizable with Configuration.DateTime.
        /// If parameter is a list, join the list with ",".
        /// Otherwise just return the string.
        /// </summary>
        /// <param name="obj">The parameter (header, path, query, form).</param>
        /// <param name="format">The DateTime serialization format.</param>
        /// <returns>Formatted string.</returns>
        public static string? ParameterToString(object? obj, string? format = Iso8601DatetimeFormat)
        {
            if (obj is DateTime dateTime)
                // Return a formatted date string - Can be customized with Configuration.DateTimeFormat
                // Defaults to an ISO 8601, using the known as a Round-trip date/time pattern ("o")
                // https://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx#Anchor_8
                // For example: 2009-06-15T13:45:30.0000000
                return dateTime.ToString(format);
            if (obj is DateTimeOffset dateTimeOffset)
                // Return a formatted date string - Can be customized with Configuration.DateTimeFormat
                // Defaults to an ISO 8601, using the known as a Round-trip date/time pattern ("o")
                // https://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx#Anchor_8
                // For example: 2009-06-15T13:45:30.0000000
                return dateTimeOffset.ToString(format);
            if (obj is DateOnly dateOnly)
                return dateOnly.ToString(format);
            if (obj is bool boolean)
                return boolean
                    ? "true"
                    : "false";
            if (obj is BroadcasterSubscription.TierEnum broadcasterSubscriptionTierEnum)
                return BroadcasterSubscription.TierEnumToJsonValue(broadcasterSubscriptionTierEnum);
            if (obj is ChannelEmote.EmoteTypeEnum channelEmoteEmoteTypeEnum)
                return ChannelEmote.EmoteTypeEnumToJsonValue(channelEmoteEmoteTypeEnum);
            if (obj is ChannelEmote.FormatEnum channelEmoteFormatEnum)
                return ChannelEmote.FormatEnumToJsonValue(channelEmoteFormatEnum);
            if (obj is ChannelEmote.ScaleEnum channelEmoteScaleEnum)
                return ChannelEmote.ScaleEnumToJsonValue(channelEmoteScaleEnum);
            if (obj is ChannelEmote.ThemeModeEnum channelEmoteThemeModeEnum)
                return ChannelEmote.ThemeModeEnumToJsonValue(channelEmoteThemeModeEnum);
            if (obj is Cheermote.TypeEnum cheermoteTypeEnum)
                return Cheermote.TypeEnumToJsonValue(cheermoteTypeEnum);
            if (obj is CheermoteTiersInner.IdEnum cheermoteTiersInnerIdEnum)
                return CheermoteTiersInner.IdEnumToJsonValue(cheermoteTiersInnerIdEnum);
            if (obj is CreateEventSubSubscriptionBody.TypeEnum createEventSubSubscriptionBodyTypeEnum)
                return CreateEventSubSubscriptionBody.TypeEnumToJsonValue(createEventSubSubscriptionBodyTypeEnum);
            if (obj is CreateEventSubSubscriptionBodyTransport.MethodEnum createEventSubSubscriptionBodyTransportMethodEnum)
                return CreateEventSubSubscriptionBodyTransport.MethodEnumToJsonValue(createEventSubSubscriptionBodyTransportMethodEnum);
            if (obj is CreatorGoal.TypeEnum creatorGoalTypeEnum)
                return CreatorGoal.TypeEnumToJsonValue(creatorGoalTypeEnum);
            if (obj is CustomRewardRedemption.StatusEnum customRewardRedemptionStatusEnum)
                return CustomRewardRedemption.StatusEnumToJsonValue(customRewardRedemptionStatusEnum);
            if (obj is DropsEntitlement.FulfillmentStatusEnum dropsEntitlementFulfillmentStatusEnum)
                return DropsEntitlement.FulfillmentStatusEnumToJsonValue(dropsEntitlementFulfillmentStatusEnum);
            if (obj is DropsEntitlementUpdated.StatusEnum dropsEntitlementUpdatedStatusEnum)
                return DropsEntitlementUpdated.StatusEnumToJsonValue(dropsEntitlementUpdatedStatusEnum);
            if (obj is Emote.EmoteTypeEnum emoteEmoteTypeEnum)
                return Emote.EmoteTypeEnumToJsonValue(emoteEmoteTypeEnum);
            if (obj is Emote.FormatEnum emoteFormatEnum)
                return Emote.FormatEnumToJsonValue(emoteFormatEnum);
            if (obj is Emote.ScaleEnum emoteScaleEnum)
                return Emote.ScaleEnumToJsonValue(emoteScaleEnum);
            if (obj is Emote.ThemeModeEnum emoteThemeModeEnum)
                return Emote.ThemeModeEnumToJsonValue(emoteThemeModeEnum);
            if (obj is EndPollBody.StatusEnum endPollBodyStatusEnum)
                return EndPollBody.StatusEnumToJsonValue(endPollBodyStatusEnum);
            if (obj is EndPredictionBody.StatusEnum endPredictionBodyStatusEnum)
                return EndPredictionBody.StatusEnumToJsonValue(endPredictionBodyStatusEnum);
            if (obj is EventSubSubscription.StatusEnum eventSubSubscriptionStatusEnum)
                return EventSubSubscription.StatusEnumToJsonValue(eventSubSubscriptionStatusEnum);
            if (obj is EventSubSubscription.TypeEnum eventSubSubscriptionTypeEnum)
                return EventSubSubscription.TypeEnumToJsonValue(eventSubSubscriptionTypeEnum);
            if (obj is EventSubSubscriptionTransport.MethodEnum eventSubSubscriptionTransportMethodEnum)
                return EventSubSubscriptionTransport.MethodEnumToJsonValue(eventSubSubscriptionTransportMethodEnum);
            if (obj is Extension.ConfigurationLocationEnum extensionConfigurationLocationEnum)
                return Extension.ConfigurationLocationEnumToJsonValue(extensionConfigurationLocationEnum);
            if (obj is Extension.StateEnum extensionStateEnum)
                return Extension.StateEnumToJsonValue(extensionStateEnum);
            if (obj is Extension.SubscriptionsSupportLevelEnum extensionSubscriptionsSupportLevelEnum)
                return Extension.SubscriptionsSupportLevelEnumToJsonValue(extensionSubscriptionsSupportLevelEnum);
            if (obj is ExtensionBitsProductCost.TypeEnum extensionBitsProductCostTypeEnum)
                return ExtensionBitsProductCost.TypeEnumToJsonValue(extensionBitsProductCostTypeEnum);
            if (obj is ExtensionConfigurationSegment.SegmentEnum extensionConfigurationSegmentSegmentEnum)
                return ExtensionConfigurationSegment.SegmentEnumToJsonValue(extensionConfigurationSegmentSegmentEnum);
            if (obj is ExtensionTransaction.ProductTypeEnum extensionTransactionProductTypeEnum)
                return ExtensionTransaction.ProductTypeEnumToJsonValue(extensionTransactionProductTypeEnum);
            if (obj is ExtensionTransactionProductDataCost.TypeEnum extensionTransactionProductDataCostTypeEnum)
                return ExtensionTransactionProductDataCost.TypeEnumToJsonValue(extensionTransactionProductDataCostTypeEnum);
            if (obj is GetChannelGuestStarSettingsResponse.GroupLayoutEnum getChannelGuestStarSettingsResponseGroupLayoutEnum)
                return GetChannelGuestStarSettingsResponse.GroupLayoutEnumToJsonValue(getChannelGuestStarSettingsResponseGroupLayoutEnum);
            if (obj is GetConduitShardsResponseDataInner.StatusEnum getConduitShardsResponseDataInnerStatusEnum)
                return GetConduitShardsResponseDataInner.StatusEnumToJsonValue(getConduitShardsResponseDataInnerStatusEnum);
            if (obj is GetConduitShardsResponseDataInnerTransport.MethodEnum getConduitShardsResponseDataInnerTransportMethodEnum)
                return GetConduitShardsResponseDataInnerTransport.MethodEnumToJsonValue(getConduitShardsResponseDataInnerTransportMethodEnum);
            if (obj is GetUserEmotesResponseDataInner.EmoteTypeEnum getUserEmotesResponseDataInnerEmoteTypeEnum)
                return GetUserEmotesResponseDataInner.EmoteTypeEnumToJsonValue(getUserEmotesResponseDataInnerEmoteTypeEnum);
            if (obj is GlobalEmote.FormatEnum globalEmoteFormatEnum)
                return GlobalEmote.FormatEnumToJsonValue(globalEmoteFormatEnum);
            if (obj is GlobalEmote.ScaleEnum globalEmoteScaleEnum)
                return GlobalEmote.ScaleEnumToJsonValue(globalEmoteScaleEnum);
            if (obj is GlobalEmote.ThemeModeEnum globalEmoteThemeModeEnum)
                return GlobalEmote.ThemeModeEnumToJsonValue(globalEmoteThemeModeEnum);
            if (obj is HypeTrainEventEventDataLastContribution.TypeEnum hypeTrainEventEventDataLastContributionTypeEnum)
                return HypeTrainEventEventDataLastContribution.TypeEnumToJsonValue(hypeTrainEventEventDataLastContributionTypeEnum);
            if (obj is HypeTrainEventEventDataTopContributionsInner.TypeEnum hypeTrainEventEventDataTopContributionsInnerTypeEnum)
                return HypeTrainEventEventDataTopContributionsInner.TypeEnumToJsonValue(hypeTrainEventEventDataTopContributionsInnerTypeEnum);
            if (obj is ManageHeldAutoModMessagesBody.ActionEnum manageHeldAutoModMessagesBodyActionEnum)
                return ManageHeldAutoModMessagesBody.ActionEnumToJsonValue(manageHeldAutoModMessagesBodyActionEnum);
            if (obj is ModifyChannelInformationBodyContentClassificationLabelsInner.IdEnum modifyChannelInformationBodyContentClassificationLabelsInnerIdEnum)
                return ModifyChannelInformationBodyContentClassificationLabelsInner.IdEnumToJsonValue(modifyChannelInformationBodyContentClassificationLabelsInnerIdEnum);
            if (obj is Poll.StatusEnum pollStatusEnum)
                return Poll.StatusEnumToJsonValue(pollStatusEnum);
            if (obj is Prediction.StatusEnum predictionStatusEnum)
                return Prediction.StatusEnumToJsonValue(predictionStatusEnum);
            if (obj is PredictionOutcome.ColorEnum predictionOutcomeColorEnum)
                return PredictionOutcome.ColorEnumToJsonValue(predictionOutcomeColorEnum);
            if (obj is SendChatAnnouncementBody.ColorEnum sendChatAnnouncementBodyColorEnum)
                return SendChatAnnouncementBody.ColorEnumToJsonValue(sendChatAnnouncementBodyColorEnum);
            if (obj is SendExtensionPubSubMessageBody.TargetEnum sendExtensionPubSubMessageBodyTargetEnum)
                return SendExtensionPubSubMessageBody.TargetEnumToJsonValue(sendExtensionPubSubMessageBodyTargetEnum);
            if (obj is SetExtensionConfigurationSegmentBody.SegmentEnum setExtensionConfigurationSegmentBodySegmentEnum)
                return SetExtensionConfigurationSegmentBody.SegmentEnumToJsonValue(setExtensionConfigurationSegmentBodySegmentEnum);
            if (obj is Stream.TypeEnum streamTypeEnum)
                return Stream.TypeEnumToJsonValue(streamTypeEnum);
            if (obj is UpdateChannelGuestStarSettingsBody.GroupLayoutEnum updateChannelGuestStarSettingsBodyGroupLayoutEnum)
                return UpdateChannelGuestStarSettingsBody.GroupLayoutEnumToJsonValue(updateChannelGuestStarSettingsBodyGroupLayoutEnum);
            if (obj is UpdateChatSettingsBody.NonModeratorChatDelayDurationEnum updateChatSettingsBodyNonModeratorChatDelayDurationEnum)
                return UpdateChatSettingsBody.NonModeratorChatDelayDurationEnumToJsonValue(updateChatSettingsBodyNonModeratorChatDelayDurationEnum).ToString();
            if (obj is UpdateConduitShardsBodyShardsInnerTransport.MethodEnum updateConduitShardsBodyShardsInnerTransportMethodEnum)
                return UpdateConduitShardsBodyShardsInnerTransport.MethodEnumToJsonValue(updateConduitShardsBodyShardsInnerTransportMethodEnum);
            if (obj is UpdateDropsEntitlementsBody.FulfillmentStatusEnum updateDropsEntitlementsBodyFulfillmentStatusEnum)
                return UpdateDropsEntitlementsBody.FulfillmentStatusEnumToJsonValue(updateDropsEntitlementsBodyFulfillmentStatusEnum);
            if (obj is UpdateExtensionBitsProductBodyCost.TypeEnum updateExtensionBitsProductBodyCostTypeEnum)
                return UpdateExtensionBitsProductBodyCost.TypeEnumToJsonValue(updateExtensionBitsProductBodyCostTypeEnum);
            if (obj is UpdateRedemptionStatusBody.StatusEnum updateRedemptionStatusBodyStatusEnum)
                return UpdateRedemptionStatusBody.StatusEnumToJsonValue(updateRedemptionStatusBodyStatusEnum);
            if (obj is User.TypeEnum userTypeEnum)
                return User.TypeEnumToJsonValue(userTypeEnum);
            if (obj is User.BroadcasterTypeEnum userBroadcasterTypeEnum)
                return User.BroadcasterTypeEnumToJsonValue(userBroadcasterTypeEnum);
            if (obj is UserExtension.TypeEnum userExtensionTypeEnum)
                return UserExtension.TypeEnumToJsonValue(userExtensionTypeEnum);
            if (obj is UserSubscription.TierEnum userSubscriptionTierEnum)
                return UserSubscription.TierEnumToJsonValue(userSubscriptionTierEnum);
            if (obj is Video.TypeEnum videoTypeEnum)
                return Video.TypeEnumToJsonValue(videoTypeEnum);
            if (obj is ICollection collection)
            {
                List<string?> entries = new();
                foreach (var entry in collection)
                    entries.Add(ParameterToString(entry));
                return string.Join(",", entries);
            }

            return Convert.ToString(obj, System.Globalization.CultureInfo.InvariantCulture);
        }

        /// <summary>
        /// URL encode a string
        /// Credit/Ref: https://github.com/restsharp/RestSharp/blob/master/RestSharp/Extensions/StringExtensions.cs#L50
        /// </summary>
        /// <param name="input">string to be URL encoded</param>
        /// <returns>Byte array</returns>
        public static string UrlEncode(string input)
        {
            const int maxLength = 32766;

            if (input == null)
            {
                throw new ArgumentNullException("input");
            }

            if (input.Length <= maxLength)
            {
                return Uri.EscapeDataString(input);
            }

            StringBuilder sb = new StringBuilder(input.Length * 2);
            int index = 0;

            while (index < input.Length)
            {
                int length = Math.Min(input.Length - index, maxLength);
                string subString = input.Substring(index, length);

                sb.Append(Uri.EscapeDataString(subString));
                index += subString.Length;
            }

            return sb.ToString();
        }

        /// <summary>
        /// Encode string in base64 format.
        /// </summary>
        /// <param name="text">string to be encoded.</param>
        /// <returns>Encoded string.</returns>
        public static string Base64Encode(string text)
        {
            return Convert.ToBase64String(global::System.Text.Encoding.UTF8.GetBytes(text));
        }

        /// <summary>
        /// Convert stream to byte array
        /// </summary>
        /// <param name="inputStream">Input stream to be converted</param>
        /// <returns>Byte array</returns>
        public static byte[] ReadAsBytes(System.IO.Stream inputStream)
        {
            using (var ms = new MemoryStream())
            {
                inputStream.CopyTo(ms);
                return ms.ToArray();
            }
        }

        /// <summary>
        /// Select the Content-Type header's value from the given content-type array:
        /// if JSON type exists in the given array, use it;
        /// otherwise use the first one defined in 'consumes'
        /// </summary>
        /// <param name="contentTypes">The Content-Type array to select from.</param>
        /// <returns>The Content-Type header to use.</returns>
        public static string? SelectHeaderContentType(string[] contentTypes)
        {
            if (contentTypes.Length == 0)
                return null;

            foreach (var contentType in contentTypes)
            {
                if (IsJsonMime(contentType))
                    return contentType;
            }

            return contentTypes[0]; // use the first content type specified in 'consumes'
        }

        /// <summary>
        /// Select the Accept header's value from the given accepts array:
        /// if JSON exists in the given array, use it;
        /// otherwise use all of them (joining into a string)
        /// </summary>
        /// <param name="accepts">The accepts array to select from.</param>
        /// <returns>The Accept header to use.</returns>
        public static string? SelectHeaderAccept(string[] accepts)
        {
            if (accepts.Length == 0)
                return null;

            if (accepts.Contains("application/json", StringComparer.OrdinalIgnoreCase))
                return "application/json";

            return string.Join(",", accepts);
        }

        /// <summary>
        /// Provides a case-insensitive check that a provided content type is a known JSON-like content type.
        /// </summary>
        [GeneratedRegex("(?i)^(application/json|[^;/ \t]+/[^;/ \t]+[+]json)[ \t]*(;.*)?$")]
        private static partial Regex JsonRegex();

        /// <summary>
        /// Check if the given MIME is a JSON MIME.
        /// JSON MIME examples:
        ///    application/json
        ///    application/json; charset=UTF8
        ///    APPLICATION/JSON
        ///    application/vnd.company+json
        /// </summary>
        /// <param name="mime">MIME</param>
        /// <returns>Returns True if MIME type is json.</returns>
        public static bool IsJsonMime(string mime)
        {
            if (string.IsNullOrWhiteSpace(mime)) return false;

            return JsonRegex().IsMatch(mime) || mime.Equals("application/json-patch+json");
        }

        /// <summary>
        /// Get the discriminator
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="discriminator"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public static string? GetDiscriminator(Utf8JsonReader utf8JsonReader, string discriminator)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    if (localVarJsonPropertyName != null && localVarJsonPropertyName.Equals(discriminator))
                        return utf8JsonReader.GetString();
                }
            }

            throw new JsonException("The specified discriminator was not found.");
        }

        /// <summary>
        /// The base path of the API
        /// </summary>
        public const string BaseAddress = "https://api.twitch.tv/helix";

        /// <summary>
        /// The scheme of the API
        /// </summary>
        public const string Scheme = "https";

        /// <summary>
        /// The context path of the API
        /// </summary>
        public const string ContextPath = "/helix";

        /// <summary>
        /// The host of the API
        /// </summary>
        public const string Host = "api.twitch.tv";

        /// <summary>
        /// The format to use for DateTime serialization
        /// </summary>
        public const string Iso8601DatetimeFormat = "o";
    }
}

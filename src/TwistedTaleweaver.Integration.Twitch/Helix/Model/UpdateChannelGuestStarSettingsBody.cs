// <auto-generated>
/*
 * Twitch API Swagger UI (Unofficial)
 *
 * Unofficial Swagger UI for Twitch API.  All endpoints are generated automatically from the [twitch docs](https://dev.twitch.tv/docs/api/reference) page.  __Features:__  * Swagger UI for all Twitch API endpoints * Schemas for _Request Query Parameters_, _Request Body_, _Response Body_ * Some additional schemas like _Clip_, _ChatBadge_, _Prediction_, _Game_, _Channel_, _Video_ etc. * Response codes and examples * Generated types for TypeScript: [ts-twitch-api](https://github.com/DmitryScaletta/ts-twitch-api)  __Repository:__ [github.com/DmitryScaletta/twitch-api-swagger](https://github.com/DmitryScaletta/twitch-api-swagger)
 *
 * The version of the OpenAPI document: helix
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using TwistedTaleweaver.Integration.Twitch.Helix.Client;

namespace TwistedTaleweaver.Integration.Twitch.Helix.Model
{
    /// <summary>
    /// UpdateChannelGuestStarSettingsBody
    /// </summary>
    public partial class UpdateChannelGuestStarSettingsBody : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateChannelGuestStarSettingsBody" /> class.
        /// </summary>
        /// <param name="isModeratorSendLiveEnabled">Flag determining if Guest Star moderators have access to control whether a guest is live once assigned to a slot.</param>
        /// <param name="slotCount">Number of slots the Guest Star call interface will allow the host to add to a call. Required to be between 1 and 6.</param>
        /// <param name="isBrowserSourceAudioEnabled">Flag determining if Browser Sources subscribed to sessions on this channel should output audio</param>
        /// <param name="groupLayout">This setting determines how the guests within a session should be laid out within the browser source. Can be one of the following values:       * &#x60;TILED_LAYOUT&#x60;: All live guests are tiled within the browser source with the same size. * &#x60;SCREENSHARE_LAYOUT&#x60;: All live guests are tiled within the browser source with the same size. If there is an active screen share, it is sized larger than the other guests. * &#x60;HORIZONTAL_LAYOUT&#x60;: All live guests are arranged in a horizontal bar within the browser source * &#x60;VERTICAL_LAYOUT&#x60;: All live guests are arranged in a vertical bar within the browser source</param>
        /// <param name="regenerateBrowserSources">Flag determining if Guest Star should regenerate the auth token associated with the channelâ€™s browser sources. Providing a true value for this will immediately invalidate all browser sources previously configured in your streaming software.</param>
        [JsonConstructor]
        public UpdateChannelGuestStarSettingsBody(Option<bool?> isModeratorSendLiveEnabled = default, Option<int?> slotCount = default, Option<bool?> isBrowserSourceAudioEnabled = default, Option<GroupLayoutEnum?> groupLayout = default, Option<bool?> regenerateBrowserSources = default)
        {
            IsModeratorSendLiveEnabledOption = isModeratorSendLiveEnabled;
            SlotCountOption = slotCount;
            IsBrowserSourceAudioEnabledOption = isBrowserSourceAudioEnabled;
            GroupLayoutOption = groupLayout;
            RegenerateBrowserSourcesOption = regenerateBrowserSources;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// This setting determines how the guests within a session should be laid out within the browser source. Can be one of the following values:       * &#x60;TILED_LAYOUT&#x60;: All live guests are tiled within the browser source with the same size. * &#x60;SCREENSHARE_LAYOUT&#x60;: All live guests are tiled within the browser source with the same size. If there is an active screen share, it is sized larger than the other guests. * &#x60;HORIZONTAL_LAYOUT&#x60;: All live guests are arranged in a horizontal bar within the browser source * &#x60;VERTICAL_LAYOUT&#x60;: All live guests are arranged in a vertical bar within the browser source
        /// </summary>
        /// <value>This setting determines how the guests within a session should be laid out within the browser source. Can be one of the following values:       * &#x60;TILED_LAYOUT&#x60;: All live guests are tiled within the browser source with the same size. * &#x60;SCREENSHARE_LAYOUT&#x60;: All live guests are tiled within the browser source with the same size. If there is an active screen share, it is sized larger than the other guests. * &#x60;HORIZONTAL_LAYOUT&#x60;: All live guests are arranged in a horizontal bar within the browser source * &#x60;VERTICAL_LAYOUT&#x60;: All live guests are arranged in a vertical bar within the browser source</value>
        public enum GroupLayoutEnum
        {
            /// <summary>
            /// Enum TILEDLAYOUT for value: TILED_LAYOUT
            /// </summary>
            TILEDLAYOUT = 1,

            /// <summary>
            /// Enum SCREENSHARELAYOUT for value: SCREENSHARE_LAYOUT
            /// </summary>
            SCREENSHARELAYOUT = 2,

            /// <summary>
            /// Enum HORIZONTALLAYOUT for value: HORIZONTAL_LAYOUT
            /// </summary>
            HORIZONTALLAYOUT = 3,

            /// <summary>
            /// Enum VERTICALLAYOUT for value: VERTICAL_LAYOUT
            /// </summary>
            VERTICALLAYOUT = 4
        }

        /// <summary>
        /// Returns a <see cref="GroupLayoutEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static GroupLayoutEnum GroupLayoutEnumFromString(string value)
        {
            if (value.Equals("TILED_LAYOUT"))
                return GroupLayoutEnum.TILEDLAYOUT;

            if (value.Equals("SCREENSHARE_LAYOUT"))
                return GroupLayoutEnum.SCREENSHARELAYOUT;

            if (value.Equals("HORIZONTAL_LAYOUT"))
                return GroupLayoutEnum.HORIZONTALLAYOUT;

            if (value.Equals("VERTICAL_LAYOUT"))
                return GroupLayoutEnum.VERTICALLAYOUT;

            throw new NotImplementedException($"Could not convert value to type GroupLayoutEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="GroupLayoutEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static GroupLayoutEnum? GroupLayoutEnumFromStringOrDefault(string value)
        {
            if (value.Equals("TILED_LAYOUT"))
                return GroupLayoutEnum.TILEDLAYOUT;

            if (value.Equals("SCREENSHARE_LAYOUT"))
                return GroupLayoutEnum.SCREENSHARELAYOUT;

            if (value.Equals("HORIZONTAL_LAYOUT"))
                return GroupLayoutEnum.HORIZONTALLAYOUT;

            if (value.Equals("VERTICAL_LAYOUT"))
                return GroupLayoutEnum.VERTICALLAYOUT;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="GroupLayoutEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string GroupLayoutEnumToJsonValue(GroupLayoutEnum? value)
        {
            if (value == GroupLayoutEnum.TILEDLAYOUT)
                return "TILED_LAYOUT";

            if (value == GroupLayoutEnum.SCREENSHARELAYOUT)
                return "SCREENSHARE_LAYOUT";

            if (value == GroupLayoutEnum.HORIZONTALLAYOUT)
                return "HORIZONTAL_LAYOUT";

            if (value == GroupLayoutEnum.VERTICALLAYOUT)
                return "VERTICAL_LAYOUT";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of GroupLayout
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<GroupLayoutEnum?> GroupLayoutOption { get; private set; }

        /// <summary>
        /// This setting determines how the guests within a session should be laid out within the browser source. Can be one of the following values:       * &#x60;TILED_LAYOUT&#x60;: All live guests are tiled within the browser source with the same size. * &#x60;SCREENSHARE_LAYOUT&#x60;: All live guests are tiled within the browser source with the same size. If there is an active screen share, it is sized larger than the other guests. * &#x60;HORIZONTAL_LAYOUT&#x60;: All live guests are arranged in a horizontal bar within the browser source * &#x60;VERTICAL_LAYOUT&#x60;: All live guests are arranged in a vertical bar within the browser source
        /// </summary>
        /// <value>This setting determines how the guests within a session should be laid out within the browser source. Can be one of the following values:       * &#x60;TILED_LAYOUT&#x60;: All live guests are tiled within the browser source with the same size. * &#x60;SCREENSHARE_LAYOUT&#x60;: All live guests are tiled within the browser source with the same size. If there is an active screen share, it is sized larger than the other guests. * &#x60;HORIZONTAL_LAYOUT&#x60;: All live guests are arranged in a horizontal bar within the browser source * &#x60;VERTICAL_LAYOUT&#x60;: All live guests are arranged in a vertical bar within the browser source</value>
        [JsonPropertyName("group_layout")]
        public GroupLayoutEnum? GroupLayout { get { return this.GroupLayoutOption; } set { this.GroupLayoutOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsModeratorSendLiveEnabled
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsModeratorSendLiveEnabledOption { get; private set; }

        /// <summary>
        /// Flag determining if Guest Star moderators have access to control whether a guest is live once assigned to a slot.
        /// </summary>
        /// <value>Flag determining if Guest Star moderators have access to control whether a guest is live once assigned to a slot.</value>
        [JsonPropertyName("is_moderator_send_live_enabled")]
        public bool? IsModeratorSendLiveEnabled { get { return this.IsModeratorSendLiveEnabledOption; } set { this.IsModeratorSendLiveEnabledOption = new(value); } }

        /// <summary>
        /// Used to track the state of SlotCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> SlotCountOption { get; private set; }

        /// <summary>
        /// Number of slots the Guest Star call interface will allow the host to add to a call. Required to be between 1 and 6.
        /// </summary>
        /// <value>Number of slots the Guest Star call interface will allow the host to add to a call. Required to be between 1 and 6.</value>
        [JsonPropertyName("slot_count")]
        public int? SlotCount { get { return this.SlotCountOption; } set { this.SlotCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsBrowserSourceAudioEnabled
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsBrowserSourceAudioEnabledOption { get; private set; }

        /// <summary>
        /// Flag determining if Browser Sources subscribed to sessions on this channel should output audio
        /// </summary>
        /// <value>Flag determining if Browser Sources subscribed to sessions on this channel should output audio</value>
        [JsonPropertyName("is_browser_source_audio_enabled")]
        public bool? IsBrowserSourceAudioEnabled { get { return this.IsBrowserSourceAudioEnabledOption; } set { this.IsBrowserSourceAudioEnabledOption = new(value); } }

        /// <summary>
        /// Used to track the state of RegenerateBrowserSources
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> RegenerateBrowserSourcesOption { get; private set; }

        /// <summary>
        /// Flag determining if Guest Star should regenerate the auth token associated with the channelâ€™s browser sources. Providing a true value for this will immediately invalidate all browser sources previously configured in your streaming software.
        /// </summary>
        /// <value>Flag determining if Guest Star should regenerate the auth token associated with the channelâ€™s browser sources. Providing a true value for this will immediately invalidate all browser sources previously configured in your streaming software.</value>
        [JsonPropertyName("regenerate_browser_sources")]
        public bool? RegenerateBrowserSources { get { return this.RegenerateBrowserSourcesOption; } set { this.RegenerateBrowserSourcesOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateChannelGuestStarSettingsBody {\n");
            sb.Append("  IsModeratorSendLiveEnabled: ").Append(IsModeratorSendLiveEnabled).Append("\n");
            sb.Append("  SlotCount: ").Append(SlotCount).Append("\n");
            sb.Append("  IsBrowserSourceAudioEnabled: ").Append(IsBrowserSourceAudioEnabled).Append("\n");
            sb.Append("  GroupLayout: ").Append(GroupLayout).Append("\n");
            sb.Append("  RegenerateBrowserSources: ").Append(RegenerateBrowserSources).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UpdateChannelGuestStarSettingsBody" />
    /// </summary>
    public class UpdateChannelGuestStarSettingsBodyJsonConverter : JsonConverter<UpdateChannelGuestStarSettingsBody>
    {
        /// <summary>
        /// Deserializes json to <see cref="UpdateChannelGuestStarSettingsBody" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override UpdateChannelGuestStarSettingsBody Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> isModeratorSendLiveEnabled = default;
            Option<int?> slotCount = default;
            Option<bool?> isBrowserSourceAudioEnabled = default;
            Option<UpdateChannelGuestStarSettingsBody.GroupLayoutEnum?> groupLayout = default;
            Option<bool?> regenerateBrowserSources = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "is_moderator_send_live_enabled":
                            isModeratorSendLiveEnabled = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "slot_count":
                            slotCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "is_browser_source_audio_enabled":
                            isBrowserSourceAudioEnabled = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "group_layout":
                            string? groupLayoutRawValue = utf8JsonReader.GetString();
                            if (groupLayoutRawValue != null)
                                groupLayout = new Option<UpdateChannelGuestStarSettingsBody.GroupLayoutEnum?>(UpdateChannelGuestStarSettingsBody.GroupLayoutEnumFromStringOrDefault(groupLayoutRawValue));
                            break;
                        case "regenerate_browser_sources":
                            regenerateBrowserSources = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (isModeratorSendLiveEnabled.IsSet && isModeratorSendLiveEnabled.Value == null)
                throw new ArgumentNullException(nameof(isModeratorSendLiveEnabled), "Property is not nullable for class UpdateChannelGuestStarSettingsBody.");

            if (slotCount.IsSet && slotCount.Value == null)
                throw new ArgumentNullException(nameof(slotCount), "Property is not nullable for class UpdateChannelGuestStarSettingsBody.");

            if (isBrowserSourceAudioEnabled.IsSet && isBrowserSourceAudioEnabled.Value == null)
                throw new ArgumentNullException(nameof(isBrowserSourceAudioEnabled), "Property is not nullable for class UpdateChannelGuestStarSettingsBody.");

            if (groupLayout.IsSet && groupLayout.Value == null)
                throw new ArgumentNullException(nameof(groupLayout), "Property is not nullable for class UpdateChannelGuestStarSettingsBody.");

            if (regenerateBrowserSources.IsSet && regenerateBrowserSources.Value == null)
                throw new ArgumentNullException(nameof(regenerateBrowserSources), "Property is not nullable for class UpdateChannelGuestStarSettingsBody.");

            return new UpdateChannelGuestStarSettingsBody(isModeratorSendLiveEnabled, slotCount, isBrowserSourceAudioEnabled, groupLayout, regenerateBrowserSources);
        }

        /// <summary>
        /// Serializes a <see cref="UpdateChannelGuestStarSettingsBody" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="updateChannelGuestStarSettingsBody"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, UpdateChannelGuestStarSettingsBody updateChannelGuestStarSettingsBody, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, updateChannelGuestStarSettingsBody, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="UpdateChannelGuestStarSettingsBody" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="updateChannelGuestStarSettingsBody"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, UpdateChannelGuestStarSettingsBody updateChannelGuestStarSettingsBody, JsonSerializerOptions jsonSerializerOptions)
        {
            if (updateChannelGuestStarSettingsBody.IsModeratorSendLiveEnabledOption.IsSet)
                writer.WriteBoolean("is_moderator_send_live_enabled", updateChannelGuestStarSettingsBody.IsModeratorSendLiveEnabledOption.Value!.Value);

            if (updateChannelGuestStarSettingsBody.SlotCountOption.IsSet)
                writer.WriteNumber("slot_count", updateChannelGuestStarSettingsBody.SlotCountOption.Value!.Value);

            if (updateChannelGuestStarSettingsBody.IsBrowserSourceAudioEnabledOption.IsSet)
                writer.WriteBoolean("is_browser_source_audio_enabled", updateChannelGuestStarSettingsBody.IsBrowserSourceAudioEnabledOption.Value!.Value);

            var groupLayoutRawValue = UpdateChannelGuestStarSettingsBody.GroupLayoutEnumToJsonValue(updateChannelGuestStarSettingsBody.GroupLayoutOption.Value!.Value);
            writer.WriteString("group_layout", groupLayoutRawValue);
            if (updateChannelGuestStarSettingsBody.RegenerateBrowserSourcesOption.IsSet)
                writer.WriteBoolean("regenerate_browser_sources", updateChannelGuestStarSettingsBody.RegenerateBrowserSourcesOption.Value!.Value);
        }
    }
}

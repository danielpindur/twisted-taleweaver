// <auto-generated>
/*
 * Twitch API Swagger UI (Unofficial)
 *
 * Unofficial Swagger UI for Twitch API.  All endpoints are generated automatically from the [twitch docs](https://dev.twitch.tv/docs/api/reference) page.  __Features:__  * Swagger UI for all Twitch API endpoints * Schemas for _Request Query Parameters_, _Request Body_, _Response Body_ * Some additional schemas like _Clip_, _ChatBadge_, _Prediction_, _Game_, _Channel_, _Video_ etc. * Response codes and examples * Generated types for TypeScript: [ts-twitch-api](https://github.com/DmitryScaletta/ts-twitch-api)  __Repository:__ [github.com/DmitryScaletta/twitch-api-swagger](https://github.com/DmitryScaletta/twitch-api-swagger)
 *
 * The version of the OpenAPI document: helix
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using TwistedTaleweaver.Integration.Twitch.Helix.Client;

namespace TwistedTaleweaver.Integration.Twitch.Helix.Model
{
    /// <summary>
    /// ModifyChannelInformationBody
    /// </summary>
    public partial class ModifyChannelInformationBody : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModifyChannelInformationBody" /> class.
        /// </summary>
        /// <param name="gameId">The ID of the game that the user plays. The game is not updated if the ID isn’t a game ID that Twitch recognizes. To unset this field, use “0” or “” (an empty string).</param>
        /// <param name="broadcasterLanguage">The user’s preferred language. Set the value to an ISO 639-1 two-letter language code (for example, _en_ for English). Set to “other” if the user’s preferred language is not a Twitch supported language. The language isn’t updated if the language code isn’t a Twitch supported language.</param>
        /// <param name="title">The title of the user’s stream. You may not set this field to an empty string.</param>
        /// <param name="delay">The number of seconds you want your broadcast buffered before streaming it live. The delay helps ensure fairness during competitive play. Only users with Partner status may set this field. The maximum delay is 900 seconds (15 minutes).</param>
        /// <param name="tags">A list of channel-defined tags to apply to the channel. To remove all tags from the channel, set tags to an empty array. Tags help identify the content that the channel streams. [Learn More](https://help.twitch.tv/s/article/guide-to-tags)      A channel may specify a maximum of 10 tags. Each tag is limited to a maximum of 25 characters and may not be an empty string or contain spaces or special characters. Tags are case insensitive. For readability, consider using camelCasing or PascalCasing.</param>
        /// <param name="contentClassificationLabels">List of labels that should be set as the Channel’s CCLs.</param>
        /// <param name="isBrandedContent">Boolean flag indicating if the channel has branded content.</param>
        [JsonConstructor]
        public ModifyChannelInformationBody(Option<string?> gameId = default, Option<string?> broadcasterLanguage = default, Option<string?> title = default, Option<int?> delay = default, Option<List<string>?> tags = default, Option<List<ModifyChannelInformationBodyContentClassificationLabelsInner>?> contentClassificationLabels = default, Option<bool?> isBrandedContent = default)
        {
            GameIdOption = gameId;
            BroadcasterLanguageOption = broadcasterLanguage;
            TitleOption = title;
            DelayOption = delay;
            TagsOption = tags;
            ContentClassificationLabelsOption = contentClassificationLabels;
            IsBrandedContentOption = isBrandedContent;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of GameId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> GameIdOption { get; private set; }

        /// <summary>
        /// The ID of the game that the user plays. The game is not updated if the ID isn’t a game ID that Twitch recognizes. To unset this field, use “0” or “” (an empty string).
        /// </summary>
        /// <value>The ID of the game that the user plays. The game is not updated if the ID isn’t a game ID that Twitch recognizes. To unset this field, use “0” or “” (an empty string).</value>
        [JsonPropertyName("game_id")]
        public string? GameId { get { return this.GameIdOption; } set { this.GameIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of BroadcasterLanguage
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BroadcasterLanguageOption { get; private set; }

        /// <summary>
        /// The user’s preferred language. Set the value to an ISO 639-1 two-letter language code (for example, _en_ for English). Set to “other” if the user’s preferred language is not a Twitch supported language. The language isn’t updated if the language code isn’t a Twitch supported language.
        /// </summary>
        /// <value>The user’s preferred language. Set the value to an ISO 639-1 two-letter language code (for example, _en_ for English). Set to “other” if the user’s preferred language is not a Twitch supported language. The language isn’t updated if the language code isn’t a Twitch supported language.</value>
        [JsonPropertyName("broadcaster_language")]
        public string? BroadcasterLanguage { get { return this.BroadcasterLanguageOption; } set { this.BroadcasterLanguageOption = new(value); } }

        /// <summary>
        /// Used to track the state of Title
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TitleOption { get; private set; }

        /// <summary>
        /// The title of the user’s stream. You may not set this field to an empty string.
        /// </summary>
        /// <value>The title of the user’s stream. You may not set this field to an empty string.</value>
        [JsonPropertyName("title")]
        public string? Title { get { return this.TitleOption; } set { this.TitleOption = new(value); } }

        /// <summary>
        /// Used to track the state of Delay
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> DelayOption { get; private set; }

        /// <summary>
        /// The number of seconds you want your broadcast buffered before streaming it live. The delay helps ensure fairness during competitive play. Only users with Partner status may set this field. The maximum delay is 900 seconds (15 minutes).
        /// </summary>
        /// <value>The number of seconds you want your broadcast buffered before streaming it live. The delay helps ensure fairness during competitive play. Only users with Partner status may set this field. The maximum delay is 900 seconds (15 minutes).</value>
        [JsonPropertyName("delay")]
        public int? Delay { get { return this.DelayOption; } set { this.DelayOption = new(value); } }

        /// <summary>
        /// Used to track the state of Tags
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> TagsOption { get; private set; }

        /// <summary>
        /// A list of channel-defined tags to apply to the channel. To remove all tags from the channel, set tags to an empty array. Tags help identify the content that the channel streams. [Learn More](https://help.twitch.tv/s/article/guide-to-tags)      A channel may specify a maximum of 10 tags. Each tag is limited to a maximum of 25 characters and may not be an empty string or contain spaces or special characters. Tags are case insensitive. For readability, consider using camelCasing or PascalCasing.
        /// </summary>
        /// <value>A list of channel-defined tags to apply to the channel. To remove all tags from the channel, set tags to an empty array. Tags help identify the content that the channel streams. [Learn More](https://help.twitch.tv/s/article/guide-to-tags)      A channel may specify a maximum of 10 tags. Each tag is limited to a maximum of 25 characters and may not be an empty string or contain spaces or special characters. Tags are case insensitive. For readability, consider using camelCasing or PascalCasing.</value>
        [JsonPropertyName("tags")]
        public List<string>? Tags { get { return this.TagsOption; } set { this.TagsOption = new(value); } }

        /// <summary>
        /// Used to track the state of ContentClassificationLabels
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<ModifyChannelInformationBodyContentClassificationLabelsInner>?> ContentClassificationLabelsOption { get; private set; }

        /// <summary>
        /// List of labels that should be set as the Channel’s CCLs.
        /// </summary>
        /// <value>List of labels that should be set as the Channel’s CCLs.</value>
        [JsonPropertyName("content_classification_labels")]
        public List<ModifyChannelInformationBodyContentClassificationLabelsInner>? ContentClassificationLabels { get { return this.ContentClassificationLabelsOption; } set { this.ContentClassificationLabelsOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsBrandedContent
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsBrandedContentOption { get; private set; }

        /// <summary>
        /// Boolean flag indicating if the channel has branded content.
        /// </summary>
        /// <value>Boolean flag indicating if the channel has branded content.</value>
        [JsonPropertyName("is_branded_content")]
        public bool? IsBrandedContent { get { return this.IsBrandedContentOption; } set { this.IsBrandedContentOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModifyChannelInformationBody {\n");
            sb.Append("  GameId: ").Append(GameId).Append("\n");
            sb.Append("  BroadcasterLanguage: ").Append(BroadcasterLanguage).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Delay: ").Append(Delay).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  ContentClassificationLabels: ").Append(ContentClassificationLabels).Append("\n");
            sb.Append("  IsBrandedContent: ").Append(IsBrandedContent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ModifyChannelInformationBody" />
    /// </summary>
    public class ModifyChannelInformationBodyJsonConverter : JsonConverter<ModifyChannelInformationBody>
    {
        /// <summary>
        /// Deserializes json to <see cref="ModifyChannelInformationBody" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ModifyChannelInformationBody Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> gameId = default;
            Option<string?> broadcasterLanguage = default;
            Option<string?> title = default;
            Option<int?> delay = default;
            Option<List<string>?> tags = default;
            Option<List<ModifyChannelInformationBodyContentClassificationLabelsInner>?> contentClassificationLabels = default;
            Option<bool?> isBrandedContent = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "game_id":
                            gameId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "broadcaster_language":
                            broadcasterLanguage = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "delay":
                            delay = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "tags":
                            tags = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "content_classification_labels":
                            contentClassificationLabels = new Option<List<ModifyChannelInformationBodyContentClassificationLabelsInner>?>(JsonSerializer.Deserialize<List<ModifyChannelInformationBodyContentClassificationLabelsInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "is_branded_content":
                            isBrandedContent = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (gameId.IsSet && gameId.Value == null)
                throw new ArgumentNullException(nameof(gameId), "Property is not nullable for class ModifyChannelInformationBody.");

            if (broadcasterLanguage.IsSet && broadcasterLanguage.Value == null)
                throw new ArgumentNullException(nameof(broadcasterLanguage), "Property is not nullable for class ModifyChannelInformationBody.");

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class ModifyChannelInformationBody.");

            if (delay.IsSet && delay.Value == null)
                throw new ArgumentNullException(nameof(delay), "Property is not nullable for class ModifyChannelInformationBody.");

            if (tags.IsSet && tags.Value == null)
                throw new ArgumentNullException(nameof(tags), "Property is not nullable for class ModifyChannelInformationBody.");

            if (contentClassificationLabels.IsSet && contentClassificationLabels.Value == null)
                throw new ArgumentNullException(nameof(contentClassificationLabels), "Property is not nullable for class ModifyChannelInformationBody.");

            if (isBrandedContent.IsSet && isBrandedContent.Value == null)
                throw new ArgumentNullException(nameof(isBrandedContent), "Property is not nullable for class ModifyChannelInformationBody.");

            return new ModifyChannelInformationBody(gameId, broadcasterLanguage, title, delay, tags, contentClassificationLabels, isBrandedContent);
        }

        /// <summary>
        /// Serializes a <see cref="ModifyChannelInformationBody" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="modifyChannelInformationBody"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ModifyChannelInformationBody modifyChannelInformationBody, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, modifyChannelInformationBody, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ModifyChannelInformationBody" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="modifyChannelInformationBody"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ModifyChannelInformationBody modifyChannelInformationBody, JsonSerializerOptions jsonSerializerOptions)
        {
            if (modifyChannelInformationBody.GameIdOption.IsSet && modifyChannelInformationBody.GameId == null)
                throw new ArgumentNullException(nameof(modifyChannelInformationBody.GameId), "Property is required for class ModifyChannelInformationBody.");

            if (modifyChannelInformationBody.BroadcasterLanguageOption.IsSet && modifyChannelInformationBody.BroadcasterLanguage == null)
                throw new ArgumentNullException(nameof(modifyChannelInformationBody.BroadcasterLanguage), "Property is required for class ModifyChannelInformationBody.");

            if (modifyChannelInformationBody.TitleOption.IsSet && modifyChannelInformationBody.Title == null)
                throw new ArgumentNullException(nameof(modifyChannelInformationBody.Title), "Property is required for class ModifyChannelInformationBody.");

            if (modifyChannelInformationBody.TagsOption.IsSet && modifyChannelInformationBody.Tags == null)
                throw new ArgumentNullException(nameof(modifyChannelInformationBody.Tags), "Property is required for class ModifyChannelInformationBody.");

            if (modifyChannelInformationBody.ContentClassificationLabelsOption.IsSet && modifyChannelInformationBody.ContentClassificationLabels == null)
                throw new ArgumentNullException(nameof(modifyChannelInformationBody.ContentClassificationLabels), "Property is required for class ModifyChannelInformationBody.");

            if (modifyChannelInformationBody.GameIdOption.IsSet)
                writer.WriteString("game_id", modifyChannelInformationBody.GameId);

            if (modifyChannelInformationBody.BroadcasterLanguageOption.IsSet)
                writer.WriteString("broadcaster_language", modifyChannelInformationBody.BroadcasterLanguage);

            if (modifyChannelInformationBody.TitleOption.IsSet)
                writer.WriteString("title", modifyChannelInformationBody.Title);

            if (modifyChannelInformationBody.DelayOption.IsSet)
                writer.WriteNumber("delay", modifyChannelInformationBody.DelayOption.Value!.Value);

            if (modifyChannelInformationBody.TagsOption.IsSet)
            {
                writer.WritePropertyName("tags");
                JsonSerializer.Serialize(writer, modifyChannelInformationBody.Tags, jsonSerializerOptions);
            }
            if (modifyChannelInformationBody.ContentClassificationLabelsOption.IsSet)
            {
                writer.WritePropertyName("content_classification_labels");
                JsonSerializer.Serialize(writer, modifyChannelInformationBody.ContentClassificationLabels, jsonSerializerOptions);
            }
            if (modifyChannelInformationBody.IsBrandedContentOption.IsSet)
                writer.WriteBoolean("is_branded_content", modifyChannelInformationBody.IsBrandedContentOption.Value!.Value);
        }
    }
}

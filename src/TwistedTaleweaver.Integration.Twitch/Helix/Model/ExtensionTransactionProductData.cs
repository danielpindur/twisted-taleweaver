// <auto-generated>
/*
 * Twitch API Swagger UI (Unofficial)
 *
 * Unofficial Swagger UI for Twitch API.  All endpoints are generated automatically from the [twitch docs](https://dev.twitch.tv/docs/api/reference) page.  __Features:__  * Swagger UI for all Twitch API endpoints * Schemas for _Request Query Parameters_, _Request Body_, _Response Body_ * Some additional schemas like _Clip_, _ChatBadge_, _Prediction_, _Game_, _Channel_, _Video_ etc. * Response codes and examples * Generated types for TypeScript: [ts-twitch-api](https://github.com/DmitryScaletta/ts-twitch-api)  __Repository:__ [github.com/DmitryScaletta/twitch-api-swagger](https://github.com/DmitryScaletta/twitch-api-swagger)
 *
 * The version of the OpenAPI document: helix
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using TwistedTaleweaver.Integration.Twitch.Helix.Client;

namespace TwistedTaleweaver.Integration.Twitch.Helix.Model
{
    /// <summary>
    /// Contains details about the digital product.
    /// </summary>
    public partial class ExtensionTransactionProductData : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExtensionTransactionProductData" /> class.
        /// </summary>
        /// <param name="sku">An ID that identifies the digital product.</param>
        /// <param name="domain">Set to &#x60;twitch.ext.&#x60; \\+ &#x60;&lt;the extension&#39;s ID&gt;&#x60;.</param>
        /// <param name="cost">cost</param>
        /// <param name="inDevelopment">A Boolean value that determines whether the product is in development. Is **true** if the digital product is in development and cannot be exchanged.</param>
        /// <param name="displayName">The name of the digital product.</param>
        /// <param name="expiration">This field is always empty since you may purchase only unexpired products.</param>
        /// <param name="broadcast">A Boolean value that determines whether the data was broadcast to all instances of the extension. Is **true** if the data was broadcast to all instances.</param>
        [JsonConstructor]
        public ExtensionTransactionProductData(string sku, string domain, ExtensionTransactionProductDataCost cost, bool inDevelopment, string displayName, string expiration, bool broadcast)
        {
            Sku = sku;
            Domain = domain;
            Cost = cost;
            InDevelopment = inDevelopment;
            DisplayName = displayName;
            Expiration = expiration;
            Broadcast = broadcast;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// An ID that identifies the digital product.
        /// </summary>
        /// <value>An ID that identifies the digital product.</value>
        [JsonPropertyName("sku")]
        public string Sku { get; set; }

        /// <summary>
        /// Set to &#x60;twitch.ext.&#x60; \\+ &#x60;&lt;the extension&#39;s ID&gt;&#x60;.
        /// </summary>
        /// <value>Set to &#x60;twitch.ext.&#x60; \\+ &#x60;&lt;the extension&#39;s ID&gt;&#x60;.</value>
        [JsonPropertyName("domain")]
        public string Domain { get; set; }

        /// <summary>
        /// Gets or Sets Cost
        /// </summary>
        [JsonPropertyName("cost")]
        public ExtensionTransactionProductDataCost Cost { get; set; }

        /// <summary>
        /// A Boolean value that determines whether the product is in development. Is **true** if the digital product is in development and cannot be exchanged.
        /// </summary>
        /// <value>A Boolean value that determines whether the product is in development. Is **true** if the digital product is in development and cannot be exchanged.</value>
        [JsonPropertyName("inDevelopment")]
        public bool InDevelopment { get; set; }

        /// <summary>
        /// The name of the digital product.
        /// </summary>
        /// <value>The name of the digital product.</value>
        [JsonPropertyName("displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// This field is always empty since you may purchase only unexpired products.
        /// </summary>
        /// <value>This field is always empty since you may purchase only unexpired products.</value>
        [JsonPropertyName("expiration")]
        public string Expiration { get; set; }

        /// <summary>
        /// A Boolean value that determines whether the data was broadcast to all instances of the extension. Is **true** if the data was broadcast to all instances.
        /// </summary>
        /// <value>A Boolean value that determines whether the data was broadcast to all instances of the extension. Is **true** if the data was broadcast to all instances.</value>
        [JsonPropertyName("broadcast")]
        public bool Broadcast { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ExtensionTransactionProductData {\n");
            sb.Append("  Sku: ").Append(Sku).Append("\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  Cost: ").Append(Cost).Append("\n");
            sb.Append("  InDevelopment: ").Append(InDevelopment).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Expiration: ").Append(Expiration).Append("\n");
            sb.Append("  Broadcast: ").Append(Broadcast).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ExtensionTransactionProductData" />
    /// </summary>
    public class ExtensionTransactionProductDataJsonConverter : JsonConverter<ExtensionTransactionProductData>
    {
        /// <summary>
        /// Deserializes json to <see cref="ExtensionTransactionProductData" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ExtensionTransactionProductData Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> sku = default;
            Option<string?> domain = default;
            Option<ExtensionTransactionProductDataCost?> cost = default;
            Option<bool?> inDevelopment = default;
            Option<string?> displayName = default;
            Option<string?> expiration = default;
            Option<bool?> broadcast = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "sku":
                            sku = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "domain":
                            domain = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "cost":
                            cost = new Option<ExtensionTransactionProductDataCost?>(JsonSerializer.Deserialize<ExtensionTransactionProductDataCost>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "inDevelopment":
                            inDevelopment = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "displayName":
                            displayName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "expiration":
                            expiration = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "broadcast":
                            broadcast = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!sku.IsSet)
                throw new ArgumentException("Property is required for class ExtensionTransactionProductData.", nameof(sku));

            if (!domain.IsSet)
                throw new ArgumentException("Property is required for class ExtensionTransactionProductData.", nameof(domain));

            if (!cost.IsSet)
                throw new ArgumentException("Property is required for class ExtensionTransactionProductData.", nameof(cost));

            if (!inDevelopment.IsSet)
                throw new ArgumentException("Property is required for class ExtensionTransactionProductData.", nameof(inDevelopment));

            if (!displayName.IsSet)
                throw new ArgumentException("Property is required for class ExtensionTransactionProductData.", nameof(displayName));

            if (!expiration.IsSet)
                throw new ArgumentException("Property is required for class ExtensionTransactionProductData.", nameof(expiration));

            if (!broadcast.IsSet)
                throw new ArgumentException("Property is required for class ExtensionTransactionProductData.", nameof(broadcast));

            if (sku.IsSet && sku.Value == null)
                throw new ArgumentNullException(nameof(sku), "Property is not nullable for class ExtensionTransactionProductData.");

            if (domain.IsSet && domain.Value == null)
                throw new ArgumentNullException(nameof(domain), "Property is not nullable for class ExtensionTransactionProductData.");

            if (cost.IsSet && cost.Value == null)
                throw new ArgumentNullException(nameof(cost), "Property is not nullable for class ExtensionTransactionProductData.");

            if (inDevelopment.IsSet && inDevelopment.Value == null)
                throw new ArgumentNullException(nameof(inDevelopment), "Property is not nullable for class ExtensionTransactionProductData.");

            if (displayName.IsSet && displayName.Value == null)
                throw new ArgumentNullException(nameof(displayName), "Property is not nullable for class ExtensionTransactionProductData.");

            if (expiration.IsSet && expiration.Value == null)
                throw new ArgumentNullException(nameof(expiration), "Property is not nullable for class ExtensionTransactionProductData.");

            if (broadcast.IsSet && broadcast.Value == null)
                throw new ArgumentNullException(nameof(broadcast), "Property is not nullable for class ExtensionTransactionProductData.");

            return new ExtensionTransactionProductData(sku.Value!, domain.Value!, cost.Value!, inDevelopment.Value!.Value!, displayName.Value!, expiration.Value!, broadcast.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="ExtensionTransactionProductData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="extensionTransactionProductData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ExtensionTransactionProductData extensionTransactionProductData, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, extensionTransactionProductData, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ExtensionTransactionProductData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="extensionTransactionProductData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ExtensionTransactionProductData extensionTransactionProductData, JsonSerializerOptions jsonSerializerOptions)
        {
            if (extensionTransactionProductData.Sku == null)
                throw new ArgumentNullException(nameof(extensionTransactionProductData.Sku), "Property is required for class ExtensionTransactionProductData.");

            if (extensionTransactionProductData.Domain == null)
                throw new ArgumentNullException(nameof(extensionTransactionProductData.Domain), "Property is required for class ExtensionTransactionProductData.");

            if (extensionTransactionProductData.Cost == null)
                throw new ArgumentNullException(nameof(extensionTransactionProductData.Cost), "Property is required for class ExtensionTransactionProductData.");

            if (extensionTransactionProductData.DisplayName == null)
                throw new ArgumentNullException(nameof(extensionTransactionProductData.DisplayName), "Property is required for class ExtensionTransactionProductData.");

            if (extensionTransactionProductData.Expiration == null)
                throw new ArgumentNullException(nameof(extensionTransactionProductData.Expiration), "Property is required for class ExtensionTransactionProductData.");

            writer.WriteString("sku", extensionTransactionProductData.Sku);

            writer.WriteString("domain", extensionTransactionProductData.Domain);

            writer.WritePropertyName("cost");
            JsonSerializer.Serialize(writer, extensionTransactionProductData.Cost, jsonSerializerOptions);
            writer.WriteBoolean("inDevelopment", extensionTransactionProductData.InDevelopment);

            writer.WriteString("displayName", extensionTransactionProductData.DisplayName);

            writer.WriteString("expiration", extensionTransactionProductData.Expiration);

            writer.WriteBoolean("broadcast", extensionTransactionProductData.Broadcast);
        }
    }
}

// <auto-generated>
/*
 * Twitch API Swagger UI (Unofficial)
 *
 * Unofficial Swagger UI for Twitch API.  All endpoints are generated automatically from the [twitch docs](https://dev.twitch.tv/docs/api/reference) page.  __Features:__  * Swagger UI for all Twitch API endpoints * Schemas for _Request Query Parameters_, _Request Body_, _Response Body_ * Some additional schemas like _Clip_, _ChatBadge_, _Prediction_, _Game_, _Channel_, _Video_ etc. * Response codes and examples * Generated types for TypeScript: [ts-twitch-api](https://github.com/DmitryScaletta/ts-twitch-api)  __Repository:__ [github.com/DmitryScaletta/twitch-api-swagger](https://github.com/DmitryScaletta/twitch-api-swagger)
 *
 * The version of the OpenAPI document: helix
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using TwistedTaleweaver.Integration.Twitch.Helix.Client;

namespace TwistedTaleweaver.Integration.Twitch.Helix.Model
{
    /// <summary>
    /// Clip
    /// </summary>
    public partial class Clip : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Clip" /> class.
        /// </summary>
        /// <param name="id">An ID that uniquely identifies the clip.</param>
        /// <param name="url">A URL to the clip.</param>
        /// <param name="embedUrl">A URL that you can use in an iframe to embed the clip (see [Embedding Video and Clips](https://dev.twitch.tv/docs/embed/video-and-clips/)).</param>
        /// <param name="broadcasterId">An ID that identifies the broadcaster that the video was clipped from.</param>
        /// <param name="broadcasterName">The broadcaster’s display name.</param>
        /// <param name="creatorId">An ID that identifies the user that created the clip.</param>
        /// <param name="creatorName">The user’s display name.</param>
        /// <param name="videoId">An ID that identifies the video that the clip came from. This field contains an empty string if the video is not available.</param>
        /// <param name="gameId">The ID of the game that was being played when the clip was created.</param>
        /// <param name="language">The ISO 639-1 two-letter language code that the broadcaster broadcasts in. For example, _en_ for English. The value is _other_ if the broadcaster uses a language that Twitch doesn’t support.</param>
        /// <param name="title">The title of the clip.</param>
        /// <param name="viewCount">The number of times the clip has been viewed.</param>
        /// <param name="createdAt">The date and time of when the clip was created. The date and time is in RFC3339 format.</param>
        /// <param name="thumbnailUrl">A URL to a thumbnail image of the clip.</param>
        /// <param name="duration">The length of the clip, in seconds. Precision is 0.1.</param>
        /// <param name="isFeatured">A Boolean value that indicates if the clip is featured or not.</param>
        /// <param name="vodOffset">The zero-based offset, in seconds, to where the clip starts in the video (VOD). Is **null** if the video is not available or hasn’t been created yet from the live stream (see &#x60;video_id&#x60;).      Note that there’s a delay between when a clip is created during a broadcast and when the offset is set. During the delay period, &#x60;vod_offset&#x60; is **null**. The delay is indeterminant but is typically minutes long.</param>
        [JsonConstructor]
        public Clip(string id, string url, string embedUrl, string broadcasterId, string broadcasterName, string creatorId, string creatorName, string videoId, string gameId, string language, string title, int viewCount, DateTime createdAt, string thumbnailUrl, float duration, bool isFeatured, int? vodOffset = default)
        {
            Id = id;
            Url = url;
            EmbedUrl = embedUrl;
            BroadcasterId = broadcasterId;
            BroadcasterName = broadcasterName;
            CreatorId = creatorId;
            CreatorName = creatorName;
            VideoId = videoId;
            GameId = gameId;
            Language = language;
            Title = title;
            ViewCount = viewCount;
            CreatedAt = createdAt;
            ThumbnailUrl = thumbnailUrl;
            Duration = duration;
            IsFeatured = isFeatured;
            VodOffset = vodOffset;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// An ID that uniquely identifies the clip.
        /// </summary>
        /// <value>An ID that uniquely identifies the clip.</value>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// A URL to the clip.
        /// </summary>
        /// <value>A URL to the clip.</value>
        [JsonPropertyName("url")]
        public string Url { get; set; }

        /// <summary>
        /// A URL that you can use in an iframe to embed the clip (see [Embedding Video and Clips](https://dev.twitch.tv/docs/embed/video-and-clips/)).
        /// </summary>
        /// <value>A URL that you can use in an iframe to embed the clip (see [Embedding Video and Clips](https://dev.twitch.tv/docs/embed/video-and-clips/)).</value>
        [JsonPropertyName("embed_url")]
        public string EmbedUrl { get; set; }

        /// <summary>
        /// An ID that identifies the broadcaster that the video was clipped from.
        /// </summary>
        /// <value>An ID that identifies the broadcaster that the video was clipped from.</value>
        [JsonPropertyName("broadcaster_id")]
        public string BroadcasterId { get; set; }

        /// <summary>
        /// The broadcaster’s display name.
        /// </summary>
        /// <value>The broadcaster’s display name.</value>
        [JsonPropertyName("broadcaster_name")]
        public string BroadcasterName { get; set; }

        /// <summary>
        /// An ID that identifies the user that created the clip.
        /// </summary>
        /// <value>An ID that identifies the user that created the clip.</value>
        [JsonPropertyName("creator_id")]
        public string CreatorId { get; set; }

        /// <summary>
        /// The user’s display name.
        /// </summary>
        /// <value>The user’s display name.</value>
        [JsonPropertyName("creator_name")]
        public string CreatorName { get; set; }

        /// <summary>
        /// An ID that identifies the video that the clip came from. This field contains an empty string if the video is not available.
        /// </summary>
        /// <value>An ID that identifies the video that the clip came from. This field contains an empty string if the video is not available.</value>
        [JsonPropertyName("video_id")]
        public string VideoId { get; set; }

        /// <summary>
        /// The ID of the game that was being played when the clip was created.
        /// </summary>
        /// <value>The ID of the game that was being played when the clip was created.</value>
        [JsonPropertyName("game_id")]
        public string GameId { get; set; }

        /// <summary>
        /// The ISO 639-1 two-letter language code that the broadcaster broadcasts in. For example, _en_ for English. The value is _other_ if the broadcaster uses a language that Twitch doesn’t support.
        /// </summary>
        /// <value>The ISO 639-1 two-letter language code that the broadcaster broadcasts in. For example, _en_ for English. The value is _other_ if the broadcaster uses a language that Twitch doesn’t support.</value>
        [JsonPropertyName("language")]
        public string Language { get; set; }

        /// <summary>
        /// The title of the clip.
        /// </summary>
        /// <value>The title of the clip.</value>
        [JsonPropertyName("title")]
        public string Title { get; set; }

        /// <summary>
        /// The number of times the clip has been viewed.
        /// </summary>
        /// <value>The number of times the clip has been viewed.</value>
        [JsonPropertyName("view_count")]
        public int ViewCount { get; set; }

        /// <summary>
        /// The date and time of when the clip was created. The date and time is in RFC3339 format.
        /// </summary>
        /// <value>The date and time of when the clip was created. The date and time is in RFC3339 format.</value>
        [JsonPropertyName("created_at")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// A URL to a thumbnail image of the clip.
        /// </summary>
        /// <value>A URL to a thumbnail image of the clip.</value>
        [JsonPropertyName("thumbnail_url")]
        public string ThumbnailUrl { get; set; }

        /// <summary>
        /// The length of the clip, in seconds. Precision is 0.1.
        /// </summary>
        /// <value>The length of the clip, in seconds. Precision is 0.1.</value>
        [JsonPropertyName("duration")]
        public float Duration { get; set; }

        /// <summary>
        /// A Boolean value that indicates if the clip is featured or not.
        /// </summary>
        /// <value>A Boolean value that indicates if the clip is featured or not.</value>
        [JsonPropertyName("is_featured")]
        public bool IsFeatured { get; set; }

        /// <summary>
        /// The zero-based offset, in seconds, to where the clip starts in the video (VOD). Is **null** if the video is not available or hasn’t been created yet from the live stream (see &#x60;video_id&#x60;).      Note that there’s a delay between when a clip is created during a broadcast and when the offset is set. During the delay period, &#x60;vod_offset&#x60; is **null**. The delay is indeterminant but is typically minutes long.
        /// </summary>
        /// <value>The zero-based offset, in seconds, to where the clip starts in the video (VOD). Is **null** if the video is not available or hasn’t been created yet from the live stream (see &#x60;video_id&#x60;).      Note that there’s a delay between when a clip is created during a broadcast and when the offset is set. During the delay period, &#x60;vod_offset&#x60; is **null**. The delay is indeterminant but is typically minutes long.</value>
        [JsonPropertyName("vod_offset")]
        public int? VodOffset { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Clip {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  EmbedUrl: ").Append(EmbedUrl).Append("\n");
            sb.Append("  BroadcasterId: ").Append(BroadcasterId).Append("\n");
            sb.Append("  BroadcasterName: ").Append(BroadcasterName).Append("\n");
            sb.Append("  CreatorId: ").Append(CreatorId).Append("\n");
            sb.Append("  CreatorName: ").Append(CreatorName).Append("\n");
            sb.Append("  VideoId: ").Append(VideoId).Append("\n");
            sb.Append("  GameId: ").Append(GameId).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  ViewCount: ").Append(ViewCount).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  ThumbnailUrl: ").Append(ThumbnailUrl).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  IsFeatured: ").Append(IsFeatured).Append("\n");
            sb.Append("  VodOffset: ").Append(VodOffset).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Clip" />
    /// </summary>
    public class ClipJsonConverter : JsonConverter<Clip>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="Clip" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Clip Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> url = default;
            Option<string?> embedUrl = default;
            Option<string?> broadcasterId = default;
            Option<string?> broadcasterName = default;
            Option<string?> creatorId = default;
            Option<string?> creatorName = default;
            Option<string?> videoId = default;
            Option<string?> gameId = default;
            Option<string?> language = default;
            Option<string?> title = default;
            Option<int?> viewCount = default;
            Option<DateTime?> createdAt = default;
            Option<string?> thumbnailUrl = default;
            Option<float?> duration = default;
            Option<bool?> isFeatured = default;
            Option<int?> vodOffset = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "url":
                            url = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "embed_url":
                            embedUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "broadcaster_id":
                            broadcasterId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "broadcaster_name":
                            broadcasterName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "creator_id":
                            creatorId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "creator_name":
                            creatorName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "video_id":
                            videoId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "game_id":
                            gameId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "language":
                            language = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "view_count":
                            viewCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "created_at":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "thumbnail_url":
                            thumbnailUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "duration":
                            duration = new Option<float?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (float?)null : (float)utf8JsonReader.GetDouble());
                            break;
                        case "is_featured":
                            isFeatured = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "vod_offset":
                            vodOffset = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class Clip.", nameof(id));

            if (!url.IsSet)
                throw new ArgumentException("Property is required for class Clip.", nameof(url));

            if (!embedUrl.IsSet)
                throw new ArgumentException("Property is required for class Clip.", nameof(embedUrl));

            if (!broadcasterId.IsSet)
                throw new ArgumentException("Property is required for class Clip.", nameof(broadcasterId));

            if (!broadcasterName.IsSet)
                throw new ArgumentException("Property is required for class Clip.", nameof(broadcasterName));

            if (!creatorId.IsSet)
                throw new ArgumentException("Property is required for class Clip.", nameof(creatorId));

            if (!creatorName.IsSet)
                throw new ArgumentException("Property is required for class Clip.", nameof(creatorName));

            if (!videoId.IsSet)
                throw new ArgumentException("Property is required for class Clip.", nameof(videoId));

            if (!gameId.IsSet)
                throw new ArgumentException("Property is required for class Clip.", nameof(gameId));

            if (!language.IsSet)
                throw new ArgumentException("Property is required for class Clip.", nameof(language));

            if (!title.IsSet)
                throw new ArgumentException("Property is required for class Clip.", nameof(title));

            if (!viewCount.IsSet)
                throw new ArgumentException("Property is required for class Clip.", nameof(viewCount));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class Clip.", nameof(createdAt));

            if (!thumbnailUrl.IsSet)
                throw new ArgumentException("Property is required for class Clip.", nameof(thumbnailUrl));

            if (!duration.IsSet)
                throw new ArgumentException("Property is required for class Clip.", nameof(duration));

            if (!isFeatured.IsSet)
                throw new ArgumentException("Property is required for class Clip.", nameof(isFeatured));

            if (!vodOffset.IsSet)
                throw new ArgumentException("Property is required for class Clip.", nameof(vodOffset));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class Clip.");

            if (url.IsSet && url.Value == null)
                throw new ArgumentNullException(nameof(url), "Property is not nullable for class Clip.");

            if (embedUrl.IsSet && embedUrl.Value == null)
                throw new ArgumentNullException(nameof(embedUrl), "Property is not nullable for class Clip.");

            if (broadcasterId.IsSet && broadcasterId.Value == null)
                throw new ArgumentNullException(nameof(broadcasterId), "Property is not nullable for class Clip.");

            if (broadcasterName.IsSet && broadcasterName.Value == null)
                throw new ArgumentNullException(nameof(broadcasterName), "Property is not nullable for class Clip.");

            if (creatorId.IsSet && creatorId.Value == null)
                throw new ArgumentNullException(nameof(creatorId), "Property is not nullable for class Clip.");

            if (creatorName.IsSet && creatorName.Value == null)
                throw new ArgumentNullException(nameof(creatorName), "Property is not nullable for class Clip.");

            if (videoId.IsSet && videoId.Value == null)
                throw new ArgumentNullException(nameof(videoId), "Property is not nullable for class Clip.");

            if (gameId.IsSet && gameId.Value == null)
                throw new ArgumentNullException(nameof(gameId), "Property is not nullable for class Clip.");

            if (language.IsSet && language.Value == null)
                throw new ArgumentNullException(nameof(language), "Property is not nullable for class Clip.");

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class Clip.");

            if (viewCount.IsSet && viewCount.Value == null)
                throw new ArgumentNullException(nameof(viewCount), "Property is not nullable for class Clip.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class Clip.");

            if (thumbnailUrl.IsSet && thumbnailUrl.Value == null)
                throw new ArgumentNullException(nameof(thumbnailUrl), "Property is not nullable for class Clip.");

            if (duration.IsSet && duration.Value == null)
                throw new ArgumentNullException(nameof(duration), "Property is not nullable for class Clip.");

            if (isFeatured.IsSet && isFeatured.Value == null)
                throw new ArgumentNullException(nameof(isFeatured), "Property is not nullable for class Clip.");

            return new Clip(id.Value!, url.Value!, embedUrl.Value!, broadcasterId.Value!, broadcasterName.Value!, creatorId.Value!, creatorName.Value!, videoId.Value!, gameId.Value!, language.Value!, title.Value!, viewCount.Value!.Value!, createdAt.Value!.Value!, thumbnailUrl.Value!, duration.Value!.Value!, isFeatured.Value!.Value!, vodOffset.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="Clip" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="clip"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Clip clip, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, clip, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Clip" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="clip"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Clip clip, JsonSerializerOptions jsonSerializerOptions)
        {
            if (clip.Id == null)
                throw new ArgumentNullException(nameof(clip.Id), "Property is required for class Clip.");

            if (clip.Url == null)
                throw new ArgumentNullException(nameof(clip.Url), "Property is required for class Clip.");

            if (clip.EmbedUrl == null)
                throw new ArgumentNullException(nameof(clip.EmbedUrl), "Property is required for class Clip.");

            if (clip.BroadcasterId == null)
                throw new ArgumentNullException(nameof(clip.BroadcasterId), "Property is required for class Clip.");

            if (clip.BroadcasterName == null)
                throw new ArgumentNullException(nameof(clip.BroadcasterName), "Property is required for class Clip.");

            if (clip.CreatorId == null)
                throw new ArgumentNullException(nameof(clip.CreatorId), "Property is required for class Clip.");

            if (clip.CreatorName == null)
                throw new ArgumentNullException(nameof(clip.CreatorName), "Property is required for class Clip.");

            if (clip.VideoId == null)
                throw new ArgumentNullException(nameof(clip.VideoId), "Property is required for class Clip.");

            if (clip.GameId == null)
                throw new ArgumentNullException(nameof(clip.GameId), "Property is required for class Clip.");

            if (clip.Language == null)
                throw new ArgumentNullException(nameof(clip.Language), "Property is required for class Clip.");

            if (clip.Title == null)
                throw new ArgumentNullException(nameof(clip.Title), "Property is required for class Clip.");

            if (clip.ThumbnailUrl == null)
                throw new ArgumentNullException(nameof(clip.ThumbnailUrl), "Property is required for class Clip.");

            writer.WriteString("id", clip.Id);

            writer.WriteString("url", clip.Url);

            writer.WriteString("embed_url", clip.EmbedUrl);

            writer.WriteString("broadcaster_id", clip.BroadcasterId);

            writer.WriteString("broadcaster_name", clip.BroadcasterName);

            writer.WriteString("creator_id", clip.CreatorId);

            writer.WriteString("creator_name", clip.CreatorName);

            writer.WriteString("video_id", clip.VideoId);

            writer.WriteString("game_id", clip.GameId);

            writer.WriteString("language", clip.Language);

            writer.WriteString("title", clip.Title);

            writer.WriteNumber("view_count", clip.ViewCount);

            writer.WriteString("created_at", clip.CreatedAt.ToString(CreatedAtFormat));

            writer.WriteString("thumbnail_url", clip.ThumbnailUrl);

            writer.WriteNumber("duration", clip.Duration);

            writer.WriteBoolean("is_featured", clip.IsFeatured);

            if (clip.VodOffset != null)
                writer.WriteNumber("vod_offset", clip.VodOffset.Value);
            else
                writer.WriteNull("vod_offset");
        }
    }
}

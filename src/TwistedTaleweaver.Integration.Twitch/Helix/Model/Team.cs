// <auto-generated>
/*
 * Twitch API Swagger UI (Unofficial)
 *
 * Unofficial Swagger UI for Twitch API.  All endpoints are generated automatically from the [twitch docs](https://dev.twitch.tv/docs/api/reference) page.  __Features:__  * Swagger UI for all Twitch API endpoints * Schemas for _Request Query Parameters_, _Request Body_, _Response Body_ * Some additional schemas like _Clip_, _ChatBadge_, _Prediction_, _Game_, _Channel_, _Video_ etc. * Response codes and examples * Generated types for TypeScript: [ts-twitch-api](https://github.com/DmitryScaletta/ts-twitch-api)  __Repository:__ [github.com/DmitryScaletta/twitch-api-swagger](https://github.com/DmitryScaletta/twitch-api-swagger)
 *
 * The version of the OpenAPI document: helix
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using TwistedTaleweaver.Integration.Twitch.Helix.Client;

namespace TwistedTaleweaver.Integration.Twitch.Helix.Model
{
    /// <summary>
    /// Team
    /// </summary>
    public partial class Team : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Team" /> class.
        /// </summary>
        /// <param name="users">The list of team members.</param>
        /// <param name="backgroundImageUrl">A URL to the team’s background image.</param>
        /// <param name="banner">A URL to the team’s banner.</param>
        /// <param name="createdAt">The UTC date and time (in RFC3339 format) of when the team was created.</param>
        /// <param name="updatedAt">The UTC date and time (in RFC3339 format) of the last time the team was updated.</param>
        /// <param name="info">The team’s description. The description may contain formatting such as Markdown, HTML, newline (\\\\n) characters, etc.</param>
        /// <param name="thumbnailUrl">A URL to a thumbnail image of the team’s logo.</param>
        /// <param name="teamName">The team’s name.</param>
        /// <param name="teamDisplayName">The team’s display name.</param>
        /// <param name="id">An ID that identifies the team.</param>
        [JsonConstructor]
        public Team(List<TeamUsersInner> users, string backgroundImageUrl, string banner, DateTime createdAt, DateTime updatedAt, string info, string thumbnailUrl, string teamName, string teamDisplayName, string id)
        {
            Users = users;
            BackgroundImageUrl = backgroundImageUrl;
            Banner = banner;
            CreatedAt = createdAt;
            UpdatedAt = updatedAt;
            Info = info;
            ThumbnailUrl = thumbnailUrl;
            TeamName = teamName;
            TeamDisplayName = teamDisplayName;
            Id = id;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The list of team members.
        /// </summary>
        /// <value>The list of team members.</value>
        [JsonPropertyName("users")]
        public List<TeamUsersInner> Users { get; set; }

        /// <summary>
        /// A URL to the team’s background image.
        /// </summary>
        /// <value>A URL to the team’s background image.</value>
        [JsonPropertyName("background_image_url")]
        public string BackgroundImageUrl { get; set; }

        /// <summary>
        /// A URL to the team’s banner.
        /// </summary>
        /// <value>A URL to the team’s banner.</value>
        [JsonPropertyName("banner")]
        public string Banner { get; set; }

        /// <summary>
        /// The UTC date and time (in RFC3339 format) of when the team was created.
        /// </summary>
        /// <value>The UTC date and time (in RFC3339 format) of when the team was created.</value>
        [JsonPropertyName("created_at")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// The UTC date and time (in RFC3339 format) of the last time the team was updated.
        /// </summary>
        /// <value>The UTC date and time (in RFC3339 format) of the last time the team was updated.</value>
        [JsonPropertyName("updated_at")]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// The team’s description. The description may contain formatting such as Markdown, HTML, newline (\\\\n) characters, etc.
        /// </summary>
        /// <value>The team’s description. The description may contain formatting such as Markdown, HTML, newline (\\\\n) characters, etc.</value>
        [JsonPropertyName("info")]
        public string Info { get; set; }

        /// <summary>
        /// A URL to a thumbnail image of the team’s logo.
        /// </summary>
        /// <value>A URL to a thumbnail image of the team’s logo.</value>
        [JsonPropertyName("thumbnail_url")]
        public string ThumbnailUrl { get; set; }

        /// <summary>
        /// The team’s name.
        /// </summary>
        /// <value>The team’s name.</value>
        [JsonPropertyName("team_name")]
        public string TeamName { get; set; }

        /// <summary>
        /// The team’s display name.
        /// </summary>
        /// <value>The team’s display name.</value>
        [JsonPropertyName("team_display_name")]
        public string TeamDisplayName { get; set; }

        /// <summary>
        /// An ID that identifies the team.
        /// </summary>
        /// <value>An ID that identifies the team.</value>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Team {\n");
            sb.Append("  Users: ").Append(Users).Append("\n");
            sb.Append("  BackgroundImageUrl: ").Append(BackgroundImageUrl).Append("\n");
            sb.Append("  Banner: ").Append(Banner).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Info: ").Append(Info).Append("\n");
            sb.Append("  ThumbnailUrl: ").Append(ThumbnailUrl).Append("\n");
            sb.Append("  TeamName: ").Append(TeamName).Append("\n");
            sb.Append("  TeamDisplayName: ").Append(TeamDisplayName).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Team" />
    /// </summary>
    public class TeamJsonConverter : JsonConverter<Team>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UpdatedAt
        /// </summary>
        public static string UpdatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="Team" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Team Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<TeamUsersInner>?> users = default;
            Option<string?> backgroundImageUrl = default;
            Option<string?> banner = default;
            Option<DateTime?> createdAt = default;
            Option<DateTime?> updatedAt = default;
            Option<string?> info = default;
            Option<string?> thumbnailUrl = default;
            Option<string?> teamName = default;
            Option<string?> teamDisplayName = default;
            Option<string?> id = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "users":
                            users = new Option<List<TeamUsersInner>?>(JsonSerializer.Deserialize<List<TeamUsersInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "background_image_url":
                            backgroundImageUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "banner":
                            banner = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "created_at":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "updated_at":
                            updatedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "info":
                            info = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "thumbnail_url":
                            thumbnailUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "team_name":
                            teamName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "team_display_name":
                            teamDisplayName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!users.IsSet)
                throw new ArgumentException("Property is required for class Team.", nameof(users));

            if (!backgroundImageUrl.IsSet)
                throw new ArgumentException("Property is required for class Team.", nameof(backgroundImageUrl));

            if (!banner.IsSet)
                throw new ArgumentException("Property is required for class Team.", nameof(banner));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class Team.", nameof(createdAt));

            if (!updatedAt.IsSet)
                throw new ArgumentException("Property is required for class Team.", nameof(updatedAt));

            if (!info.IsSet)
                throw new ArgumentException("Property is required for class Team.", nameof(info));

            if (!thumbnailUrl.IsSet)
                throw new ArgumentException("Property is required for class Team.", nameof(thumbnailUrl));

            if (!teamName.IsSet)
                throw new ArgumentException("Property is required for class Team.", nameof(teamName));

            if (!teamDisplayName.IsSet)
                throw new ArgumentException("Property is required for class Team.", nameof(teamDisplayName));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class Team.", nameof(id));

            if (users.IsSet && users.Value == null)
                throw new ArgumentNullException(nameof(users), "Property is not nullable for class Team.");

            if (backgroundImageUrl.IsSet && backgroundImageUrl.Value == null)
                throw new ArgumentNullException(nameof(backgroundImageUrl), "Property is not nullable for class Team.");

            if (banner.IsSet && banner.Value == null)
                throw new ArgumentNullException(nameof(banner), "Property is not nullable for class Team.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class Team.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class Team.");

            if (info.IsSet && info.Value == null)
                throw new ArgumentNullException(nameof(info), "Property is not nullable for class Team.");

            if (thumbnailUrl.IsSet && thumbnailUrl.Value == null)
                throw new ArgumentNullException(nameof(thumbnailUrl), "Property is not nullable for class Team.");

            if (teamName.IsSet && teamName.Value == null)
                throw new ArgumentNullException(nameof(teamName), "Property is not nullable for class Team.");

            if (teamDisplayName.IsSet && teamDisplayName.Value == null)
                throw new ArgumentNullException(nameof(teamDisplayName), "Property is not nullable for class Team.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class Team.");

            return new Team(users.Value!, backgroundImageUrl.Value!, banner.Value!, createdAt.Value!.Value!, updatedAt.Value!.Value!, info.Value!, thumbnailUrl.Value!, teamName.Value!, teamDisplayName.Value!, id.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="Team" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="team"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Team team, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, team, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Team" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="team"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Team team, JsonSerializerOptions jsonSerializerOptions)
        {
            if (team.Users == null)
                throw new ArgumentNullException(nameof(team.Users), "Property is required for class Team.");

            if (team.BackgroundImageUrl == null)
                throw new ArgumentNullException(nameof(team.BackgroundImageUrl), "Property is required for class Team.");

            if (team.Banner == null)
                throw new ArgumentNullException(nameof(team.Banner), "Property is required for class Team.");

            if (team.Info == null)
                throw new ArgumentNullException(nameof(team.Info), "Property is required for class Team.");

            if (team.ThumbnailUrl == null)
                throw new ArgumentNullException(nameof(team.ThumbnailUrl), "Property is required for class Team.");

            if (team.TeamName == null)
                throw new ArgumentNullException(nameof(team.TeamName), "Property is required for class Team.");

            if (team.TeamDisplayName == null)
                throw new ArgumentNullException(nameof(team.TeamDisplayName), "Property is required for class Team.");

            if (team.Id == null)
                throw new ArgumentNullException(nameof(team.Id), "Property is required for class Team.");

            writer.WritePropertyName("users");
            JsonSerializer.Serialize(writer, team.Users, jsonSerializerOptions);
            writer.WriteString("background_image_url", team.BackgroundImageUrl);

            writer.WriteString("banner", team.Banner);

            writer.WriteString("created_at", team.CreatedAt.ToString(CreatedAtFormat));

            writer.WriteString("updated_at", team.UpdatedAt.ToString(UpdatedAtFormat));

            writer.WriteString("info", team.Info);

            writer.WriteString("thumbnail_url", team.ThumbnailUrl);

            writer.WriteString("team_name", team.TeamName);

            writer.WriteString("team_display_name", team.TeamDisplayName);

            writer.WriteString("id", team.Id);
        }
    }
}

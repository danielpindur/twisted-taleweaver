// <auto-generated>
/*
 * Twitch API Swagger UI (Unofficial)
 *
 * Unofficial Swagger UI for Twitch API.  All endpoints are generated automatically from the [twitch docs](https://dev.twitch.tv/docs/api/reference) page.  __Features:__  * Swagger UI for all Twitch API endpoints * Schemas for _Request Query Parameters_, _Request Body_, _Response Body_ * Some additional schemas like _Clip_, _ChatBadge_, _Prediction_, _Game_, _Channel_, _Video_ etc. * Response codes and examples * Generated types for TypeScript: [ts-twitch-api](https://github.com/DmitryScaletta/ts-twitch-api)  __Repository:__ [github.com/DmitryScaletta/twitch-api-swagger](https://github.com/DmitryScaletta/twitch-api-swagger)
 *
 * The version of the OpenAPI document: helix
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using TwistedTaleweaver.Integration.Twitch.Helix.Client;

namespace TwistedTaleweaver.Integration.Twitch.Helix.Model
{
    /// <summary>
    /// GetConduitShardsResponseDataInner
    /// </summary>
    public partial class GetConduitShardsResponseDataInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetConduitShardsResponseDataInner" /> class.
        /// </summary>
        /// <param name="id">Shard ID.</param>
        /// <param name="status">The shard status. The subscriber receives events only for enabled shards. Possible values are:      * enabled — The shard is enabled. * webhook\\_callback\\_verification\\_pending — The shard is pending verification of the specified callback URL. * webhook\\_callback\\_verification\\_failed — The specified callback URL failed verification. * notification\\_failures\\_exceeded — The notification delivery failure rate was too high. * websocket\\_disconnected — The client closed the connection. * websocket\\_failed\\_ping\\_pong — The client failed to respond to a ping message. * websocket\\_received\\_inbound\\_traffic — The client sent a non-pong message. Clients may only send pong messages (and only in response to a ping message). * websocket\\_internal\\_error — The Twitch WebSocket server experienced an unexpected error. * websocket\\_network\\_timeout — The Twitch WebSocket server timed out writing the message to the client. * websocket\\_network\\_error — The Twitch WebSocket server experienced a network error writing the message to the client. * websocket\\_failed\\_to\\_reconnect - The client failed to reconnect to the Twitch WebSocket server within the required time after a Reconnect Message.</param>
        /// <param name="transport">transport</param>
        [JsonConstructor]
        public GetConduitShardsResponseDataInner(string id, StatusEnum status, GetConduitShardsResponseDataInnerTransport transport)
        {
            Id = id;
            Status = status;
            Transport = transport;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The shard status. The subscriber receives events only for enabled shards. Possible values are:      * enabled — The shard is enabled. * webhook\\_callback\\_verification\\_pending — The shard is pending verification of the specified callback URL. * webhook\\_callback\\_verification\\_failed — The specified callback URL failed verification. * notification\\_failures\\_exceeded — The notification delivery failure rate was too high. * websocket\\_disconnected — The client closed the connection. * websocket\\_failed\\_ping\\_pong — The client failed to respond to a ping message. * websocket\\_received\\_inbound\\_traffic — The client sent a non-pong message. Clients may only send pong messages (and only in response to a ping message). * websocket\\_internal\\_error — The Twitch WebSocket server experienced an unexpected error. * websocket\\_network\\_timeout — The Twitch WebSocket server timed out writing the message to the client. * websocket\\_network\\_error — The Twitch WebSocket server experienced a network error writing the message to the client. * websocket\\_failed\\_to\\_reconnect - The client failed to reconnect to the Twitch WebSocket server within the required time after a Reconnect Message.
        /// </summary>
        /// <value>The shard status. The subscriber receives events only for enabled shards. Possible values are:      * enabled — The shard is enabled. * webhook\\_callback\\_verification\\_pending — The shard is pending verification of the specified callback URL. * webhook\\_callback\\_verification\\_failed — The specified callback URL failed verification. * notification\\_failures\\_exceeded — The notification delivery failure rate was too high. * websocket\\_disconnected — The client closed the connection. * websocket\\_failed\\_ping\\_pong — The client failed to respond to a ping message. * websocket\\_received\\_inbound\\_traffic — The client sent a non-pong message. Clients may only send pong messages (and only in response to a ping message). * websocket\\_internal\\_error — The Twitch WebSocket server experienced an unexpected error. * websocket\\_network\\_timeout — The Twitch WebSocket server timed out writing the message to the client. * websocket\\_network\\_error — The Twitch WebSocket server experienced a network error writing the message to the client. * websocket\\_failed\\_to\\_reconnect - The client failed to reconnect to the Twitch WebSocket server within the required time after a Reconnect Message.</value>
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Enabled for value: enabled
            /// </summary>
            Enabled = 1,

            /// <summary>
            /// Enum WebhookCallbackVerificationPending for value: webhook_callback_verification_pending
            /// </summary>
            WebhookCallbackVerificationPending = 2,

            /// <summary>
            /// Enum WebhookCallbackVerificationFailed for value: webhook_callback_verification_failed
            /// </summary>
            WebhookCallbackVerificationFailed = 3,

            /// <summary>
            /// Enum NotificationFailuresExceeded for value: notification_failures_exceeded
            /// </summary>
            NotificationFailuresExceeded = 4,

            /// <summary>
            /// Enum WebsocketDisconnected for value: websocket_disconnected
            /// </summary>
            WebsocketDisconnected = 5,

            /// <summary>
            /// Enum WebsocketFailedPingPong for value: websocket_failed_ping_pong
            /// </summary>
            WebsocketFailedPingPong = 6,

            /// <summary>
            /// Enum WebsocketReceivedInboundTraffic for value: websocket_received_inbound_traffic
            /// </summary>
            WebsocketReceivedInboundTraffic = 7,

            /// <summary>
            /// Enum WebsocketInternalError for value: websocket_internal_error
            /// </summary>
            WebsocketInternalError = 8,

            /// <summary>
            /// Enum WebsocketNetworkTimeout for value: websocket_network_timeout
            /// </summary>
            WebsocketNetworkTimeout = 9,

            /// <summary>
            /// Enum WebsocketNetworkError for value: websocket_network_error
            /// </summary>
            WebsocketNetworkError = 10,

            /// <summary>
            /// Enum WebsocketFailedToReconnect for value: websocket_failed_to_reconnect
            /// </summary>
            WebsocketFailedToReconnect = 11
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static StatusEnum StatusEnumFromString(string value)
        {
            if (value.Equals("enabled"))
                return StatusEnum.Enabled;

            if (value.Equals("webhook_callback_verification_pending"))
                return StatusEnum.WebhookCallbackVerificationPending;

            if (value.Equals("webhook_callback_verification_failed"))
                return StatusEnum.WebhookCallbackVerificationFailed;

            if (value.Equals("notification_failures_exceeded"))
                return StatusEnum.NotificationFailuresExceeded;

            if (value.Equals("websocket_disconnected"))
                return StatusEnum.WebsocketDisconnected;

            if (value.Equals("websocket_failed_ping_pong"))
                return StatusEnum.WebsocketFailedPingPong;

            if (value.Equals("websocket_received_inbound_traffic"))
                return StatusEnum.WebsocketReceivedInboundTraffic;

            if (value.Equals("websocket_internal_error"))
                return StatusEnum.WebsocketInternalError;

            if (value.Equals("websocket_network_timeout"))
                return StatusEnum.WebsocketNetworkTimeout;

            if (value.Equals("websocket_network_error"))
                return StatusEnum.WebsocketNetworkError;

            if (value.Equals("websocket_failed_to_reconnect"))
                return StatusEnum.WebsocketFailedToReconnect;

            throw new NotImplementedException($"Could not convert value to type StatusEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static StatusEnum? StatusEnumFromStringOrDefault(string value)
        {
            if (value.Equals("enabled"))
                return StatusEnum.Enabled;

            if (value.Equals("webhook_callback_verification_pending"))
                return StatusEnum.WebhookCallbackVerificationPending;

            if (value.Equals("webhook_callback_verification_failed"))
                return StatusEnum.WebhookCallbackVerificationFailed;

            if (value.Equals("notification_failures_exceeded"))
                return StatusEnum.NotificationFailuresExceeded;

            if (value.Equals("websocket_disconnected"))
                return StatusEnum.WebsocketDisconnected;

            if (value.Equals("websocket_failed_ping_pong"))
                return StatusEnum.WebsocketFailedPingPong;

            if (value.Equals("websocket_received_inbound_traffic"))
                return StatusEnum.WebsocketReceivedInboundTraffic;

            if (value.Equals("websocket_internal_error"))
                return StatusEnum.WebsocketInternalError;

            if (value.Equals("websocket_network_timeout"))
                return StatusEnum.WebsocketNetworkTimeout;

            if (value.Equals("websocket_network_error"))
                return StatusEnum.WebsocketNetworkError;

            if (value.Equals("websocket_failed_to_reconnect"))
                return StatusEnum.WebsocketFailedToReconnect;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="StatusEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string StatusEnumToJsonValue(StatusEnum value)
        {
            if (value == StatusEnum.Enabled)
                return "enabled";

            if (value == StatusEnum.WebhookCallbackVerificationPending)
                return "webhook_callback_verification_pending";

            if (value == StatusEnum.WebhookCallbackVerificationFailed)
                return "webhook_callback_verification_failed";

            if (value == StatusEnum.NotificationFailuresExceeded)
                return "notification_failures_exceeded";

            if (value == StatusEnum.WebsocketDisconnected)
                return "websocket_disconnected";

            if (value == StatusEnum.WebsocketFailedPingPong)
                return "websocket_failed_ping_pong";

            if (value == StatusEnum.WebsocketReceivedInboundTraffic)
                return "websocket_received_inbound_traffic";

            if (value == StatusEnum.WebsocketInternalError)
                return "websocket_internal_error";

            if (value == StatusEnum.WebsocketNetworkTimeout)
                return "websocket_network_timeout";

            if (value == StatusEnum.WebsocketNetworkError)
                return "websocket_network_error";

            if (value == StatusEnum.WebsocketFailedToReconnect)
                return "websocket_failed_to_reconnect";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// The shard status. The subscriber receives events only for enabled shards. Possible values are:      * enabled — The shard is enabled. * webhook\\_callback\\_verification\\_pending — The shard is pending verification of the specified callback URL. * webhook\\_callback\\_verification\\_failed — The specified callback URL failed verification. * notification\\_failures\\_exceeded — The notification delivery failure rate was too high. * websocket\\_disconnected — The client closed the connection. * websocket\\_failed\\_ping\\_pong — The client failed to respond to a ping message. * websocket\\_received\\_inbound\\_traffic — The client sent a non-pong message. Clients may only send pong messages (and only in response to a ping message). * websocket\\_internal\\_error — The Twitch WebSocket server experienced an unexpected error. * websocket\\_network\\_timeout — The Twitch WebSocket server timed out writing the message to the client. * websocket\\_network\\_error — The Twitch WebSocket server experienced a network error writing the message to the client. * websocket\\_failed\\_to\\_reconnect - The client failed to reconnect to the Twitch WebSocket server within the required time after a Reconnect Message.
        /// </summary>
        /// <value>The shard status. The subscriber receives events only for enabled shards. Possible values are:      * enabled — The shard is enabled. * webhook\\_callback\\_verification\\_pending — The shard is pending verification of the specified callback URL. * webhook\\_callback\\_verification\\_failed — The specified callback URL failed verification. * notification\\_failures\\_exceeded — The notification delivery failure rate was too high. * websocket\\_disconnected — The client closed the connection. * websocket\\_failed\\_ping\\_pong — The client failed to respond to a ping message. * websocket\\_received\\_inbound\\_traffic — The client sent a non-pong message. Clients may only send pong messages (and only in response to a ping message). * websocket\\_internal\\_error — The Twitch WebSocket server experienced an unexpected error. * websocket\\_network\\_timeout — The Twitch WebSocket server timed out writing the message to the client. * websocket\\_network\\_error — The Twitch WebSocket server experienced a network error writing the message to the client. * websocket\\_failed\\_to\\_reconnect - The client failed to reconnect to the Twitch WebSocket server within the required time after a Reconnect Message.</value>
        [JsonPropertyName("status")]
        public StatusEnum Status { get; set; }

        /// <summary>
        /// Shard ID.
        /// </summary>
        /// <value>Shard ID.</value>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Transport
        /// </summary>
        [JsonPropertyName("transport")]
        public GetConduitShardsResponseDataInnerTransport Transport { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetConduitShardsResponseDataInner {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Transport: ").Append(Transport).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetConduitShardsResponseDataInner" />
    /// </summary>
    public class GetConduitShardsResponseDataInnerJsonConverter : JsonConverter<GetConduitShardsResponseDataInner>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetConduitShardsResponseDataInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetConduitShardsResponseDataInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<GetConduitShardsResponseDataInner.StatusEnum?> status = default;
            Option<GetConduitShardsResponseDataInnerTransport?> transport = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "status":
                            string? statusRawValue = utf8JsonReader.GetString();
                            if (statusRawValue != null)
                                status = new Option<GetConduitShardsResponseDataInner.StatusEnum?>(GetConduitShardsResponseDataInner.StatusEnumFromStringOrDefault(statusRawValue));
                            break;
                        case "transport":
                            transport = new Option<GetConduitShardsResponseDataInnerTransport?>(JsonSerializer.Deserialize<GetConduitShardsResponseDataInnerTransport>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class GetConduitShardsResponseDataInner.", nameof(id));

            if (!status.IsSet)
                throw new ArgumentException("Property is required for class GetConduitShardsResponseDataInner.", nameof(status));

            if (!transport.IsSet)
                throw new ArgumentException("Property is required for class GetConduitShardsResponseDataInner.", nameof(transport));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class GetConduitShardsResponseDataInner.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class GetConduitShardsResponseDataInner.");

            if (transport.IsSet && transport.Value == null)
                throw new ArgumentNullException(nameof(transport), "Property is not nullable for class GetConduitShardsResponseDataInner.");

            return new GetConduitShardsResponseDataInner(id.Value!, status.Value!.Value!, transport.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="GetConduitShardsResponseDataInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getConduitShardsResponseDataInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetConduitShardsResponseDataInner getConduitShardsResponseDataInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getConduitShardsResponseDataInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetConduitShardsResponseDataInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getConduitShardsResponseDataInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetConduitShardsResponseDataInner getConduitShardsResponseDataInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getConduitShardsResponseDataInner.Id == null)
                throw new ArgumentNullException(nameof(getConduitShardsResponseDataInner.Id), "Property is required for class GetConduitShardsResponseDataInner.");

            if (getConduitShardsResponseDataInner.Transport == null)
                throw new ArgumentNullException(nameof(getConduitShardsResponseDataInner.Transport), "Property is required for class GetConduitShardsResponseDataInner.");

            writer.WriteString("id", getConduitShardsResponseDataInner.Id);

            var statusRawValue = GetConduitShardsResponseDataInner.StatusEnumToJsonValue(getConduitShardsResponseDataInner.Status);
            writer.WriteString("status", statusRawValue);
            writer.WritePropertyName("transport");
            JsonSerializer.Serialize(writer, getConduitShardsResponseDataInner.Transport, jsonSerializerOptions);
        }
    }
}

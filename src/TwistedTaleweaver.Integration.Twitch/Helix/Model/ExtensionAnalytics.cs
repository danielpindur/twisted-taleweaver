// <auto-generated>
/*
 * Twitch API Swagger UI (Unofficial)
 *
 * Unofficial Swagger UI for Twitch API.  All endpoints are generated automatically from the [twitch docs](https://dev.twitch.tv/docs/api/reference) page.  __Features:__  * Swagger UI for all Twitch API endpoints * Schemas for _Request Query Parameters_, _Request Body_, _Response Body_ * Some additional schemas like _Clip_, _ChatBadge_, _Prediction_, _Game_, _Channel_, _Video_ etc. * Response codes and examples * Generated types for TypeScript: [ts-twitch-api](https://github.com/DmitryScaletta/ts-twitch-api)  __Repository:__ [github.com/DmitryScaletta/twitch-api-swagger](https://github.com/DmitryScaletta/twitch-api-swagger)
 *
 * The version of the OpenAPI document: helix
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using TwistedTaleweaver.Integration.Twitch.Helix.Client;

namespace TwistedTaleweaver.Integration.Twitch.Helix.Model
{
    /// <summary>
    /// ExtensionAnalytics
    /// </summary>
    public partial class ExtensionAnalytics : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExtensionAnalytics" /> class.
        /// </summary>
        /// <param name="extensionId">An ID that identifies the extension that the report was generated for.</param>
        /// <param name="uRL">The URL that you use to download the report. The URL is valid for 5 minutes.</param>
        /// <param name="type">The type of report.</param>
        /// <param name="dateRange">dateRange</param>
        [JsonConstructor]
        public ExtensionAnalytics(string extensionId, string uRL, string type, ExtensionAnalyticsDateRange dateRange)
        {
            ExtensionId = extensionId;
            URL = uRL;
            Type = type;
            DateRange = dateRange;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// An ID that identifies the extension that the report was generated for.
        /// </summary>
        /// <value>An ID that identifies the extension that the report was generated for.</value>
        [JsonPropertyName("extension_id")]
        public string ExtensionId { get; set; }

        /// <summary>
        /// The URL that you use to download the report. The URL is valid for 5 minutes.
        /// </summary>
        /// <value>The URL that you use to download the report. The URL is valid for 5 minutes.</value>
        [JsonPropertyName("URL")]
        public string URL { get; set; }

        /// <summary>
        /// The type of report.
        /// </summary>
        /// <value>The type of report.</value>
        [JsonPropertyName("type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets DateRange
        /// </summary>
        [JsonPropertyName("date_range")]
        public ExtensionAnalyticsDateRange DateRange { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ExtensionAnalytics {\n");
            sb.Append("  ExtensionId: ").Append(ExtensionId).Append("\n");
            sb.Append("  URL: ").Append(URL).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  DateRange: ").Append(DateRange).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ExtensionAnalytics" />
    /// </summary>
    public class ExtensionAnalyticsJsonConverter : JsonConverter<ExtensionAnalytics>
    {
        /// <summary>
        /// Deserializes json to <see cref="ExtensionAnalytics" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ExtensionAnalytics Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> extensionId = default;
            Option<string?> uRL = default;
            Option<string?> type = default;
            Option<ExtensionAnalyticsDateRange?> dateRange = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "extension_id":
                            extensionId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "URL":
                            uRL = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "type":
                            type = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "date_range":
                            dateRange = new Option<ExtensionAnalyticsDateRange?>(JsonSerializer.Deserialize<ExtensionAnalyticsDateRange>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!extensionId.IsSet)
                throw new ArgumentException("Property is required for class ExtensionAnalytics.", nameof(extensionId));

            if (!uRL.IsSet)
                throw new ArgumentException("Property is required for class ExtensionAnalytics.", nameof(uRL));

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class ExtensionAnalytics.", nameof(type));

            if (!dateRange.IsSet)
                throw new ArgumentException("Property is required for class ExtensionAnalytics.", nameof(dateRange));

            if (extensionId.IsSet && extensionId.Value == null)
                throw new ArgumentNullException(nameof(extensionId), "Property is not nullable for class ExtensionAnalytics.");

            if (uRL.IsSet && uRL.Value == null)
                throw new ArgumentNullException(nameof(uRL), "Property is not nullable for class ExtensionAnalytics.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class ExtensionAnalytics.");

            if (dateRange.IsSet && dateRange.Value == null)
                throw new ArgumentNullException(nameof(dateRange), "Property is not nullable for class ExtensionAnalytics.");

            return new ExtensionAnalytics(extensionId.Value!, uRL.Value!, type.Value!, dateRange.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="ExtensionAnalytics" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="extensionAnalytics"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ExtensionAnalytics extensionAnalytics, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, extensionAnalytics, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ExtensionAnalytics" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="extensionAnalytics"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ExtensionAnalytics extensionAnalytics, JsonSerializerOptions jsonSerializerOptions)
        {
            if (extensionAnalytics.ExtensionId == null)
                throw new ArgumentNullException(nameof(extensionAnalytics.ExtensionId), "Property is required for class ExtensionAnalytics.");

            if (extensionAnalytics.URL == null)
                throw new ArgumentNullException(nameof(extensionAnalytics.URL), "Property is required for class ExtensionAnalytics.");

            if (extensionAnalytics.Type == null)
                throw new ArgumentNullException(nameof(extensionAnalytics.Type), "Property is required for class ExtensionAnalytics.");

            if (extensionAnalytics.DateRange == null)
                throw new ArgumentNullException(nameof(extensionAnalytics.DateRange), "Property is required for class ExtensionAnalytics.");

            writer.WriteString("extension_id", extensionAnalytics.ExtensionId);

            writer.WriteString("URL", extensionAnalytics.URL);

            writer.WriteString("type", extensionAnalytics.Type);

            writer.WritePropertyName("date_range");
            JsonSerializer.Serialize(writer, extensionAnalytics.DateRange, jsonSerializerOptions);
        }
    }
}

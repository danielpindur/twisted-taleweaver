// <auto-generated>
/*
 * Twitch API Swagger UI (Unofficial)
 *
 * Unofficial Swagger UI for Twitch API.  All endpoints are generated automatically from the [twitch docs](https://dev.twitch.tv/docs/api/reference) page.  __Features:__  * Swagger UI for all Twitch API endpoints * Schemas for _Request Query Parameters_, _Request Body_, _Response Body_ * Some additional schemas like _Clip_, _ChatBadge_, _Prediction_, _Game_, _Channel_, _Video_ etc. * Response codes and examples * Generated types for TypeScript: [ts-twitch-api](https://github.com/DmitryScaletta/ts-twitch-api)  __Repository:__ [github.com/DmitryScaletta/twitch-api-swagger](https://github.com/DmitryScaletta/twitch-api-swagger)
 *
 * The version of the OpenAPI document: helix
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using TwistedTaleweaver.Integration.Twitch.Helix.Client;

namespace TwistedTaleweaver.Integration.Twitch.Helix.Model
{
    /// <summary>
    /// UpdateChatSettingsBody
    /// </summary>
    public partial class UpdateChatSettingsBody : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateChatSettingsBody" /> class.
        /// </summary>
        /// <param name="emoteMode">A Boolean value that determines whether chat messages must contain only emotes.      Set to **true** if only emotes are allowed; otherwise, **false**. The default is **false**.</param>
        /// <param name="followerMode">A Boolean value that determines whether the broadcaster restricts the chat room to followers only.      Set to **true** if the broadcaster restricts the chat room to followers only; otherwise, **false**. The default is **true**.      To specify how long users must follow the broadcaster before being able to participate in the chat room, see the &#x60;follower_mode_duration&#x60; field.</param>
        /// <param name="followerModeDuration">The length of time, in minutes, that users must follow the broadcaster before being able to participate in the chat room. Set only if &#x60;follower_mode&#x60; is **true**. Possible values are: 0 (no restriction) through 129600 (3 months). The default is 0.</param>
        /// <param name="nonModeratorChatDelay">A Boolean value that determines whether the broadcaster adds a short delay before chat messages appear in the chat room. This gives chat moderators and bots a chance to remove them before viewers can see the message.      Set to **true** if the broadcaster applies a delay; otherwise, **false**. The default is **false**.      To specify the length of the delay, see the &#x60;non_moderator_chat_delay_duration&#x60; field.</param>
        /// <param name="nonModeratorChatDelayDuration">The amount of time, in seconds, that messages are delayed before appearing in chat. Set only if &#x60;non_moderator_chat_delay&#x60; is **true**. Possible values are:      * 2 — 2 second delay (recommended) * 4 — 4 second delay * 6 — 6 second delay</param>
        /// <param name="slowMode">A Boolean value that determines whether the broadcaster limits how often users in the chat room are allowed to send messages. Set to **true** if the broadcaster applies a wait period between messages; otherwise, **false**. The default is **false**.      To specify the delay, see the &#x60;slow_mode_wait_time&#x60; field.</param>
        /// <param name="slowModeWaitTime">The amount of time, in seconds, that users must wait between sending messages. Set only if &#x60;slow_mode&#x60; is **true**.      Possible values are: 3 (3 second delay) through 120 (2 minute delay). The default is 30 seconds.</param>
        /// <param name="subscriberMode">A Boolean value that determines whether only users that subscribe to the broadcaster’s channel may talk in the chat room.      Set to **true** if the broadcaster restricts the chat room to subscribers only; otherwise, **false**. The default is **false**.</param>
        /// <param name="uniqueChatMode">A Boolean value that determines whether the broadcaster requires users to post only unique messages in the chat room.      Set to **true** if the broadcaster allows only unique messages; otherwise, **false**. The default is **false**.</param>
        [JsonConstructor]
        public UpdateChatSettingsBody(Option<bool?> emoteMode = default, Option<bool?> followerMode = default, Option<int?> followerModeDuration = default, Option<bool?> nonModeratorChatDelay = default, Option<NonModeratorChatDelayDurationEnum?> nonModeratorChatDelayDuration = default, Option<bool?> slowMode = default, Option<int?> slowModeWaitTime = default, Option<bool?> subscriberMode = default, Option<bool?> uniqueChatMode = default)
        {
            EmoteModeOption = emoteMode;
            FollowerModeOption = followerMode;
            FollowerModeDurationOption = followerModeDuration;
            NonModeratorChatDelayOption = nonModeratorChatDelay;
            NonModeratorChatDelayDurationOption = nonModeratorChatDelayDuration;
            SlowModeOption = slowMode;
            SlowModeWaitTimeOption = slowModeWaitTime;
            SubscriberModeOption = subscriberMode;
            UniqueChatModeOption = uniqueChatMode;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The amount of time, in seconds, that messages are delayed before appearing in chat. Set only if &#x60;non_moderator_chat_delay&#x60; is **true**. Possible values are:      * 2 — 2 second delay (recommended) * 4 — 4 second delay * 6 — 6 second delay
        /// </summary>
        /// <value>The amount of time, in seconds, that messages are delayed before appearing in chat. Set only if &#x60;non_moderator_chat_delay&#x60; is **true**. Possible values are:      * 2 — 2 second delay (recommended) * 4 — 4 second delay * 6 — 6 second delay</value>
        public enum NonModeratorChatDelayDurationEnum
        {
            /// <summary>
            /// Enum NUMBER_2 for value: 2
            /// </summary>
            NUMBER_2 = 2,

            /// <summary>
            /// Enum NUMBER_4 for value: 4
            /// </summary>
            NUMBER_4 = 4,

            /// <summary>
            /// Enum NUMBER_6 for value: 6
            /// </summary>
            NUMBER_6 = 6
        }

        /// <summary>
        /// Returns a <see cref="NonModeratorChatDelayDurationEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static NonModeratorChatDelayDurationEnum NonModeratorChatDelayDurationEnumFromString(string value)
        {
            if (value.Equals((2).ToString()))
                return NonModeratorChatDelayDurationEnum.NUMBER_2;

            if (value.Equals((4).ToString()))
                return NonModeratorChatDelayDurationEnum.NUMBER_4;

            if (value.Equals((6).ToString()))
                return NonModeratorChatDelayDurationEnum.NUMBER_6;

            throw new NotImplementedException($"Could not convert value to type NonModeratorChatDelayDurationEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="NonModeratorChatDelayDurationEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static NonModeratorChatDelayDurationEnum? NonModeratorChatDelayDurationEnumFromStringOrDefault(string value)
        {
            if (value.Equals((2).ToString()))
                return NonModeratorChatDelayDurationEnum.NUMBER_2;

            if (value.Equals((4).ToString()))
                return NonModeratorChatDelayDurationEnum.NUMBER_4;

            if (value.Equals((6).ToString()))
                return NonModeratorChatDelayDurationEnum.NUMBER_6;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="NonModeratorChatDelayDurationEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static int NonModeratorChatDelayDurationEnumToJsonValue(NonModeratorChatDelayDurationEnum value)
        {
            return (int) value;
        }

        /// <summary>
        /// Used to track the state of NonModeratorChatDelayDuration
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<NonModeratorChatDelayDurationEnum?> NonModeratorChatDelayDurationOption { get; private set; }

        /// <summary>
        /// The amount of time, in seconds, that messages are delayed before appearing in chat. Set only if &#x60;non_moderator_chat_delay&#x60; is **true**. Possible values are:      * 2 — 2 second delay (recommended) * 4 — 4 second delay * 6 — 6 second delay
        /// </summary>
        /// <value>The amount of time, in seconds, that messages are delayed before appearing in chat. Set only if &#x60;non_moderator_chat_delay&#x60; is **true**. Possible values are:      * 2 — 2 second delay (recommended) * 4 — 4 second delay * 6 — 6 second delay</value>
        [JsonPropertyName("non_moderator_chat_delay_duration")]
        public NonModeratorChatDelayDurationEnum? NonModeratorChatDelayDuration { get { return this.NonModeratorChatDelayDurationOption; } set { this.NonModeratorChatDelayDurationOption = new(value); } }

        /// <summary>
        /// Used to track the state of EmoteMode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> EmoteModeOption { get; private set; }

        /// <summary>
        /// A Boolean value that determines whether chat messages must contain only emotes.      Set to **true** if only emotes are allowed; otherwise, **false**. The default is **false**.
        /// </summary>
        /// <value>A Boolean value that determines whether chat messages must contain only emotes.      Set to **true** if only emotes are allowed; otherwise, **false**. The default is **false**.</value>
        [JsonPropertyName("emote_mode")]
        public bool? EmoteMode { get { return this.EmoteModeOption; } set { this.EmoteModeOption = new(value); } }

        /// <summary>
        /// Used to track the state of FollowerMode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> FollowerModeOption { get; private set; }

        /// <summary>
        /// A Boolean value that determines whether the broadcaster restricts the chat room to followers only.      Set to **true** if the broadcaster restricts the chat room to followers only; otherwise, **false**. The default is **true**.      To specify how long users must follow the broadcaster before being able to participate in the chat room, see the &#x60;follower_mode_duration&#x60; field.
        /// </summary>
        /// <value>A Boolean value that determines whether the broadcaster restricts the chat room to followers only.      Set to **true** if the broadcaster restricts the chat room to followers only; otherwise, **false**. The default is **true**.      To specify how long users must follow the broadcaster before being able to participate in the chat room, see the &#x60;follower_mode_duration&#x60; field.</value>
        [JsonPropertyName("follower_mode")]
        public bool? FollowerMode { get { return this.FollowerModeOption; } set { this.FollowerModeOption = new(value); } }

        /// <summary>
        /// Used to track the state of FollowerModeDuration
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> FollowerModeDurationOption { get; private set; }

        /// <summary>
        /// The length of time, in minutes, that users must follow the broadcaster before being able to participate in the chat room. Set only if &#x60;follower_mode&#x60; is **true**. Possible values are: 0 (no restriction) through 129600 (3 months). The default is 0.
        /// </summary>
        /// <value>The length of time, in minutes, that users must follow the broadcaster before being able to participate in the chat room. Set only if &#x60;follower_mode&#x60; is **true**. Possible values are: 0 (no restriction) through 129600 (3 months). The default is 0.</value>
        [JsonPropertyName("follower_mode_duration")]
        public int? FollowerModeDuration { get { return this.FollowerModeDurationOption; } set { this.FollowerModeDurationOption = new(value); } }

        /// <summary>
        /// Used to track the state of NonModeratorChatDelay
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> NonModeratorChatDelayOption { get; private set; }

        /// <summary>
        /// A Boolean value that determines whether the broadcaster adds a short delay before chat messages appear in the chat room. This gives chat moderators and bots a chance to remove them before viewers can see the message.      Set to **true** if the broadcaster applies a delay; otherwise, **false**. The default is **false**.      To specify the length of the delay, see the &#x60;non_moderator_chat_delay_duration&#x60; field.
        /// </summary>
        /// <value>A Boolean value that determines whether the broadcaster adds a short delay before chat messages appear in the chat room. This gives chat moderators and bots a chance to remove them before viewers can see the message.      Set to **true** if the broadcaster applies a delay; otherwise, **false**. The default is **false**.      To specify the length of the delay, see the &#x60;non_moderator_chat_delay_duration&#x60; field.</value>
        [JsonPropertyName("non_moderator_chat_delay")]
        public bool? NonModeratorChatDelay { get { return this.NonModeratorChatDelayOption; } set { this.NonModeratorChatDelayOption = new(value); } }

        /// <summary>
        /// Used to track the state of SlowMode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> SlowModeOption { get; private set; }

        /// <summary>
        /// A Boolean value that determines whether the broadcaster limits how often users in the chat room are allowed to send messages. Set to **true** if the broadcaster applies a wait period between messages; otherwise, **false**. The default is **false**.      To specify the delay, see the &#x60;slow_mode_wait_time&#x60; field.
        /// </summary>
        /// <value>A Boolean value that determines whether the broadcaster limits how often users in the chat room are allowed to send messages. Set to **true** if the broadcaster applies a wait period between messages; otherwise, **false**. The default is **false**.      To specify the delay, see the &#x60;slow_mode_wait_time&#x60; field.</value>
        [JsonPropertyName("slow_mode")]
        public bool? SlowMode { get { return this.SlowModeOption; } set { this.SlowModeOption = new(value); } }

        /// <summary>
        /// Used to track the state of SlowModeWaitTime
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> SlowModeWaitTimeOption { get; private set; }

        /// <summary>
        /// The amount of time, in seconds, that users must wait between sending messages. Set only if &#x60;slow_mode&#x60; is **true**.      Possible values are: 3 (3 second delay) through 120 (2 minute delay). The default is 30 seconds.
        /// </summary>
        /// <value>The amount of time, in seconds, that users must wait between sending messages. Set only if &#x60;slow_mode&#x60; is **true**.      Possible values are: 3 (3 second delay) through 120 (2 minute delay). The default is 30 seconds.</value>
        [JsonPropertyName("slow_mode_wait_time")]
        public int? SlowModeWaitTime { get { return this.SlowModeWaitTimeOption; } set { this.SlowModeWaitTimeOption = new(value); } }

        /// <summary>
        /// Used to track the state of SubscriberMode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> SubscriberModeOption { get; private set; }

        /// <summary>
        /// A Boolean value that determines whether only users that subscribe to the broadcaster’s channel may talk in the chat room.      Set to **true** if the broadcaster restricts the chat room to subscribers only; otherwise, **false**. The default is **false**.
        /// </summary>
        /// <value>A Boolean value that determines whether only users that subscribe to the broadcaster’s channel may talk in the chat room.      Set to **true** if the broadcaster restricts the chat room to subscribers only; otherwise, **false**. The default is **false**.</value>
        [JsonPropertyName("subscriber_mode")]
        public bool? SubscriberMode { get { return this.SubscriberModeOption; } set { this.SubscriberModeOption = new(value); } }

        /// <summary>
        /// Used to track the state of UniqueChatMode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> UniqueChatModeOption { get; private set; }

        /// <summary>
        /// A Boolean value that determines whether the broadcaster requires users to post only unique messages in the chat room.      Set to **true** if the broadcaster allows only unique messages; otherwise, **false**. The default is **false**.
        /// </summary>
        /// <value>A Boolean value that determines whether the broadcaster requires users to post only unique messages in the chat room.      Set to **true** if the broadcaster allows only unique messages; otherwise, **false**. The default is **false**.</value>
        [JsonPropertyName("unique_chat_mode")]
        public bool? UniqueChatMode { get { return this.UniqueChatModeOption; } set { this.UniqueChatModeOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateChatSettingsBody {\n");
            sb.Append("  EmoteMode: ").Append(EmoteMode).Append("\n");
            sb.Append("  FollowerMode: ").Append(FollowerMode).Append("\n");
            sb.Append("  FollowerModeDuration: ").Append(FollowerModeDuration).Append("\n");
            sb.Append("  NonModeratorChatDelay: ").Append(NonModeratorChatDelay).Append("\n");
            sb.Append("  NonModeratorChatDelayDuration: ").Append(NonModeratorChatDelayDuration).Append("\n");
            sb.Append("  SlowMode: ").Append(SlowMode).Append("\n");
            sb.Append("  SlowModeWaitTime: ").Append(SlowModeWaitTime).Append("\n");
            sb.Append("  SubscriberMode: ").Append(SubscriberMode).Append("\n");
            sb.Append("  UniqueChatMode: ").Append(UniqueChatMode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UpdateChatSettingsBody" />
    /// </summary>
    public class UpdateChatSettingsBodyJsonConverter : JsonConverter<UpdateChatSettingsBody>
    {
        /// <summary>
        /// Deserializes json to <see cref="UpdateChatSettingsBody" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override UpdateChatSettingsBody Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> emoteMode = default;
            Option<bool?> followerMode = default;
            Option<int?> followerModeDuration = default;
            Option<bool?> nonModeratorChatDelay = default;
            Option<UpdateChatSettingsBody.NonModeratorChatDelayDurationEnum?> nonModeratorChatDelayDuration = default;
            Option<bool?> slowMode = default;
            Option<int?> slowModeWaitTime = default;
            Option<bool?> subscriberMode = default;
            Option<bool?> uniqueChatMode = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "emote_mode":
                            emoteMode = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "follower_mode":
                            followerMode = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "follower_mode_duration":
                            followerModeDuration = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "non_moderator_chat_delay":
                            nonModeratorChatDelay = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "non_moderator_chat_delay_duration":
                            nonModeratorChatDelayDuration = new Option<UpdateChatSettingsBody.NonModeratorChatDelayDurationEnum?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (UpdateChatSettingsBody.NonModeratorChatDelayDurationEnum?)null : (UpdateChatSettingsBody.NonModeratorChatDelayDurationEnum)utf8JsonReader.GetInt32());
                            break;
                        case "slow_mode":
                            slowMode = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "slow_mode_wait_time":
                            slowModeWaitTime = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "subscriber_mode":
                            subscriberMode = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "unique_chat_mode":
                            uniqueChatMode = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (emoteMode.IsSet && emoteMode.Value == null)
                throw new ArgumentNullException(nameof(emoteMode), "Property is not nullable for class UpdateChatSettingsBody.");

            if (followerMode.IsSet && followerMode.Value == null)
                throw new ArgumentNullException(nameof(followerMode), "Property is not nullable for class UpdateChatSettingsBody.");

            if (followerModeDuration.IsSet && followerModeDuration.Value == null)
                throw new ArgumentNullException(nameof(followerModeDuration), "Property is not nullable for class UpdateChatSettingsBody.");

            if (nonModeratorChatDelay.IsSet && nonModeratorChatDelay.Value == null)
                throw new ArgumentNullException(nameof(nonModeratorChatDelay), "Property is not nullable for class UpdateChatSettingsBody.");

            if (nonModeratorChatDelayDuration.IsSet && nonModeratorChatDelayDuration.Value == null)
                throw new ArgumentNullException(nameof(nonModeratorChatDelayDuration), "Property is not nullable for class UpdateChatSettingsBody.");

            if (slowMode.IsSet && slowMode.Value == null)
                throw new ArgumentNullException(nameof(slowMode), "Property is not nullable for class UpdateChatSettingsBody.");

            if (slowModeWaitTime.IsSet && slowModeWaitTime.Value == null)
                throw new ArgumentNullException(nameof(slowModeWaitTime), "Property is not nullable for class UpdateChatSettingsBody.");

            if (subscriberMode.IsSet && subscriberMode.Value == null)
                throw new ArgumentNullException(nameof(subscriberMode), "Property is not nullable for class UpdateChatSettingsBody.");

            if (uniqueChatMode.IsSet && uniqueChatMode.Value == null)
                throw new ArgumentNullException(nameof(uniqueChatMode), "Property is not nullable for class UpdateChatSettingsBody.");

            return new UpdateChatSettingsBody(emoteMode, followerMode, followerModeDuration, nonModeratorChatDelay, nonModeratorChatDelayDuration, slowMode, slowModeWaitTime, subscriberMode, uniqueChatMode);
        }

        /// <summary>
        /// Serializes a <see cref="UpdateChatSettingsBody" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="updateChatSettingsBody"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, UpdateChatSettingsBody updateChatSettingsBody, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, updateChatSettingsBody, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="UpdateChatSettingsBody" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="updateChatSettingsBody"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, UpdateChatSettingsBody updateChatSettingsBody, JsonSerializerOptions jsonSerializerOptions)
        {
            if (updateChatSettingsBody.EmoteModeOption.IsSet)
                writer.WriteBoolean("emote_mode", updateChatSettingsBody.EmoteModeOption.Value!.Value);

            if (updateChatSettingsBody.FollowerModeOption.IsSet)
                writer.WriteBoolean("follower_mode", updateChatSettingsBody.FollowerModeOption.Value!.Value);

            if (updateChatSettingsBody.FollowerModeDurationOption.IsSet)
                writer.WriteNumber("follower_mode_duration", updateChatSettingsBody.FollowerModeDurationOption.Value!.Value);

            if (updateChatSettingsBody.NonModeratorChatDelayOption.IsSet)
                writer.WriteBoolean("non_moderator_chat_delay", updateChatSettingsBody.NonModeratorChatDelayOption.Value!.Value);

            if (updateChatSettingsBody.NonModeratorChatDelayDurationOption.IsSet)
                writer.WriteNumber("non_moderator_chat_delay_duration", UpdateChatSettingsBody.NonModeratorChatDelayDurationEnumToJsonValue(updateChatSettingsBody.NonModeratorChatDelayDurationOption.Value!.Value));

            if (updateChatSettingsBody.SlowModeOption.IsSet)
                writer.WriteBoolean("slow_mode", updateChatSettingsBody.SlowModeOption.Value!.Value);

            if (updateChatSettingsBody.SlowModeWaitTimeOption.IsSet)
                writer.WriteNumber("slow_mode_wait_time", updateChatSettingsBody.SlowModeWaitTimeOption.Value!.Value);

            if (updateChatSettingsBody.SubscriberModeOption.IsSet)
                writer.WriteBoolean("subscriber_mode", updateChatSettingsBody.SubscriberModeOption.Value!.Value);

            if (updateChatSettingsBody.UniqueChatModeOption.IsSet)
                writer.WriteBoolean("unique_chat_mode", updateChatSettingsBody.UniqueChatModeOption.Value!.Value);
        }
    }
}

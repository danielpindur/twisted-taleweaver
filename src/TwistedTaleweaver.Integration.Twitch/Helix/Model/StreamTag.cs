// <auto-generated>
/*
 * Twitch API Swagger UI (Unofficial)
 *
 * Unofficial Swagger UI for Twitch API.  All endpoints are generated automatically from the [twitch docs](https://dev.twitch.tv/docs/api/reference) page.  __Features:__  * Swagger UI for all Twitch API endpoints * Schemas for _Request Query Parameters_, _Request Body_, _Response Body_ * Some additional schemas like _Clip_, _ChatBadge_, _Prediction_, _Game_, _Channel_, _Video_ etc. * Response codes and examples * Generated types for TypeScript: [ts-twitch-api](https://github.com/DmitryScaletta/ts-twitch-api)  __Repository:__ [github.com/DmitryScaletta/twitch-api-swagger](https://github.com/DmitryScaletta/twitch-api-swagger)
 *
 * The version of the OpenAPI document: helix
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using TwistedTaleweaver.Integration.Twitch.Helix.Client;

namespace TwistedTaleweaver.Integration.Twitch.Helix.Model
{
    /// <summary>
    /// StreamTag
    /// </summary>
    public partial class StreamTag : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StreamTag" /> class.
        /// </summary>
        /// <param name="tagId">An ID that identifies this tag.</param>
        /// <param name="isAuto">A Boolean value that determines whether the tag is an automatic tag. An automatic tag is one that Twitch adds to the stream. Broadcasters may not add automatic tags to their channel. The value is **true** if the tag is an automatic tag; otherwise, **false**.</param>
        /// <param name="localizationNames">A dictionary that contains the localized names of the tag. The key is in the form, &lt;locale&gt;-&lt;coutry/region&gt;. For example, en-us. The value is the localized name.</param>
        /// <param name="localizationDescriptions">A dictionary that contains the localized descriptions of the tag. The key is in the form, &lt;locale&gt;-&lt;coutry/region&gt;. For example, en-us. The value is the localized description.</param>
        [JsonConstructor]
        public StreamTag(string tagId, bool isAuto, Dictionary<string, string> localizationNames, Dictionary<string, string> localizationDescriptions)
        {
            TagId = tagId;
            IsAuto = isAuto;
            LocalizationNames = localizationNames;
            LocalizationDescriptions = localizationDescriptions;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// An ID that identifies this tag.
        /// </summary>
        /// <value>An ID that identifies this tag.</value>
        [JsonPropertyName("tag_id")]
        public string TagId { get; set; }

        /// <summary>
        /// A Boolean value that determines whether the tag is an automatic tag. An automatic tag is one that Twitch adds to the stream. Broadcasters may not add automatic tags to their channel. The value is **true** if the tag is an automatic tag; otherwise, **false**.
        /// </summary>
        /// <value>A Boolean value that determines whether the tag is an automatic tag. An automatic tag is one that Twitch adds to the stream. Broadcasters may not add automatic tags to their channel. The value is **true** if the tag is an automatic tag; otherwise, **false**.</value>
        [JsonPropertyName("is_auto")]
        public bool IsAuto { get; set; }

        /// <summary>
        /// A dictionary that contains the localized names of the tag. The key is in the form, &lt;locale&gt;-&lt;coutry/region&gt;. For example, en-us. The value is the localized name.
        /// </summary>
        /// <value>A dictionary that contains the localized names of the tag. The key is in the form, &lt;locale&gt;-&lt;coutry/region&gt;. For example, en-us. The value is the localized name.</value>
        [JsonPropertyName("localization_names")]
        public Dictionary<string, string> LocalizationNames { get; set; }

        /// <summary>
        /// A dictionary that contains the localized descriptions of the tag. The key is in the form, &lt;locale&gt;-&lt;coutry/region&gt;. For example, en-us. The value is the localized description.
        /// </summary>
        /// <value>A dictionary that contains the localized descriptions of the tag. The key is in the form, &lt;locale&gt;-&lt;coutry/region&gt;. For example, en-us. The value is the localized description.</value>
        [JsonPropertyName("localization_descriptions")]
        public Dictionary<string, string> LocalizationDescriptions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StreamTag {\n");
            sb.Append("  TagId: ").Append(TagId).Append("\n");
            sb.Append("  IsAuto: ").Append(IsAuto).Append("\n");
            sb.Append("  LocalizationNames: ").Append(LocalizationNames).Append("\n");
            sb.Append("  LocalizationDescriptions: ").Append(LocalizationDescriptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="StreamTag" />
    /// </summary>
    public class StreamTagJsonConverter : JsonConverter<StreamTag>
    {
        /// <summary>
        /// Deserializes json to <see cref="StreamTag" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override StreamTag Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> tagId = default;
            Option<bool?> isAuto = default;
            Option<Dictionary<string, string>?> localizationNames = default;
            Option<Dictionary<string, string>?> localizationDescriptions = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "tag_id":
                            tagId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "is_auto":
                            isAuto = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "localization_names":
                            localizationNames = new Option<Dictionary<string, string>?>(JsonSerializer.Deserialize<Dictionary<string, string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "localization_descriptions":
                            localizationDescriptions = new Option<Dictionary<string, string>?>(JsonSerializer.Deserialize<Dictionary<string, string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!tagId.IsSet)
                throw new ArgumentException("Property is required for class StreamTag.", nameof(tagId));

            if (!isAuto.IsSet)
                throw new ArgumentException("Property is required for class StreamTag.", nameof(isAuto));

            if (!localizationNames.IsSet)
                throw new ArgumentException("Property is required for class StreamTag.", nameof(localizationNames));

            if (!localizationDescriptions.IsSet)
                throw new ArgumentException("Property is required for class StreamTag.", nameof(localizationDescriptions));

            if (tagId.IsSet && tagId.Value == null)
                throw new ArgumentNullException(nameof(tagId), "Property is not nullable for class StreamTag.");

            if (isAuto.IsSet && isAuto.Value == null)
                throw new ArgumentNullException(nameof(isAuto), "Property is not nullable for class StreamTag.");

            if (localizationNames.IsSet && localizationNames.Value == null)
                throw new ArgumentNullException(nameof(localizationNames), "Property is not nullable for class StreamTag.");

            if (localizationDescriptions.IsSet && localizationDescriptions.Value == null)
                throw new ArgumentNullException(nameof(localizationDescriptions), "Property is not nullable for class StreamTag.");

            return new StreamTag(tagId.Value!, isAuto.Value!.Value!, localizationNames.Value!, localizationDescriptions.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="StreamTag" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="streamTag"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, StreamTag streamTag, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, streamTag, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="StreamTag" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="streamTag"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, StreamTag streamTag, JsonSerializerOptions jsonSerializerOptions)
        {
            if (streamTag.TagId == null)
                throw new ArgumentNullException(nameof(streamTag.TagId), "Property is required for class StreamTag.");

            if (streamTag.LocalizationNames == null)
                throw new ArgumentNullException(nameof(streamTag.LocalizationNames), "Property is required for class StreamTag.");

            if (streamTag.LocalizationDescriptions == null)
                throw new ArgumentNullException(nameof(streamTag.LocalizationDescriptions), "Property is required for class StreamTag.");

            writer.WriteString("tag_id", streamTag.TagId);

            writer.WriteBoolean("is_auto", streamTag.IsAuto);

            writer.WritePropertyName("localization_names");
            JsonSerializer.Serialize(writer, streamTag.LocalizationNames, jsonSerializerOptions);
            writer.WritePropertyName("localization_descriptions");
            JsonSerializer.Serialize(writer, streamTag.LocalizationDescriptions, jsonSerializerOptions);
        }
    }
}

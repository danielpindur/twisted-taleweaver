// <auto-generated>
/*
 * Twitch API Swagger UI (Unofficial)
 *
 * Unofficial Swagger UI for Twitch API.  All endpoints are generated automatically from the [twitch docs](https://dev.twitch.tv/docs/api/reference) page.  __Features:__  * Swagger UI for all Twitch API endpoints * Schemas for _Request Query Parameters_, _Request Body_, _Response Body_ * Some additional schemas like _Clip_, _ChatBadge_, _Prediction_, _Game_, _Channel_, _Video_ etc. * Response codes and examples * Generated types for TypeScript: [ts-twitch-api](https://github.com/DmitryScaletta/ts-twitch-api)  __Repository:__ [github.com/DmitryScaletta/twitch-api-swagger](https://github.com/DmitryScaletta/twitch-api-swagger)
 *
 * The version of the OpenAPI document: helix
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using TwistedTaleweaver.Integration.Twitch.Helix.Client;

namespace TwistedTaleweaver.Integration.Twitch.Helix.Model
{
    /// <summary>
    /// GetSharedChatSessionResponseDataInner
    /// </summary>
    public partial class GetSharedChatSessionResponseDataInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetSharedChatSessionResponseDataInner" /> class.
        /// </summary>
        /// <param name="sessionId">The unique identifier for the shared chat session.</param>
        /// <param name="hostBroadcasterId">The User ID of the host channel.</param>
        /// <param name="participants">The list of participants in the session.</param>
        /// <param name="createdAt">The UTC date and time (in RFC3339 format) for when the session was created.</param>
        /// <param name="updatedAt">The UTC date and time (in RFC3339 format) for when the session was last updated.</param>
        [JsonConstructor]
        public GetSharedChatSessionResponseDataInner(string sessionId, string hostBroadcasterId, List<GetSharedChatSessionResponseDataInnerParticipantsInner> participants, DateTime createdAt, DateTime updatedAt)
        {
            SessionId = sessionId;
            HostBroadcasterId = hostBroadcasterId;
            Participants = participants;
            CreatedAt = createdAt;
            UpdatedAt = updatedAt;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The unique identifier for the shared chat session.
        /// </summary>
        /// <value>The unique identifier for the shared chat session.</value>
        [JsonPropertyName("session_id")]
        public string SessionId { get; set; }

        /// <summary>
        /// The User ID of the host channel.
        /// </summary>
        /// <value>The User ID of the host channel.</value>
        [JsonPropertyName("host_broadcaster_id")]
        public string HostBroadcasterId { get; set; }

        /// <summary>
        /// The list of participants in the session.
        /// </summary>
        /// <value>The list of participants in the session.</value>
        [JsonPropertyName("participants")]
        public List<GetSharedChatSessionResponseDataInnerParticipantsInner> Participants { get; set; }

        /// <summary>
        /// The UTC date and time (in RFC3339 format) for when the session was created.
        /// </summary>
        /// <value>The UTC date and time (in RFC3339 format) for when the session was created.</value>
        [JsonPropertyName("created_at")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// The UTC date and time (in RFC3339 format) for when the session was last updated.
        /// </summary>
        /// <value>The UTC date and time (in RFC3339 format) for when the session was last updated.</value>
        [JsonPropertyName("updated_at")]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetSharedChatSessionResponseDataInner {\n");
            sb.Append("  SessionId: ").Append(SessionId).Append("\n");
            sb.Append("  HostBroadcasterId: ").Append(HostBroadcasterId).Append("\n");
            sb.Append("  Participants: ").Append(Participants).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetSharedChatSessionResponseDataInner" />
    /// </summary>
    public class GetSharedChatSessionResponseDataInnerJsonConverter : JsonConverter<GetSharedChatSessionResponseDataInner>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UpdatedAt
        /// </summary>
        public static string UpdatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="GetSharedChatSessionResponseDataInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetSharedChatSessionResponseDataInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> sessionId = default;
            Option<string?> hostBroadcasterId = default;
            Option<List<GetSharedChatSessionResponseDataInnerParticipantsInner>?> participants = default;
            Option<DateTime?> createdAt = default;
            Option<DateTime?> updatedAt = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "session_id":
                            sessionId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "host_broadcaster_id":
                            hostBroadcasterId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "participants":
                            participants = new Option<List<GetSharedChatSessionResponseDataInnerParticipantsInner>?>(JsonSerializer.Deserialize<List<GetSharedChatSessionResponseDataInnerParticipantsInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "created_at":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "updated_at":
                            updatedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!sessionId.IsSet)
                throw new ArgumentException("Property is required for class GetSharedChatSessionResponseDataInner.", nameof(sessionId));

            if (!hostBroadcasterId.IsSet)
                throw new ArgumentException("Property is required for class GetSharedChatSessionResponseDataInner.", nameof(hostBroadcasterId));

            if (!participants.IsSet)
                throw new ArgumentException("Property is required for class GetSharedChatSessionResponseDataInner.", nameof(participants));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class GetSharedChatSessionResponseDataInner.", nameof(createdAt));

            if (!updatedAt.IsSet)
                throw new ArgumentException("Property is required for class GetSharedChatSessionResponseDataInner.", nameof(updatedAt));

            if (sessionId.IsSet && sessionId.Value == null)
                throw new ArgumentNullException(nameof(sessionId), "Property is not nullable for class GetSharedChatSessionResponseDataInner.");

            if (hostBroadcasterId.IsSet && hostBroadcasterId.Value == null)
                throw new ArgumentNullException(nameof(hostBroadcasterId), "Property is not nullable for class GetSharedChatSessionResponseDataInner.");

            if (participants.IsSet && participants.Value == null)
                throw new ArgumentNullException(nameof(participants), "Property is not nullable for class GetSharedChatSessionResponseDataInner.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class GetSharedChatSessionResponseDataInner.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class GetSharedChatSessionResponseDataInner.");

            return new GetSharedChatSessionResponseDataInner(sessionId.Value!, hostBroadcasterId.Value!, participants.Value!, createdAt.Value!.Value!, updatedAt.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="GetSharedChatSessionResponseDataInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getSharedChatSessionResponseDataInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetSharedChatSessionResponseDataInner getSharedChatSessionResponseDataInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getSharedChatSessionResponseDataInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetSharedChatSessionResponseDataInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getSharedChatSessionResponseDataInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetSharedChatSessionResponseDataInner getSharedChatSessionResponseDataInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getSharedChatSessionResponseDataInner.SessionId == null)
                throw new ArgumentNullException(nameof(getSharedChatSessionResponseDataInner.SessionId), "Property is required for class GetSharedChatSessionResponseDataInner.");

            if (getSharedChatSessionResponseDataInner.HostBroadcasterId == null)
                throw new ArgumentNullException(nameof(getSharedChatSessionResponseDataInner.HostBroadcasterId), "Property is required for class GetSharedChatSessionResponseDataInner.");

            if (getSharedChatSessionResponseDataInner.Participants == null)
                throw new ArgumentNullException(nameof(getSharedChatSessionResponseDataInner.Participants), "Property is required for class GetSharedChatSessionResponseDataInner.");

            writer.WriteString("session_id", getSharedChatSessionResponseDataInner.SessionId);

            writer.WriteString("host_broadcaster_id", getSharedChatSessionResponseDataInner.HostBroadcasterId);

            writer.WritePropertyName("participants");
            JsonSerializer.Serialize(writer, getSharedChatSessionResponseDataInner.Participants, jsonSerializerOptions);
            writer.WriteString("created_at", getSharedChatSessionResponseDataInner.CreatedAt.ToString(CreatedAtFormat));

            writer.WriteString("updated_at", getSharedChatSessionResponseDataInner.UpdatedAt.ToString(UpdatedAtFormat));
        }
    }
}

// <auto-generated>
/*
 * Twitch API Swagger UI (Unofficial)
 *
 * Unofficial Swagger UI for Twitch API.  All endpoints are generated automatically from the [twitch docs](https://dev.twitch.tv/docs/api/reference) page.  __Features:__  * Swagger UI for all Twitch API endpoints * Schemas for _Request Query Parameters_, _Request Body_, _Response Body_ * Some additional schemas like _Clip_, _ChatBadge_, _Prediction_, _Game_, _Channel_, _Video_ etc. * Response codes and examples * Generated types for TypeScript: [ts-twitch-api](https://github.com/DmitryScaletta/ts-twitch-api)  __Repository:__ [github.com/DmitryScaletta/twitch-api-swagger](https://github.com/DmitryScaletta/twitch-api-swagger)
 *
 * The version of the OpenAPI document: helix
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using TwistedTaleweaver.Integration.Twitch.Helix.Client;

namespace TwistedTaleweaver.Integration.Twitch.Helix.Model
{
    /// <summary>
    /// User
    /// </summary>
    public partial class User : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="User" /> class.
        /// </summary>
        /// <param name="id">An ID that identifies the user.</param>
        /// <param name="login">The user&#39;s login name.</param>
        /// <param name="displayName">The user&#39;s display name.</param>
        /// <param name="type">The type of user. Possible values are:      * admin — Twitch administrator * global\\_mod * staff — Twitch staff * \&quot;\&quot; — Normal user</param>
        /// <param name="broadcasterType">The type of broadcaster. Possible values are:      * affiliate — An [affiliate broadcaster](https://help.twitch.tv/s/article/joining-the-affiliate-program) * partner — A [partner broadcaster](https://help.twitch.tv/s/article/partner-program-overview) * \&quot;\&quot; — A normal broadcaster</param>
        /// <param name="description">The user&#39;s description of their channel.</param>
        /// <param name="profileImageUrl">A URL to the user&#39;s profile image.</param>
        /// <param name="offlineImageUrl">A URL to the user&#39;s offline image.</param>
        /// <param name="viewCount">The number of times the user&#39;s channel has been viewed.      **NOTE**: This field has been deprecated (see [Get Users API endpoint – \&quot;view\\_count\&quot; deprecation](https://discuss.dev.twitch.tv/t/get-users-api-endpoint-view-count-deprecation/37777)). Any data in this field is not valid and should not be used.</param>
        /// <param name="createdAt">The UTC date and time that the user&#39;s account was created. The timestamp is in RFC3339 format.</param>
        /// <param name="email">The user&#39;s verified email address. The object includes this field only if the user access token includes the **user:read:email** scope.      If the request contains more than one user, only the user associated with the access token that provided consent will include an email address — the email address for all other users will be empty.</param>
        [JsonConstructor]
        public User(string id, string login, string displayName, TypeEnum type, BroadcasterTypeEnum broadcasterType, string description, string profileImageUrl, string offlineImageUrl, int viewCount, DateTime createdAt, Option<string?> email = default)
        {
            Id = id;
            Login = login;
            DisplayName = displayName;
            Type = type;
            BroadcasterType = broadcasterType;
            Description = description;
            ProfileImageUrl = profileImageUrl;
            OfflineImageUrl = offlineImageUrl;
            ViewCount = viewCount;
            CreatedAt = createdAt;
            EmailOption = email;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The type of user. Possible values are:      * admin — Twitch administrator * global\\_mod * staff — Twitch staff * \&quot;\&quot; — Normal user
        /// </summary>
        /// <value>The type of user. Possible values are:      * admin — Twitch administrator * global\\_mod * staff — Twitch staff * \&quot;\&quot; — Normal user</value>
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Admin for value: admin
            /// </summary>
            Admin = 1,

            /// <summary>
            /// Enum GlobalMod for value: global_mod
            /// </summary>
            GlobalMod = 2,

            /// <summary>
            /// Enum Staff for value: staff
            /// </summary>
            Staff = 3,

            /// <summary>
            /// Enum Empty for value: 
            /// </summary>
            Empty = 4
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TypeEnum TypeEnumFromString(string value)
        {
            if (value.Equals("admin"))
                return TypeEnum.Admin;

            if (value.Equals("global_mod"))
                return TypeEnum.GlobalMod;

            if (value.Equals("staff"))
                return TypeEnum.Staff;

            if (value.Equals(""))
                return TypeEnum.Empty;

            throw new NotImplementedException($"Could not convert value to type TypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TypeEnum? TypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("admin"))
                return TypeEnum.Admin;

            if (value.Equals("global_mod"))
                return TypeEnum.GlobalMod;

            if (value.Equals("staff"))
                return TypeEnum.Staff;

            if (value.Equals(""))
                return TypeEnum.Empty;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TypeEnumToJsonValue(TypeEnum value)
        {
            if (value == TypeEnum.Admin)
                return "admin";

            if (value == TypeEnum.GlobalMod)
                return "global_mod";

            if (value == TypeEnum.Staff)
                return "staff";

            if (value == TypeEnum.Empty)
                return "";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// The type of user. Possible values are:      * admin — Twitch administrator * global\\_mod * staff — Twitch staff * \&quot;\&quot; — Normal user
        /// </summary>
        /// <value>The type of user. Possible values are:      * admin — Twitch administrator * global\\_mod * staff — Twitch staff * \&quot;\&quot; — Normal user</value>
        [JsonPropertyName("type")]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// The type of broadcaster. Possible values are:      * affiliate — An [affiliate broadcaster](https://help.twitch.tv/s/article/joining-the-affiliate-program) * partner — A [partner broadcaster](https://help.twitch.tv/s/article/partner-program-overview) * \&quot;\&quot; — A normal broadcaster
        /// </summary>
        /// <value>The type of broadcaster. Possible values are:      * affiliate — An [affiliate broadcaster](https://help.twitch.tv/s/article/joining-the-affiliate-program) * partner — A [partner broadcaster](https://help.twitch.tv/s/article/partner-program-overview) * \&quot;\&quot; — A normal broadcaster</value>
        public enum BroadcasterTypeEnum
        {
            /// <summary>
            /// Enum Affiliate for value: affiliate
            /// </summary>
            Affiliate = 1,

            /// <summary>
            /// Enum Partner for value: partner
            /// </summary>
            Partner = 2,

            /// <summary>
            /// Enum Empty for value: 
            /// </summary>
            Empty = 3
        }

        /// <summary>
        /// Returns a <see cref="BroadcasterTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static BroadcasterTypeEnum BroadcasterTypeEnumFromString(string value)
        {
            if (value.Equals("affiliate"))
                return BroadcasterTypeEnum.Affiliate;

            if (value.Equals("partner"))
                return BroadcasterTypeEnum.Partner;

            if (value.Equals(""))
                return BroadcasterTypeEnum.Empty;

            throw new NotImplementedException($"Could not convert value to type BroadcasterTypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="BroadcasterTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static BroadcasterTypeEnum? BroadcasterTypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("affiliate"))
                return BroadcasterTypeEnum.Affiliate;

            if (value.Equals("partner"))
                return BroadcasterTypeEnum.Partner;

            if (value.Equals(""))
                return BroadcasterTypeEnum.Empty;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="BroadcasterTypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string BroadcasterTypeEnumToJsonValue(BroadcasterTypeEnum value)
        {
            if (value == BroadcasterTypeEnum.Affiliate)
                return "affiliate";

            if (value == BroadcasterTypeEnum.Partner)
                return "partner";

            if (value == BroadcasterTypeEnum.Empty)
                return "";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// The type of broadcaster. Possible values are:      * affiliate — An [affiliate broadcaster](https://help.twitch.tv/s/article/joining-the-affiliate-program) * partner — A [partner broadcaster](https://help.twitch.tv/s/article/partner-program-overview) * \&quot;\&quot; — A normal broadcaster
        /// </summary>
        /// <value>The type of broadcaster. Possible values are:      * affiliate — An [affiliate broadcaster](https://help.twitch.tv/s/article/joining-the-affiliate-program) * partner — A [partner broadcaster](https://help.twitch.tv/s/article/partner-program-overview) * \&quot;\&quot; — A normal broadcaster</value>
        [JsonPropertyName("broadcaster_type")]
        public BroadcasterTypeEnum BroadcasterType { get; set; }

        /// <summary>
        /// An ID that identifies the user.
        /// </summary>
        /// <value>An ID that identifies the user.</value>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// The user&#39;s login name.
        /// </summary>
        /// <value>The user&#39;s login name.</value>
        [JsonPropertyName("login")]
        public string Login { get; set; }

        /// <summary>
        /// The user&#39;s display name.
        /// </summary>
        /// <value>The user&#39;s display name.</value>
        [JsonPropertyName("display_name")]
        public string DisplayName { get; set; }

        /// <summary>
        /// The user&#39;s description of their channel.
        /// </summary>
        /// <value>The user&#39;s description of their channel.</value>
        [JsonPropertyName("description")]
        public string Description { get; set; }

        /// <summary>
        /// A URL to the user&#39;s profile image.
        /// </summary>
        /// <value>A URL to the user&#39;s profile image.</value>
        [JsonPropertyName("profile_image_url")]
        public string ProfileImageUrl { get; set; }

        /// <summary>
        /// A URL to the user&#39;s offline image.
        /// </summary>
        /// <value>A URL to the user&#39;s offline image.</value>
        [JsonPropertyName("offline_image_url")]
        public string OfflineImageUrl { get; set; }

        /// <summary>
        /// The number of times the user&#39;s channel has been viewed.      **NOTE**: This field has been deprecated (see [Get Users API endpoint – \&quot;view\\_count\&quot; deprecation](https://discuss.dev.twitch.tv/t/get-users-api-endpoint-view-count-deprecation/37777)). Any data in this field is not valid and should not be used.
        /// </summary>
        /// <value>The number of times the user&#39;s channel has been viewed.      **NOTE**: This field has been deprecated (see [Get Users API endpoint – \&quot;view\\_count\&quot; deprecation](https://discuss.dev.twitch.tv/t/get-users-api-endpoint-view-count-deprecation/37777)). Any data in this field is not valid and should not be used.</value>
        [JsonPropertyName("view_count")]
        public int ViewCount { get; set; }

        /// <summary>
        /// The UTC date and time that the user&#39;s account was created. The timestamp is in RFC3339 format.
        /// </summary>
        /// <value>The UTC date and time that the user&#39;s account was created. The timestamp is in RFC3339 format.</value>
        [JsonPropertyName("created_at")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Used to track the state of Email
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EmailOption { get; private set; }

        /// <summary>
        /// The user&#39;s verified email address. The object includes this field only if the user access token includes the **user:read:email** scope.      If the request contains more than one user, only the user associated with the access token that provided consent will include an email address — the email address for all other users will be empty.
        /// </summary>
        /// <value>The user&#39;s verified email address. The object includes this field only if the user access token includes the **user:read:email** scope.      If the request contains more than one user, only the user associated with the access token that provided consent will include an email address — the email address for all other users will be empty.</value>
        [JsonPropertyName("email")]
        public string? Email { get { return this.EmailOption; } set { this.EmailOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class User {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Login: ").Append(Login).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  BroadcasterType: ").Append(BroadcasterType).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ProfileImageUrl: ").Append(ProfileImageUrl).Append("\n");
            sb.Append("  OfflineImageUrl: ").Append(OfflineImageUrl).Append("\n");
            sb.Append("  ViewCount: ").Append(ViewCount).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="User" />
    /// </summary>
    public class UserJsonConverter : JsonConverter<User>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="User" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override User Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> login = default;
            Option<string?> displayName = default;
            Option<User.TypeEnum?> type = default;
            Option<User.BroadcasterTypeEnum?> broadcasterType = default;
            Option<string?> description = default;
            Option<string?> profileImageUrl = default;
            Option<string?> offlineImageUrl = default;
            Option<int?> viewCount = default;
            Option<DateTime?> createdAt = default;
            Option<string?> email = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "login":
                            login = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "display_name":
                            displayName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<User.TypeEnum?>(User.TypeEnumFromStringOrDefault(typeRawValue));
                            break;
                        case "broadcaster_type":
                            string? broadcasterTypeRawValue = utf8JsonReader.GetString();
                            if (broadcasterTypeRawValue != null)
                                broadcasterType = new Option<User.BroadcasterTypeEnum?>(User.BroadcasterTypeEnumFromStringOrDefault(broadcasterTypeRawValue));
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "profile_image_url":
                            profileImageUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "offline_image_url":
                            offlineImageUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "view_count":
                            viewCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "created_at":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "email":
                            email = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class User.", nameof(id));

            if (!login.IsSet)
                throw new ArgumentException("Property is required for class User.", nameof(login));

            if (!displayName.IsSet)
                throw new ArgumentException("Property is required for class User.", nameof(displayName));

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class User.", nameof(type));

            if (!broadcasterType.IsSet)
                throw new ArgumentException("Property is required for class User.", nameof(broadcasterType));

            if (!description.IsSet)
                throw new ArgumentException("Property is required for class User.", nameof(description));

            if (!profileImageUrl.IsSet)
                throw new ArgumentException("Property is required for class User.", nameof(profileImageUrl));

            if (!offlineImageUrl.IsSet)
                throw new ArgumentException("Property is required for class User.", nameof(offlineImageUrl));

            if (!viewCount.IsSet)
                throw new ArgumentException("Property is required for class User.", nameof(viewCount));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class User.", nameof(createdAt));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class User.");

            if (login.IsSet && login.Value == null)
                throw new ArgumentNullException(nameof(login), "Property is not nullable for class User.");

            if (displayName.IsSet && displayName.Value == null)
                throw new ArgumentNullException(nameof(displayName), "Property is not nullable for class User.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class User.");

            if (broadcasterType.IsSet && broadcasterType.Value == null)
                throw new ArgumentNullException(nameof(broadcasterType), "Property is not nullable for class User.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class User.");

            if (profileImageUrl.IsSet && profileImageUrl.Value == null)
                throw new ArgumentNullException(nameof(profileImageUrl), "Property is not nullable for class User.");

            if (offlineImageUrl.IsSet && offlineImageUrl.Value == null)
                throw new ArgumentNullException(nameof(offlineImageUrl), "Property is not nullable for class User.");

            if (viewCount.IsSet && viewCount.Value == null)
                throw new ArgumentNullException(nameof(viewCount), "Property is not nullable for class User.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class User.");

            if (email.IsSet && email.Value == null)
                throw new ArgumentNullException(nameof(email), "Property is not nullable for class User.");

            return new User(id.Value!, login.Value!, displayName.Value!, type.Value!.Value!, broadcasterType.Value!.Value!, description.Value!, profileImageUrl.Value!, offlineImageUrl.Value!, viewCount.Value!.Value!, createdAt.Value!.Value!, email);
        }

        /// <summary>
        /// Serializes a <see cref="User" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="user"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, User user, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, user, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="User" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="user"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, User user, JsonSerializerOptions jsonSerializerOptions)
        {
            if (user.Id == null)
                throw new ArgumentNullException(nameof(user.Id), "Property is required for class User.");

            if (user.Login == null)
                throw new ArgumentNullException(nameof(user.Login), "Property is required for class User.");

            if (user.DisplayName == null)
                throw new ArgumentNullException(nameof(user.DisplayName), "Property is required for class User.");

            if (user.Description == null)
                throw new ArgumentNullException(nameof(user.Description), "Property is required for class User.");

            if (user.ProfileImageUrl == null)
                throw new ArgumentNullException(nameof(user.ProfileImageUrl), "Property is required for class User.");

            if (user.OfflineImageUrl == null)
                throw new ArgumentNullException(nameof(user.OfflineImageUrl), "Property is required for class User.");

            if (user.EmailOption.IsSet && user.Email == null)
                throw new ArgumentNullException(nameof(user.Email), "Property is required for class User.");

            writer.WriteString("id", user.Id);

            writer.WriteString("login", user.Login);

            writer.WriteString("display_name", user.DisplayName);

            var typeRawValue = User.TypeEnumToJsonValue(user.Type);
            writer.WriteString("type", typeRawValue);
            var broadcasterTypeRawValue = User.BroadcasterTypeEnumToJsonValue(user.BroadcasterType);
            writer.WriteString("broadcaster_type", broadcasterTypeRawValue);
            writer.WriteString("description", user.Description);

            writer.WriteString("profile_image_url", user.ProfileImageUrl);

            writer.WriteString("offline_image_url", user.OfflineImageUrl);

            writer.WriteNumber("view_count", user.ViewCount);

            writer.WriteString("created_at", user.CreatedAt.ToString(CreatedAtFormat));

            if (user.EmailOption.IsSet)
                writer.WriteString("email", user.Email);
        }
    }
}

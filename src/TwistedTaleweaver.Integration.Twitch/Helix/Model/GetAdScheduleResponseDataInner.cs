// <auto-generated>
/*
 * Twitch API Swagger UI (Unofficial)
 *
 * Unofficial Swagger UI for Twitch API.  All endpoints are generated automatically from the [twitch docs](https://dev.twitch.tv/docs/api/reference) page.  __Features:__  * Swagger UI for all Twitch API endpoints * Schemas for _Request Query Parameters_, _Request Body_, _Response Body_ * Some additional schemas like _Clip_, _ChatBadge_, _Prediction_, _Game_, _Channel_, _Video_ etc. * Response codes and examples * Generated types for TypeScript: [ts-twitch-api](https://github.com/DmitryScaletta/ts-twitch-api)  __Repository:__ [github.com/DmitryScaletta/twitch-api-swagger](https://github.com/DmitryScaletta/twitch-api-swagger)
 *
 * The version of the OpenAPI document: helix
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using TwistedTaleweaver.Integration.Twitch.Helix.Client;

namespace TwistedTaleweaver.Integration.Twitch.Helix.Model
{
    /// <summary>
    /// GetAdScheduleResponseDataInner
    /// </summary>
    public partial class GetAdScheduleResponseDataInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetAdScheduleResponseDataInner" /> class.
        /// </summary>
        /// <param name="snoozeCount">The number of snoozes available for the broadcaster.</param>
        /// <param name="snoozeRefreshAt">The UTC timestamp when the broadcaster will gain an additional snooze, in RFC3339 format.</param>
        /// <param name="nextAdAt">The UTC timestamp of the broadcaster’s next scheduled ad, in RFC3339 format. Empty if the channel has no ad scheduled or is not live.</param>
        /// <param name="duration">The length in seconds of the scheduled upcoming ad break.</param>
        /// <param name="lastAdAt">The UTC timestamp of the broadcaster’s last ad-break, in RFC3339 format. Empty if the channel has not run an ad or is not live.</param>
        /// <param name="prerollFreeTime">The amount of pre-roll free time remaining for the channel in seconds. Returns 0 if they are currently not pre-roll free.</param>
        [JsonConstructor]
        public GetAdScheduleResponseDataInner(int snoozeCount, DateTime snoozeRefreshAt, DateTime nextAdAt, int duration, DateTime lastAdAt, int prerollFreeTime)
        {
            SnoozeCount = snoozeCount;
            SnoozeRefreshAt = snoozeRefreshAt;
            NextAdAt = nextAdAt;
            Duration = duration;
            LastAdAt = lastAdAt;
            PrerollFreeTime = prerollFreeTime;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The number of snoozes available for the broadcaster.
        /// </summary>
        /// <value>The number of snoozes available for the broadcaster.</value>
        [JsonPropertyName("snooze_count")]
        public int SnoozeCount { get; set; }

        /// <summary>
        /// The UTC timestamp when the broadcaster will gain an additional snooze, in RFC3339 format.
        /// </summary>
        /// <value>The UTC timestamp when the broadcaster will gain an additional snooze, in RFC3339 format.</value>
        [JsonPropertyName("snooze_refresh_at")]
        public DateTime SnoozeRefreshAt { get; set; }

        /// <summary>
        /// The UTC timestamp of the broadcaster’s next scheduled ad, in RFC3339 format. Empty if the channel has no ad scheduled or is not live.
        /// </summary>
        /// <value>The UTC timestamp of the broadcaster’s next scheduled ad, in RFC3339 format. Empty if the channel has no ad scheduled or is not live.</value>
        [JsonPropertyName("next_ad_at")]
        public DateTime NextAdAt { get; set; }

        /// <summary>
        /// The length in seconds of the scheduled upcoming ad break.
        /// </summary>
        /// <value>The length in seconds of the scheduled upcoming ad break.</value>
        [JsonPropertyName("duration")]
        public int Duration { get; set; }

        /// <summary>
        /// The UTC timestamp of the broadcaster’s last ad-break, in RFC3339 format. Empty if the channel has not run an ad or is not live.
        /// </summary>
        /// <value>The UTC timestamp of the broadcaster’s last ad-break, in RFC3339 format. Empty if the channel has not run an ad or is not live.</value>
        [JsonPropertyName("last_ad_at")]
        public DateTime LastAdAt { get; set; }

        /// <summary>
        /// The amount of pre-roll free time remaining for the channel in seconds. Returns 0 if they are currently not pre-roll free.
        /// </summary>
        /// <value>The amount of pre-roll free time remaining for the channel in seconds. Returns 0 if they are currently not pre-roll free.</value>
        [JsonPropertyName("preroll_free_time")]
        public int PrerollFreeTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetAdScheduleResponseDataInner {\n");
            sb.Append("  SnoozeCount: ").Append(SnoozeCount).Append("\n");
            sb.Append("  SnoozeRefreshAt: ").Append(SnoozeRefreshAt).Append("\n");
            sb.Append("  NextAdAt: ").Append(NextAdAt).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  LastAdAt: ").Append(LastAdAt).Append("\n");
            sb.Append("  PrerollFreeTime: ").Append(PrerollFreeTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetAdScheduleResponseDataInner" />
    /// </summary>
    public class GetAdScheduleResponseDataInnerJsonConverter : JsonConverter<GetAdScheduleResponseDataInner>
    {
        /// <summary>
        /// The format to use to serialize SnoozeRefreshAt
        /// </summary>
        public static string SnoozeRefreshAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize NextAdAt
        /// </summary>
        public static string NextAdAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize LastAdAt
        /// </summary>
        public static string LastAdAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="GetAdScheduleResponseDataInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetAdScheduleResponseDataInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> snoozeCount = default;
            Option<DateTime?> snoozeRefreshAt = default;
            Option<DateTime?> nextAdAt = default;
            Option<int?> duration = default;
            Option<DateTime?> lastAdAt = default;
            Option<int?> prerollFreeTime = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "snooze_count":
                            snoozeCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "snooze_refresh_at":
                            snoozeRefreshAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "next_ad_at":
                            nextAdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "duration":
                            duration = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "last_ad_at":
                            lastAdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "preroll_free_time":
                            prerollFreeTime = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!snoozeCount.IsSet)
                throw new ArgumentException("Property is required for class GetAdScheduleResponseDataInner.", nameof(snoozeCount));

            if (!snoozeRefreshAt.IsSet)
                throw new ArgumentException("Property is required for class GetAdScheduleResponseDataInner.", nameof(snoozeRefreshAt));

            if (!nextAdAt.IsSet)
                throw new ArgumentException("Property is required for class GetAdScheduleResponseDataInner.", nameof(nextAdAt));

            if (!duration.IsSet)
                throw new ArgumentException("Property is required for class GetAdScheduleResponseDataInner.", nameof(duration));

            if (!lastAdAt.IsSet)
                throw new ArgumentException("Property is required for class GetAdScheduleResponseDataInner.", nameof(lastAdAt));

            if (!prerollFreeTime.IsSet)
                throw new ArgumentException("Property is required for class GetAdScheduleResponseDataInner.", nameof(prerollFreeTime));

            if (snoozeCount.IsSet && snoozeCount.Value == null)
                throw new ArgumentNullException(nameof(snoozeCount), "Property is not nullable for class GetAdScheduleResponseDataInner.");

            if (snoozeRefreshAt.IsSet && snoozeRefreshAt.Value == null)
                throw new ArgumentNullException(nameof(snoozeRefreshAt), "Property is not nullable for class GetAdScheduleResponseDataInner.");

            if (nextAdAt.IsSet && nextAdAt.Value == null)
                throw new ArgumentNullException(nameof(nextAdAt), "Property is not nullable for class GetAdScheduleResponseDataInner.");

            if (duration.IsSet && duration.Value == null)
                throw new ArgumentNullException(nameof(duration), "Property is not nullable for class GetAdScheduleResponseDataInner.");

            if (lastAdAt.IsSet && lastAdAt.Value == null)
                throw new ArgumentNullException(nameof(lastAdAt), "Property is not nullable for class GetAdScheduleResponseDataInner.");

            if (prerollFreeTime.IsSet && prerollFreeTime.Value == null)
                throw new ArgumentNullException(nameof(prerollFreeTime), "Property is not nullable for class GetAdScheduleResponseDataInner.");

            return new GetAdScheduleResponseDataInner(snoozeCount.Value!.Value!, snoozeRefreshAt.Value!.Value!, nextAdAt.Value!.Value!, duration.Value!.Value!, lastAdAt.Value!.Value!, prerollFreeTime.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="GetAdScheduleResponseDataInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getAdScheduleResponseDataInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetAdScheduleResponseDataInner getAdScheduleResponseDataInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getAdScheduleResponseDataInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetAdScheduleResponseDataInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getAdScheduleResponseDataInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetAdScheduleResponseDataInner getAdScheduleResponseDataInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteNumber("snooze_count", getAdScheduleResponseDataInner.SnoozeCount);

            writer.WriteString("snooze_refresh_at", getAdScheduleResponseDataInner.SnoozeRefreshAt.ToString(SnoozeRefreshAtFormat));

            writer.WriteString("next_ad_at", getAdScheduleResponseDataInner.NextAdAt.ToString(NextAdAtFormat));

            writer.WriteNumber("duration", getAdScheduleResponseDataInner.Duration);

            writer.WriteString("last_ad_at", getAdScheduleResponseDataInner.LastAdAt.ToString(LastAdAtFormat));

            writer.WriteNumber("preroll_free_time", getAdScheduleResponseDataInner.PrerollFreeTime);
        }
    }
}

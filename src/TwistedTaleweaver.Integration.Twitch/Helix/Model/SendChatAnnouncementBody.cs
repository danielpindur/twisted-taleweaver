// <auto-generated>
/*
 * Twitch API Swagger UI (Unofficial)
 *
 * Unofficial Swagger UI for Twitch API.  All endpoints are generated automatically from the [twitch docs](https://dev.twitch.tv/docs/api/reference) page.  __Features:__  * Swagger UI for all Twitch API endpoints * Schemas for _Request Query Parameters_, _Request Body_, _Response Body_ * Some additional schemas like _Clip_, _ChatBadge_, _Prediction_, _Game_, _Channel_, _Video_ etc. * Response codes and examples * Generated types for TypeScript: [ts-twitch-api](https://github.com/DmitryScaletta/ts-twitch-api)  __Repository:__ [github.com/DmitryScaletta/twitch-api-swagger](https://github.com/DmitryScaletta/twitch-api-swagger)
 *
 * The version of the OpenAPI document: helix
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using TwistedTaleweaver.Integration.Twitch.Helix.Client;

namespace TwistedTaleweaver.Integration.Twitch.Helix.Model
{
    /// <summary>
    /// SendChatAnnouncementBody
    /// </summary>
    public partial class SendChatAnnouncementBody : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SendChatAnnouncementBody" /> class.
        /// </summary>
        /// <param name="message">The announcement to make in the broadcaster’s chat room. Announcements are limited to a maximum of 500 characters; announcements longer than 500 characters are truncated.</param>
        /// <param name="color">The color used to highlight the announcement. Possible case-sensitive values are:      * blue * green * orange * purple * primary (default)    If &#x60;color&#x60; is set to _primary_ or is not set, the channel’s accent color is used to highlight the announcement (see **Profile Accent Color** under [profile settings](https://www.twitch.tv/settings/profile), **Channel and Videos**, and **Brand**).</param>
        [JsonConstructor]
        public SendChatAnnouncementBody(string message, Option<ColorEnum?> color = default)
        {
            Message = message;
            ColorOption = color;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The color used to highlight the announcement. Possible case-sensitive values are:      * blue * green * orange * purple * primary (default)    If &#x60;color&#x60; is set to _primary_ or is not set, the channel’s accent color is used to highlight the announcement (see **Profile Accent Color** under [profile settings](https://www.twitch.tv/settings/profile), **Channel and Videos**, and **Brand**).
        /// </summary>
        /// <value>The color used to highlight the announcement. Possible case-sensitive values are:      * blue * green * orange * purple * primary (default)    If &#x60;color&#x60; is set to _primary_ or is not set, the channel’s accent color is used to highlight the announcement (see **Profile Accent Color** under [profile settings](https://www.twitch.tv/settings/profile), **Channel and Videos**, and **Brand**).</value>
        public enum ColorEnum
        {
            /// <summary>
            /// Enum Blue for value: blue
            /// </summary>
            Blue = 1,

            /// <summary>
            /// Enum Green for value: green
            /// </summary>
            Green = 2,

            /// <summary>
            /// Enum Orange for value: orange
            /// </summary>
            Orange = 3,

            /// <summary>
            /// Enum Purple for value: purple
            /// </summary>
            Purple = 4,

            /// <summary>
            /// Enum Primarydefault for value: primary (default)
            /// </summary>
            Primarydefault = 5
        }

        /// <summary>
        /// Returns a <see cref="ColorEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ColorEnum ColorEnumFromString(string value)
        {
            if (value.Equals("blue"))
                return ColorEnum.Blue;

            if (value.Equals("green"))
                return ColorEnum.Green;

            if (value.Equals("orange"))
                return ColorEnum.Orange;

            if (value.Equals("purple"))
                return ColorEnum.Purple;

            if (value.Equals("primary (default)"))
                return ColorEnum.Primarydefault;

            throw new NotImplementedException($"Could not convert value to type ColorEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ColorEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ColorEnum? ColorEnumFromStringOrDefault(string value)
        {
            if (value.Equals("blue"))
                return ColorEnum.Blue;

            if (value.Equals("green"))
                return ColorEnum.Green;

            if (value.Equals("orange"))
                return ColorEnum.Orange;

            if (value.Equals("purple"))
                return ColorEnum.Purple;

            if (value.Equals("primary (default)"))
                return ColorEnum.Primarydefault;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ColorEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ColorEnumToJsonValue(ColorEnum? value)
        {
            if (value == ColorEnum.Blue)
                return "blue";

            if (value == ColorEnum.Green)
                return "green";

            if (value == ColorEnum.Orange)
                return "orange";

            if (value == ColorEnum.Purple)
                return "purple";

            if (value == ColorEnum.Primarydefault)
                return "primary (default)";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Color
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ColorEnum?> ColorOption { get; private set; }

        /// <summary>
        /// The color used to highlight the announcement. Possible case-sensitive values are:      * blue * green * orange * purple * primary (default)    If &#x60;color&#x60; is set to _primary_ or is not set, the channel’s accent color is used to highlight the announcement (see **Profile Accent Color** under [profile settings](https://www.twitch.tv/settings/profile), **Channel and Videos**, and **Brand**).
        /// </summary>
        /// <value>The color used to highlight the announcement. Possible case-sensitive values are:      * blue * green * orange * purple * primary (default)    If &#x60;color&#x60; is set to _primary_ or is not set, the channel’s accent color is used to highlight the announcement (see **Profile Accent Color** under [profile settings](https://www.twitch.tv/settings/profile), **Channel and Videos**, and **Brand**).</value>
        [JsonPropertyName("color")]
        public ColorEnum? Color { get { return this.ColorOption; } set { this.ColorOption = new(value); } }

        /// <summary>
        /// The announcement to make in the broadcaster’s chat room. Announcements are limited to a maximum of 500 characters; announcements longer than 500 characters are truncated.
        /// </summary>
        /// <value>The announcement to make in the broadcaster’s chat room. Announcements are limited to a maximum of 500 characters; announcements longer than 500 characters are truncated.</value>
        [JsonPropertyName("message")]
        public string Message { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SendChatAnnouncementBody {\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SendChatAnnouncementBody" />
    /// </summary>
    public class SendChatAnnouncementBodyJsonConverter : JsonConverter<SendChatAnnouncementBody>
    {
        /// <summary>
        /// Deserializes json to <see cref="SendChatAnnouncementBody" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SendChatAnnouncementBody Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> message = default;
            Option<SendChatAnnouncementBody.ColorEnum?> color = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "message":
                            message = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "color":
                            string? colorRawValue = utf8JsonReader.GetString();
                            if (colorRawValue != null)
                                color = new Option<SendChatAnnouncementBody.ColorEnum?>(SendChatAnnouncementBody.ColorEnumFromStringOrDefault(colorRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!message.IsSet)
                throw new ArgumentException("Property is required for class SendChatAnnouncementBody.", nameof(message));

            if (message.IsSet && message.Value == null)
                throw new ArgumentNullException(nameof(message), "Property is not nullable for class SendChatAnnouncementBody.");

            if (color.IsSet && color.Value == null)
                throw new ArgumentNullException(nameof(color), "Property is not nullable for class SendChatAnnouncementBody.");

            return new SendChatAnnouncementBody(message.Value!, color);
        }

        /// <summary>
        /// Serializes a <see cref="SendChatAnnouncementBody" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="sendChatAnnouncementBody"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SendChatAnnouncementBody sendChatAnnouncementBody, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, sendChatAnnouncementBody, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SendChatAnnouncementBody" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="sendChatAnnouncementBody"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SendChatAnnouncementBody sendChatAnnouncementBody, JsonSerializerOptions jsonSerializerOptions)
        {
            if (sendChatAnnouncementBody.Message == null)
                throw new ArgumentNullException(nameof(sendChatAnnouncementBody.Message), "Property is required for class SendChatAnnouncementBody.");

            writer.WriteString("message", sendChatAnnouncementBody.Message);

            var colorRawValue = SendChatAnnouncementBody.ColorEnumToJsonValue(sendChatAnnouncementBody.ColorOption.Value!.Value);
            writer.WriteString("color", colorRawValue);
        }
    }
}

// <auto-generated>
/*
 * Twitch API Swagger UI (Unofficial)
 *
 * Unofficial Swagger UI for Twitch API.  All endpoints are generated automatically from the [twitch docs](https://dev.twitch.tv/docs/api/reference) page.  __Features:__  * Swagger UI for all Twitch API endpoints * Schemas for _Request Query Parameters_, _Request Body_, _Response Body_ * Some additional schemas like _Clip_, _ChatBadge_, _Prediction_, _Game_, _Channel_, _Video_ etc. * Response codes and examples * Generated types for TypeScript: [ts-twitch-api](https://github.com/DmitryScaletta/ts-twitch-api)  __Repository:__ [github.com/DmitryScaletta/twitch-api-swagger](https://github.com/DmitryScaletta/twitch-api-swagger)
 *
 * The version of the OpenAPI document: helix
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using TwistedTaleweaver.Integration.Twitch.Helix.Client;

namespace TwistedTaleweaver.Integration.Twitch.Helix.Model
{
    /// <summary>
    /// CheermoteImageFormat
    /// </summary>
    public partial class CheermoteImageFormat : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CheermoteImageFormat" /> class.
        /// </summary>
        /// <param name="var1">var1</param>
        /// <param name="var2">var2</param>
        /// <param name="var3">var3</param>
        /// <param name="var4">var4</param>
        /// <param name="var15">var15</param>
        [JsonConstructor]
        public CheermoteImageFormat(Option<string?> var1 = default, Option<string?> var2 = default, Option<string?> var3 = default, Option<string?> var4 = default, Option<string?> var15 = default)
        {
            Var1Option = var1;
            Var2Option = var2;
            Var3Option = var3;
            Var4Option = var4;
            Var15Option = var15;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Var1
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> Var1Option { get; private set; }

        /// <summary>
        /// Gets or Sets Var1
        /// </summary>
        [JsonPropertyName("1")]
        public string? Var1 { get { return this.Var1Option; } set { this.Var1Option = new(value); } }

        /// <summary>
        /// Used to track the state of Var2
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> Var2Option { get; private set; }

        /// <summary>
        /// Gets or Sets Var2
        /// </summary>
        [JsonPropertyName("2")]
        public string? Var2 { get { return this.Var2Option; } set { this.Var2Option = new(value); } }

        /// <summary>
        /// Used to track the state of Var3
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> Var3Option { get; private set; }

        /// <summary>
        /// Gets or Sets Var3
        /// </summary>
        [JsonPropertyName("3")]
        public string? Var3 { get { return this.Var3Option; } set { this.Var3Option = new(value); } }

        /// <summary>
        /// Used to track the state of Var4
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> Var4Option { get; private set; }

        /// <summary>
        /// Gets or Sets Var4
        /// </summary>
        [JsonPropertyName("4")]
        public string? Var4 { get { return this.Var4Option; } set { this.Var4Option = new(value); } }

        /// <summary>
        /// Used to track the state of Var15
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> Var15Option { get; private set; }

        /// <summary>
        /// Gets or Sets Var15
        /// </summary>
        [JsonPropertyName("1.5")]
        public string? Var15 { get { return this.Var15Option; } set { this.Var15Option = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CheermoteImageFormat {\n");
            sb.Append("  Var1: ").Append(Var1).Append("\n");
            sb.Append("  Var2: ").Append(Var2).Append("\n");
            sb.Append("  Var3: ").Append(Var3).Append("\n");
            sb.Append("  Var4: ").Append(Var4).Append("\n");
            sb.Append("  Var15: ").Append(Var15).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CheermoteImageFormat" />
    /// </summary>
    public class CheermoteImageFormatJsonConverter : JsonConverter<CheermoteImageFormat>
    {
        /// <summary>
        /// Deserializes json to <see cref="CheermoteImageFormat" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CheermoteImageFormat Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> var1 = default;
            Option<string?> var2 = default;
            Option<string?> var3 = default;
            Option<string?> var4 = default;
            Option<string?> var15 = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "1":
                            var1 = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "2":
                            var2 = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "3":
                            var3 = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "4":
                            var4 = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "1.5":
                            var15 = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (var1.IsSet && var1.Value == null)
                throw new ArgumentNullException(nameof(var1), "Property is not nullable for class CheermoteImageFormat.");

            if (var2.IsSet && var2.Value == null)
                throw new ArgumentNullException(nameof(var2), "Property is not nullable for class CheermoteImageFormat.");

            if (var3.IsSet && var3.Value == null)
                throw new ArgumentNullException(nameof(var3), "Property is not nullable for class CheermoteImageFormat.");

            if (var4.IsSet && var4.Value == null)
                throw new ArgumentNullException(nameof(var4), "Property is not nullable for class CheermoteImageFormat.");

            if (var15.IsSet && var15.Value == null)
                throw new ArgumentNullException(nameof(var15), "Property is not nullable for class CheermoteImageFormat.");

            return new CheermoteImageFormat(var1, var2, var3, var4, var15);
        }

        /// <summary>
        /// Serializes a <see cref="CheermoteImageFormat" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="cheermoteImageFormat"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CheermoteImageFormat cheermoteImageFormat, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, cheermoteImageFormat, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CheermoteImageFormat" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="cheermoteImageFormat"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CheermoteImageFormat cheermoteImageFormat, JsonSerializerOptions jsonSerializerOptions)
        {
            if (cheermoteImageFormat.Var1Option.IsSet && cheermoteImageFormat.Var1 == null)
                throw new ArgumentNullException(nameof(cheermoteImageFormat.Var1), "Property is required for class CheermoteImageFormat.");

            if (cheermoteImageFormat.Var2Option.IsSet && cheermoteImageFormat.Var2 == null)
                throw new ArgumentNullException(nameof(cheermoteImageFormat.Var2), "Property is required for class CheermoteImageFormat.");

            if (cheermoteImageFormat.Var3Option.IsSet && cheermoteImageFormat.Var3 == null)
                throw new ArgumentNullException(nameof(cheermoteImageFormat.Var3), "Property is required for class CheermoteImageFormat.");

            if (cheermoteImageFormat.Var4Option.IsSet && cheermoteImageFormat.Var4 == null)
                throw new ArgumentNullException(nameof(cheermoteImageFormat.Var4), "Property is required for class CheermoteImageFormat.");

            if (cheermoteImageFormat.Var15Option.IsSet && cheermoteImageFormat.Var15 == null)
                throw new ArgumentNullException(nameof(cheermoteImageFormat.Var15), "Property is required for class CheermoteImageFormat.");

            if (cheermoteImageFormat.Var1Option.IsSet)
                writer.WriteString("1", cheermoteImageFormat.Var1);

            if (cheermoteImageFormat.Var2Option.IsSet)
                writer.WriteString("2", cheermoteImageFormat.Var2);

            if (cheermoteImageFormat.Var3Option.IsSet)
                writer.WriteString("3", cheermoteImageFormat.Var3);

            if (cheermoteImageFormat.Var4Option.IsSet)
                writer.WriteString("4", cheermoteImageFormat.Var4);

            if (cheermoteImageFormat.Var15Option.IsSet)
                writer.WriteString("1.5", cheermoteImageFormat.Var15);
        }
    }
}

// <auto-generated>
/*
 * Twitch API Swagger UI (Unofficial)
 *
 * Unofficial Swagger UI for Twitch API.  All endpoints are generated automatically from the [twitch docs](https://dev.twitch.tv/docs/api/reference) page.  __Features:__  * Swagger UI for all Twitch API endpoints * Schemas for _Request Query Parameters_, _Request Body_, _Response Body_ * Some additional schemas like _Clip_, _ChatBadge_, _Prediction_, _Game_, _Channel_, _Video_ etc. * Response codes and examples * Generated types for TypeScript: [ts-twitch-api](https://github.com/DmitryScaletta/ts-twitch-api)  __Repository:__ [github.com/DmitryScaletta/twitch-api-swagger](https://github.com/DmitryScaletta/twitch-api-swagger)
 *
 * The version of the OpenAPI document: helix
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using TwistedTaleweaver.Integration.Twitch.Helix.Client;

namespace TwistedTaleweaver.Integration.Twitch.Helix.Model
{
    /// <summary>
    /// UserSubscription
    /// </summary>
    public partial class UserSubscription : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserSubscription" /> class.
        /// </summary>
        /// <param name="broadcasterId">An ID that identifies the broadcaster.</param>
        /// <param name="broadcasterLogin">The broadcaster’s login name.</param>
        /// <param name="broadcasterName">The broadcaster’s display name.</param>
        /// <param name="isGift">A Boolean value that determines whether the subscription is a gift subscription. Is **true** if the subscription was gifted.</param>
        /// <param name="tier">The type of subscription. Possible values are:      * 1000 — Tier 1 * 2000 — Tier 2 * 3000 — Tier 3</param>
        /// <param name="gifterId">The ID of the user that gifted the subscription. The object includes this field only if &#x60;is_gift&#x60; is **true**.</param>
        /// <param name="gifterLogin">The gifter’s login name. The object includes this field only if &#x60;is_gift&#x60; is **true**.</param>
        /// <param name="gifterName">The gifter’s display name. The object includes this field only if &#x60;is_gift&#x60; is **true**.</param>
        [JsonConstructor]
        public UserSubscription(string broadcasterId, string broadcasterLogin, string broadcasterName, bool isGift, TierEnum tier, Option<string?> gifterId = default, Option<string?> gifterLogin = default, Option<string?> gifterName = default)
        {
            BroadcasterId = broadcasterId;
            BroadcasterLogin = broadcasterLogin;
            BroadcasterName = broadcasterName;
            IsGift = isGift;
            Tier = tier;
            GifterIdOption = gifterId;
            GifterLoginOption = gifterLogin;
            GifterNameOption = gifterName;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The type of subscription. Possible values are:      * 1000 — Tier 1 * 2000 — Tier 2 * 3000 — Tier 3
        /// </summary>
        /// <value>The type of subscription. Possible values are:      * 1000 — Tier 1 * 2000 — Tier 2 * 3000 — Tier 3</value>
        public enum TierEnum
        {
            /// <summary>
            /// Enum _1000 for value: 1000
            /// </summary>
            _1000 = 1,

            /// <summary>
            /// Enum _2000 for value: 2000
            /// </summary>
            _2000 = 2,

            /// <summary>
            /// Enum _3000 for value: 3000
            /// </summary>
            _3000 = 3
        }

        /// <summary>
        /// Returns a <see cref="TierEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TierEnum TierEnumFromString(string value)
        {
            if (value.Equals("1000"))
                return TierEnum._1000;

            if (value.Equals("2000"))
                return TierEnum._2000;

            if (value.Equals("3000"))
                return TierEnum._3000;

            throw new NotImplementedException($"Could not convert value to type TierEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TierEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TierEnum? TierEnumFromStringOrDefault(string value)
        {
            if (value.Equals("1000"))
                return TierEnum._1000;

            if (value.Equals("2000"))
                return TierEnum._2000;

            if (value.Equals("3000"))
                return TierEnum._3000;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TierEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TierEnumToJsonValue(TierEnum value)
        {
            if (value == TierEnum._1000)
                return "1000";

            if (value == TierEnum._2000)
                return "2000";

            if (value == TierEnum._3000)
                return "3000";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// The type of subscription. Possible values are:      * 1000 — Tier 1 * 2000 — Tier 2 * 3000 — Tier 3
        /// </summary>
        /// <value>The type of subscription. Possible values are:      * 1000 — Tier 1 * 2000 — Tier 2 * 3000 — Tier 3</value>
        [JsonPropertyName("tier")]
        public TierEnum Tier { get; set; }

        /// <summary>
        /// An ID that identifies the broadcaster.
        /// </summary>
        /// <value>An ID that identifies the broadcaster.</value>
        [JsonPropertyName("broadcaster_id")]
        public string BroadcasterId { get; set; }

        /// <summary>
        /// The broadcaster’s login name.
        /// </summary>
        /// <value>The broadcaster’s login name.</value>
        [JsonPropertyName("broadcaster_login")]
        public string BroadcasterLogin { get; set; }

        /// <summary>
        /// The broadcaster’s display name.
        /// </summary>
        /// <value>The broadcaster’s display name.</value>
        [JsonPropertyName("broadcaster_name")]
        public string BroadcasterName { get; set; }

        /// <summary>
        /// A Boolean value that determines whether the subscription is a gift subscription. Is **true** if the subscription was gifted.
        /// </summary>
        /// <value>A Boolean value that determines whether the subscription is a gift subscription. Is **true** if the subscription was gifted.</value>
        [JsonPropertyName("is_gift")]
        public bool IsGift { get; set; }

        /// <summary>
        /// Used to track the state of GifterId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> GifterIdOption { get; private set; }

        /// <summary>
        /// The ID of the user that gifted the subscription. The object includes this field only if &#x60;is_gift&#x60; is **true**.
        /// </summary>
        /// <value>The ID of the user that gifted the subscription. The object includes this field only if &#x60;is_gift&#x60; is **true**.</value>
        [JsonPropertyName("gifter_id")]
        public string? GifterId { get { return this.GifterIdOption; } set { this.GifterIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of GifterLogin
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> GifterLoginOption { get; private set; }

        /// <summary>
        /// The gifter’s login name. The object includes this field only if &#x60;is_gift&#x60; is **true**.
        /// </summary>
        /// <value>The gifter’s login name. The object includes this field only if &#x60;is_gift&#x60; is **true**.</value>
        [JsonPropertyName("gifter_login")]
        public string? GifterLogin { get { return this.GifterLoginOption; } set { this.GifterLoginOption = new(value); } }

        /// <summary>
        /// Used to track the state of GifterName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> GifterNameOption { get; private set; }

        /// <summary>
        /// The gifter’s display name. The object includes this field only if &#x60;is_gift&#x60; is **true**.
        /// </summary>
        /// <value>The gifter’s display name. The object includes this field only if &#x60;is_gift&#x60; is **true**.</value>
        [JsonPropertyName("gifter_name")]
        public string? GifterName { get { return this.GifterNameOption; } set { this.GifterNameOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserSubscription {\n");
            sb.Append("  BroadcasterId: ").Append(BroadcasterId).Append("\n");
            sb.Append("  BroadcasterLogin: ").Append(BroadcasterLogin).Append("\n");
            sb.Append("  BroadcasterName: ").Append(BroadcasterName).Append("\n");
            sb.Append("  IsGift: ").Append(IsGift).Append("\n");
            sb.Append("  Tier: ").Append(Tier).Append("\n");
            sb.Append("  GifterId: ").Append(GifterId).Append("\n");
            sb.Append("  GifterLogin: ").Append(GifterLogin).Append("\n");
            sb.Append("  GifterName: ").Append(GifterName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UserSubscription" />
    /// </summary>
    public class UserSubscriptionJsonConverter : JsonConverter<UserSubscription>
    {
        /// <summary>
        /// Deserializes json to <see cref="UserSubscription" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override UserSubscription Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> broadcasterId = default;
            Option<string?> broadcasterLogin = default;
            Option<string?> broadcasterName = default;
            Option<bool?> isGift = default;
            Option<UserSubscription.TierEnum?> tier = default;
            Option<string?> gifterId = default;
            Option<string?> gifterLogin = default;
            Option<string?> gifterName = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "broadcaster_id":
                            broadcasterId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "broadcaster_login":
                            broadcasterLogin = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "broadcaster_name":
                            broadcasterName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "is_gift":
                            isGift = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "tier":
                            string? tierRawValue = utf8JsonReader.GetString();
                            if (tierRawValue != null)
                                tier = new Option<UserSubscription.TierEnum?>(UserSubscription.TierEnumFromStringOrDefault(tierRawValue));
                            break;
                        case "gifter_id":
                            gifterId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "gifter_login":
                            gifterLogin = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "gifter_name":
                            gifterName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!broadcasterId.IsSet)
                throw new ArgumentException("Property is required for class UserSubscription.", nameof(broadcasterId));

            if (!broadcasterLogin.IsSet)
                throw new ArgumentException("Property is required for class UserSubscription.", nameof(broadcasterLogin));

            if (!broadcasterName.IsSet)
                throw new ArgumentException("Property is required for class UserSubscription.", nameof(broadcasterName));

            if (!isGift.IsSet)
                throw new ArgumentException("Property is required for class UserSubscription.", nameof(isGift));

            if (!tier.IsSet)
                throw new ArgumentException("Property is required for class UserSubscription.", nameof(tier));

            if (broadcasterId.IsSet && broadcasterId.Value == null)
                throw new ArgumentNullException(nameof(broadcasterId), "Property is not nullable for class UserSubscription.");

            if (broadcasterLogin.IsSet && broadcasterLogin.Value == null)
                throw new ArgumentNullException(nameof(broadcasterLogin), "Property is not nullable for class UserSubscription.");

            if (broadcasterName.IsSet && broadcasterName.Value == null)
                throw new ArgumentNullException(nameof(broadcasterName), "Property is not nullable for class UserSubscription.");

            if (isGift.IsSet && isGift.Value == null)
                throw new ArgumentNullException(nameof(isGift), "Property is not nullable for class UserSubscription.");

            if (tier.IsSet && tier.Value == null)
                throw new ArgumentNullException(nameof(tier), "Property is not nullable for class UserSubscription.");

            if (gifterId.IsSet && gifterId.Value == null)
                throw new ArgumentNullException(nameof(gifterId), "Property is not nullable for class UserSubscription.");

            if (gifterLogin.IsSet && gifterLogin.Value == null)
                throw new ArgumentNullException(nameof(gifterLogin), "Property is not nullable for class UserSubscription.");

            if (gifterName.IsSet && gifterName.Value == null)
                throw new ArgumentNullException(nameof(gifterName), "Property is not nullable for class UserSubscription.");

            return new UserSubscription(broadcasterId.Value!, broadcasterLogin.Value!, broadcasterName.Value!, isGift.Value!.Value!, tier.Value!.Value!, gifterId, gifterLogin, gifterName);
        }

        /// <summary>
        /// Serializes a <see cref="UserSubscription" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="userSubscription"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, UserSubscription userSubscription, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, userSubscription, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="UserSubscription" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="userSubscription"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, UserSubscription userSubscription, JsonSerializerOptions jsonSerializerOptions)
        {
            if (userSubscription.BroadcasterId == null)
                throw new ArgumentNullException(nameof(userSubscription.BroadcasterId), "Property is required for class UserSubscription.");

            if (userSubscription.BroadcasterLogin == null)
                throw new ArgumentNullException(nameof(userSubscription.BroadcasterLogin), "Property is required for class UserSubscription.");

            if (userSubscription.BroadcasterName == null)
                throw new ArgumentNullException(nameof(userSubscription.BroadcasterName), "Property is required for class UserSubscription.");

            if (userSubscription.GifterIdOption.IsSet && userSubscription.GifterId == null)
                throw new ArgumentNullException(nameof(userSubscription.GifterId), "Property is required for class UserSubscription.");

            if (userSubscription.GifterLoginOption.IsSet && userSubscription.GifterLogin == null)
                throw new ArgumentNullException(nameof(userSubscription.GifterLogin), "Property is required for class UserSubscription.");

            if (userSubscription.GifterNameOption.IsSet && userSubscription.GifterName == null)
                throw new ArgumentNullException(nameof(userSubscription.GifterName), "Property is required for class UserSubscription.");

            writer.WriteString("broadcaster_id", userSubscription.BroadcasterId);

            writer.WriteString("broadcaster_login", userSubscription.BroadcasterLogin);

            writer.WriteString("broadcaster_name", userSubscription.BroadcasterName);

            writer.WriteBoolean("is_gift", userSubscription.IsGift);

            var tierRawValue = UserSubscription.TierEnumToJsonValue(userSubscription.Tier);
            writer.WriteString("tier", tierRawValue);
            if (userSubscription.GifterIdOption.IsSet)
                writer.WriteString("gifter_id", userSubscription.GifterId);

            if (userSubscription.GifterLoginOption.IsSet)
                writer.WriteString("gifter_login", userSubscription.GifterLogin);

            if (userSubscription.GifterNameOption.IsSet)
                writer.WriteString("gifter_name", userSubscription.GifterName);
        }
    }
}

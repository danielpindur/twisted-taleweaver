// <auto-generated>
/*
 * Twitch API Swagger UI (Unofficial)
 *
 * Unofficial Swagger UI for Twitch API.  All endpoints are generated automatically from the [twitch docs](https://dev.twitch.tv/docs/api/reference) page.  __Features:__  * Swagger UI for all Twitch API endpoints * Schemas for _Request Query Parameters_, _Request Body_, _Response Body_ * Some additional schemas like _Clip_, _ChatBadge_, _Prediction_, _Game_, _Channel_, _Video_ etc. * Response codes and examples * Generated types for TypeScript: [ts-twitch-api](https://github.com/DmitryScaletta/ts-twitch-api)  __Repository:__ [github.com/DmitryScaletta/twitch-api-swagger](https://github.com/DmitryScaletta/twitch-api-swagger)
 *
 * The version of the OpenAPI document: helix
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using TwistedTaleweaver.Integration.Twitch.Helix.Client;

namespace TwistedTaleweaver.Integration.Twitch.Helix.Model
{
    /// <summary>
    /// GetUserEmotesResponseDataInner
    /// </summary>
    public partial class GetUserEmotesResponseDataInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetUserEmotesResponseDataInner" /> class.
        /// </summary>
        /// <param name="id">An ID that uniquely identifies this emote.</param>
        /// <param name="name">The User ID of broadcaster whose channel is receiving the unban request.</param>
        /// <param name="emoteType">The type of emote. The possible values are:       * **none** — No emote type was assigned to this emote. * **bitstier** — A Bits tier emote. * **follower** — A follower emote. * **subscriptions** — A subscriber emote. * **channelpoints** — An emote granted by using channel points. * **rewards** — An emote granted to the user through a special event. * **hypetrain** — An emote granted for participation in a Hype Train. * **prime** — An emote granted for linking an Amazon Prime account. * **turbo** — An emote granted for having Twitch Turbo. * **smilies** — Emoticons supported by Twitch. * **globals** — An emote accessible by everyone. * **owl2019** — Emotes related to Overwatch League 2019. * **twofactor** — Emotes granted by enabling two-factor authentication on an account. * **limitedtime** — Emotes that were granted for only a limited time.</param>
        /// <param name="emoteSetId">An ID that identifies the emote set that the emote belongs to.</param>
        /// <param name="ownerId">The ID of the broadcaster who owns the emote.</param>
        /// <param name="format">The formats that the emote is available in. For example, if the emote is available only as a static PNG, the array contains only static. But if the emote is available as a static PNG and an animated GIF, the array contains static and animated.       * **animated** — An animated GIF is available for this emote. * **static** — A static PNG file is available for this emote.</param>
        /// <param name="scale">The sizes that the emote is available in. For example, if the emote is available in small and medium sizes, the array contains 1.0 and 2.0\\.       * **1.0** — A small version (28px x 28px) is available. * **2.0** — A medium version (56px x 56px) is available. * **3.0** — A large version (112px x 112px) is available.</param>
        /// <param name="themeMode">The background themes that the emote is available in.       * **dark** * **light**</param>
        [JsonConstructor]
        public GetUserEmotesResponseDataInner(string id, string name, EmoteTypeEnum emoteType, string emoteSetId, string ownerId, List<string> format, List<string> scale, List<string> themeMode)
        {
            Id = id;
            Name = name;
            EmoteType = emoteType;
            EmoteSetId = emoteSetId;
            OwnerId = ownerId;
            Format = format;
            Scale = scale;
            ThemeMode = themeMode;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The type of emote. The possible values are:       * **none** — No emote type was assigned to this emote. * **bitstier** — A Bits tier emote. * **follower** — A follower emote. * **subscriptions** — A subscriber emote. * **channelpoints** — An emote granted by using channel points. * **rewards** — An emote granted to the user through a special event. * **hypetrain** — An emote granted for participation in a Hype Train. * **prime** — An emote granted for linking an Amazon Prime account. * **turbo** — An emote granted for having Twitch Turbo. * **smilies** — Emoticons supported by Twitch. * **globals** — An emote accessible by everyone. * **owl2019** — Emotes related to Overwatch League 2019. * **twofactor** — Emotes granted by enabling two-factor authentication on an account. * **limitedtime** — Emotes that were granted for only a limited time.
        /// </summary>
        /// <value>The type of emote. The possible values are:       * **none** — No emote type was assigned to this emote. * **bitstier** — A Bits tier emote. * **follower** — A follower emote. * **subscriptions** — A subscriber emote. * **channelpoints** — An emote granted by using channel points. * **rewards** — An emote granted to the user through a special event. * **hypetrain** — An emote granted for participation in a Hype Train. * **prime** — An emote granted for linking an Amazon Prime account. * **turbo** — An emote granted for having Twitch Turbo. * **smilies** — Emoticons supported by Twitch. * **globals** — An emote accessible by everyone. * **owl2019** — Emotes related to Overwatch League 2019. * **twofactor** — Emotes granted by enabling two-factor authentication on an account. * **limitedtime** — Emotes that were granted for only a limited time.</value>
        public enum EmoteTypeEnum
        {
            /// <summary>
            /// Enum None for value: none
            /// </summary>
            None = 1,

            /// <summary>
            /// Enum Bitstier for value: bitstier
            /// </summary>
            Bitstier = 2,

            /// <summary>
            /// Enum Follower for value: follower
            /// </summary>
            Follower = 3,

            /// <summary>
            /// Enum Subscriptions for value: subscriptions
            /// </summary>
            Subscriptions = 4,

            /// <summary>
            /// Enum Channelpoints for value: channelpoints
            /// </summary>
            Channelpoints = 5,

            /// <summary>
            /// Enum Rewards for value: rewards
            /// </summary>
            Rewards = 6,

            /// <summary>
            /// Enum Hypetrain for value: hypetrain
            /// </summary>
            Hypetrain = 7,

            /// <summary>
            /// Enum Prime for value: prime
            /// </summary>
            Prime = 8,

            /// <summary>
            /// Enum Turbo for value: turbo
            /// </summary>
            Turbo = 9,

            /// <summary>
            /// Enum Smilies for value: smilies
            /// </summary>
            Smilies = 10,

            /// <summary>
            /// Enum Globals for value: globals
            /// </summary>
            Globals = 11,

            /// <summary>
            /// Enum Owl2019 for value: owl2019
            /// </summary>
            Owl2019 = 12,

            /// <summary>
            /// Enum Twofactor for value: twofactor
            /// </summary>
            Twofactor = 13,

            /// <summary>
            /// Enum Limitedtime for value: limitedtime
            /// </summary>
            Limitedtime = 14
        }

        /// <summary>
        /// Returns a <see cref="EmoteTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static EmoteTypeEnum EmoteTypeEnumFromString(string value)
        {
            if (value.Equals("none"))
                return EmoteTypeEnum.None;

            if (value.Equals("bitstier"))
                return EmoteTypeEnum.Bitstier;

            if (value.Equals("follower"))
                return EmoteTypeEnum.Follower;

            if (value.Equals("subscriptions"))
                return EmoteTypeEnum.Subscriptions;

            if (value.Equals("channelpoints"))
                return EmoteTypeEnum.Channelpoints;

            if (value.Equals("rewards"))
                return EmoteTypeEnum.Rewards;

            if (value.Equals("hypetrain"))
                return EmoteTypeEnum.Hypetrain;

            if (value.Equals("prime"))
                return EmoteTypeEnum.Prime;

            if (value.Equals("turbo"))
                return EmoteTypeEnum.Turbo;

            if (value.Equals("smilies"))
                return EmoteTypeEnum.Smilies;

            if (value.Equals("globals"))
                return EmoteTypeEnum.Globals;

            if (value.Equals("owl2019"))
                return EmoteTypeEnum.Owl2019;

            if (value.Equals("twofactor"))
                return EmoteTypeEnum.Twofactor;

            if (value.Equals("limitedtime"))
                return EmoteTypeEnum.Limitedtime;

            throw new NotImplementedException($"Could not convert value to type EmoteTypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="EmoteTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static EmoteTypeEnum? EmoteTypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("none"))
                return EmoteTypeEnum.None;

            if (value.Equals("bitstier"))
                return EmoteTypeEnum.Bitstier;

            if (value.Equals("follower"))
                return EmoteTypeEnum.Follower;

            if (value.Equals("subscriptions"))
                return EmoteTypeEnum.Subscriptions;

            if (value.Equals("channelpoints"))
                return EmoteTypeEnum.Channelpoints;

            if (value.Equals("rewards"))
                return EmoteTypeEnum.Rewards;

            if (value.Equals("hypetrain"))
                return EmoteTypeEnum.Hypetrain;

            if (value.Equals("prime"))
                return EmoteTypeEnum.Prime;

            if (value.Equals("turbo"))
                return EmoteTypeEnum.Turbo;

            if (value.Equals("smilies"))
                return EmoteTypeEnum.Smilies;

            if (value.Equals("globals"))
                return EmoteTypeEnum.Globals;

            if (value.Equals("owl2019"))
                return EmoteTypeEnum.Owl2019;

            if (value.Equals("twofactor"))
                return EmoteTypeEnum.Twofactor;

            if (value.Equals("limitedtime"))
                return EmoteTypeEnum.Limitedtime;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="EmoteTypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string EmoteTypeEnumToJsonValue(EmoteTypeEnum value)
        {
            if (value == EmoteTypeEnum.None)
                return "none";

            if (value == EmoteTypeEnum.Bitstier)
                return "bitstier";

            if (value == EmoteTypeEnum.Follower)
                return "follower";

            if (value == EmoteTypeEnum.Subscriptions)
                return "subscriptions";

            if (value == EmoteTypeEnum.Channelpoints)
                return "channelpoints";

            if (value == EmoteTypeEnum.Rewards)
                return "rewards";

            if (value == EmoteTypeEnum.Hypetrain)
                return "hypetrain";

            if (value == EmoteTypeEnum.Prime)
                return "prime";

            if (value == EmoteTypeEnum.Turbo)
                return "turbo";

            if (value == EmoteTypeEnum.Smilies)
                return "smilies";

            if (value == EmoteTypeEnum.Globals)
                return "globals";

            if (value == EmoteTypeEnum.Owl2019)
                return "owl2019";

            if (value == EmoteTypeEnum.Twofactor)
                return "twofactor";

            if (value == EmoteTypeEnum.Limitedtime)
                return "limitedtime";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// The type of emote. The possible values are:       * **none** — No emote type was assigned to this emote. * **bitstier** — A Bits tier emote. * **follower** — A follower emote. * **subscriptions** — A subscriber emote. * **channelpoints** — An emote granted by using channel points. * **rewards** — An emote granted to the user through a special event. * **hypetrain** — An emote granted for participation in a Hype Train. * **prime** — An emote granted for linking an Amazon Prime account. * **turbo** — An emote granted for having Twitch Turbo. * **smilies** — Emoticons supported by Twitch. * **globals** — An emote accessible by everyone. * **owl2019** — Emotes related to Overwatch League 2019. * **twofactor** — Emotes granted by enabling two-factor authentication on an account. * **limitedtime** — Emotes that were granted for only a limited time.
        /// </summary>
        /// <value>The type of emote. The possible values are:       * **none** — No emote type was assigned to this emote. * **bitstier** — A Bits tier emote. * **follower** — A follower emote. * **subscriptions** — A subscriber emote. * **channelpoints** — An emote granted by using channel points. * **rewards** — An emote granted to the user through a special event. * **hypetrain** — An emote granted for participation in a Hype Train. * **prime** — An emote granted for linking an Amazon Prime account. * **turbo** — An emote granted for having Twitch Turbo. * **smilies** — Emoticons supported by Twitch. * **globals** — An emote accessible by everyone. * **owl2019** — Emotes related to Overwatch League 2019. * **twofactor** — Emotes granted by enabling two-factor authentication on an account. * **limitedtime** — Emotes that were granted for only a limited time.</value>
        [JsonPropertyName("emote_type")]
        public EmoteTypeEnum EmoteType { get; set; }

        /// <summary>
        /// An ID that uniquely identifies this emote.
        /// </summary>
        /// <value>An ID that uniquely identifies this emote.</value>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// The User ID of broadcaster whose channel is receiving the unban request.
        /// </summary>
        /// <value>The User ID of broadcaster whose channel is receiving the unban request.</value>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// An ID that identifies the emote set that the emote belongs to.
        /// </summary>
        /// <value>An ID that identifies the emote set that the emote belongs to.</value>
        [JsonPropertyName("emote_set_id")]
        public string EmoteSetId { get; set; }

        /// <summary>
        /// The ID of the broadcaster who owns the emote.
        /// </summary>
        /// <value>The ID of the broadcaster who owns the emote.</value>
        [JsonPropertyName("owner_id")]
        public string OwnerId { get; set; }

        /// <summary>
        /// The formats that the emote is available in. For example, if the emote is available only as a static PNG, the array contains only static. But if the emote is available as a static PNG and an animated GIF, the array contains static and animated.       * **animated** — An animated GIF is available for this emote. * **static** — A static PNG file is available for this emote.
        /// </summary>
        /// <value>The formats that the emote is available in. For example, if the emote is available only as a static PNG, the array contains only static. But if the emote is available as a static PNG and an animated GIF, the array contains static and animated.       * **animated** — An animated GIF is available for this emote. * **static** — A static PNG file is available for this emote.</value>
        [JsonPropertyName("format")]
        public List<string> Format { get; set; }

        /// <summary>
        /// The sizes that the emote is available in. For example, if the emote is available in small and medium sizes, the array contains 1.0 and 2.0\\.       * **1.0** — A small version (28px x 28px) is available. * **2.0** — A medium version (56px x 56px) is available. * **3.0** — A large version (112px x 112px) is available.
        /// </summary>
        /// <value>The sizes that the emote is available in. For example, if the emote is available in small and medium sizes, the array contains 1.0 and 2.0\\.       * **1.0** — A small version (28px x 28px) is available. * **2.0** — A medium version (56px x 56px) is available. * **3.0** — A large version (112px x 112px) is available.</value>
        [JsonPropertyName("scale")]
        public List<string> Scale { get; set; }

        /// <summary>
        /// The background themes that the emote is available in.       * **dark** * **light**
        /// </summary>
        /// <value>The background themes that the emote is available in.       * **dark** * **light**</value>
        [JsonPropertyName("theme_mode")]
        public List<string> ThemeMode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetUserEmotesResponseDataInner {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  EmoteType: ").Append(EmoteType).Append("\n");
            sb.Append("  EmoteSetId: ").Append(EmoteSetId).Append("\n");
            sb.Append("  OwnerId: ").Append(OwnerId).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  Scale: ").Append(Scale).Append("\n");
            sb.Append("  ThemeMode: ").Append(ThemeMode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetUserEmotesResponseDataInner" />
    /// </summary>
    public class GetUserEmotesResponseDataInnerJsonConverter : JsonConverter<GetUserEmotesResponseDataInner>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetUserEmotesResponseDataInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetUserEmotesResponseDataInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> name = default;
            Option<GetUserEmotesResponseDataInner.EmoteTypeEnum?> emoteType = default;
            Option<string?> emoteSetId = default;
            Option<string?> ownerId = default;
            Option<List<string>?> format = default;
            Option<List<string>?> scale = default;
            Option<List<string>?> themeMode = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "emote_type":
                            string? emoteTypeRawValue = utf8JsonReader.GetString();
                            if (emoteTypeRawValue != null)
                                emoteType = new Option<GetUserEmotesResponseDataInner.EmoteTypeEnum?>(GetUserEmotesResponseDataInner.EmoteTypeEnumFromStringOrDefault(emoteTypeRawValue));
                            break;
                        case "emote_set_id":
                            emoteSetId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "owner_id":
                            ownerId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "format":
                            format = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "scale":
                            scale = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "theme_mode":
                            themeMode = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class GetUserEmotesResponseDataInner.", nameof(id));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class GetUserEmotesResponseDataInner.", nameof(name));

            if (!emoteType.IsSet)
                throw new ArgumentException("Property is required for class GetUserEmotesResponseDataInner.", nameof(emoteType));

            if (!emoteSetId.IsSet)
                throw new ArgumentException("Property is required for class GetUserEmotesResponseDataInner.", nameof(emoteSetId));

            if (!ownerId.IsSet)
                throw new ArgumentException("Property is required for class GetUserEmotesResponseDataInner.", nameof(ownerId));

            if (!format.IsSet)
                throw new ArgumentException("Property is required for class GetUserEmotesResponseDataInner.", nameof(format));

            if (!scale.IsSet)
                throw new ArgumentException("Property is required for class GetUserEmotesResponseDataInner.", nameof(scale));

            if (!themeMode.IsSet)
                throw new ArgumentException("Property is required for class GetUserEmotesResponseDataInner.", nameof(themeMode));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class GetUserEmotesResponseDataInner.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class GetUserEmotesResponseDataInner.");

            if (emoteType.IsSet && emoteType.Value == null)
                throw new ArgumentNullException(nameof(emoteType), "Property is not nullable for class GetUserEmotesResponseDataInner.");

            if (emoteSetId.IsSet && emoteSetId.Value == null)
                throw new ArgumentNullException(nameof(emoteSetId), "Property is not nullable for class GetUserEmotesResponseDataInner.");

            if (ownerId.IsSet && ownerId.Value == null)
                throw new ArgumentNullException(nameof(ownerId), "Property is not nullable for class GetUserEmotesResponseDataInner.");

            if (format.IsSet && format.Value == null)
                throw new ArgumentNullException(nameof(format), "Property is not nullable for class GetUserEmotesResponseDataInner.");

            if (scale.IsSet && scale.Value == null)
                throw new ArgumentNullException(nameof(scale), "Property is not nullable for class GetUserEmotesResponseDataInner.");

            if (themeMode.IsSet && themeMode.Value == null)
                throw new ArgumentNullException(nameof(themeMode), "Property is not nullable for class GetUserEmotesResponseDataInner.");

            return new GetUserEmotesResponseDataInner(id.Value!, name.Value!, emoteType.Value!.Value!, emoteSetId.Value!, ownerId.Value!, format.Value!, scale.Value!, themeMode.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="GetUserEmotesResponseDataInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getUserEmotesResponseDataInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetUserEmotesResponseDataInner getUserEmotesResponseDataInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getUserEmotesResponseDataInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetUserEmotesResponseDataInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getUserEmotesResponseDataInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetUserEmotesResponseDataInner getUserEmotesResponseDataInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getUserEmotesResponseDataInner.Id == null)
                throw new ArgumentNullException(nameof(getUserEmotesResponseDataInner.Id), "Property is required for class GetUserEmotesResponseDataInner.");

            if (getUserEmotesResponseDataInner.Name == null)
                throw new ArgumentNullException(nameof(getUserEmotesResponseDataInner.Name), "Property is required for class GetUserEmotesResponseDataInner.");

            if (getUserEmotesResponseDataInner.EmoteSetId == null)
                throw new ArgumentNullException(nameof(getUserEmotesResponseDataInner.EmoteSetId), "Property is required for class GetUserEmotesResponseDataInner.");

            if (getUserEmotesResponseDataInner.OwnerId == null)
                throw new ArgumentNullException(nameof(getUserEmotesResponseDataInner.OwnerId), "Property is required for class GetUserEmotesResponseDataInner.");

            if (getUserEmotesResponseDataInner.Format == null)
                throw new ArgumentNullException(nameof(getUserEmotesResponseDataInner.Format), "Property is required for class GetUserEmotesResponseDataInner.");

            if (getUserEmotesResponseDataInner.Scale == null)
                throw new ArgumentNullException(nameof(getUserEmotesResponseDataInner.Scale), "Property is required for class GetUserEmotesResponseDataInner.");

            if (getUserEmotesResponseDataInner.ThemeMode == null)
                throw new ArgumentNullException(nameof(getUserEmotesResponseDataInner.ThemeMode), "Property is required for class GetUserEmotesResponseDataInner.");

            writer.WriteString("id", getUserEmotesResponseDataInner.Id);

            writer.WriteString("name", getUserEmotesResponseDataInner.Name);

            var emoteTypeRawValue = GetUserEmotesResponseDataInner.EmoteTypeEnumToJsonValue(getUserEmotesResponseDataInner.EmoteType);
            writer.WriteString("emote_type", emoteTypeRawValue);
            writer.WriteString("emote_set_id", getUserEmotesResponseDataInner.EmoteSetId);

            writer.WriteString("owner_id", getUserEmotesResponseDataInner.OwnerId);

            writer.WritePropertyName("format");
            JsonSerializer.Serialize(writer, getUserEmotesResponseDataInner.Format, jsonSerializerOptions);
            writer.WritePropertyName("scale");
            JsonSerializer.Serialize(writer, getUserEmotesResponseDataInner.Scale, jsonSerializerOptions);
            writer.WritePropertyName("theme_mode");
            JsonSerializer.Serialize(writer, getUserEmotesResponseDataInner.ThemeMode, jsonSerializerOptions);
        }
    }
}

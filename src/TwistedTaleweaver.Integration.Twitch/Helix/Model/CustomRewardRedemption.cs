// <auto-generated>
/*
 * Twitch API Swagger UI (Unofficial)
 *
 * Unofficial Swagger UI for Twitch API.  All endpoints are generated automatically from the [twitch docs](https://dev.twitch.tv/docs/api/reference) page.  __Features:__  * Swagger UI for all Twitch API endpoints * Schemas for _Request Query Parameters_, _Request Body_, _Response Body_ * Some additional schemas like _Clip_, _ChatBadge_, _Prediction_, _Game_, _Channel_, _Video_ etc. * Response codes and examples * Generated types for TypeScript: [ts-twitch-api](https://github.com/DmitryScaletta/ts-twitch-api)  __Repository:__ [github.com/DmitryScaletta/twitch-api-swagger](https://github.com/DmitryScaletta/twitch-api-swagger)
 *
 * The version of the OpenAPI document: helix
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using TwistedTaleweaver.Integration.Twitch.Helix.Client;

namespace TwistedTaleweaver.Integration.Twitch.Helix.Model
{
    /// <summary>
    /// CustomRewardRedemption
    /// </summary>
    public partial class CustomRewardRedemption : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomRewardRedemption" /> class.
        /// </summary>
        /// <param name="broadcasterId">The ID that uniquely identifies the broadcaster.</param>
        /// <param name="broadcasterLogin">The broadcaster’s login name.</param>
        /// <param name="broadcasterName">The broadcaster’s display name.</param>
        /// <param name="id">The ID that uniquely identifies this redemption..</param>
        /// <param name="userId">The ID of the user that redeemed the reward.</param>
        /// <param name="userName">The user’s display name.</param>
        /// <param name="userLogin">The user’s login name.</param>
        /// <param name="reward">reward</param>
        /// <param name="userInput">The text that the user entered at the prompt when they redeemed the reward; otherwise, an empty string if user input was not required.</param>
        /// <param name="status">The state of the redemption. Possible values are:      * CANCELED * FULFILLED * UNFULFILLED</param>
        /// <param name="redeemedAt">The date and time of when the reward was redeemed, in RFC3339 format.</param>
        [JsonConstructor]
        public CustomRewardRedemption(string broadcasterId, string broadcasterLogin, string broadcasterName, string id, string userId, string userName, string userLogin, CustomRewardRedemptionReward reward, string userInput, StatusEnum status, DateTime redeemedAt)
        {
            BroadcasterId = broadcasterId;
            BroadcasterLogin = broadcasterLogin;
            BroadcasterName = broadcasterName;
            Id = id;
            UserId = userId;
            UserName = userName;
            UserLogin = userLogin;
            Reward = reward;
            UserInput = userInput;
            Status = status;
            RedeemedAt = redeemedAt;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The state of the redemption. Possible values are:      * CANCELED * FULFILLED * UNFULFILLED
        /// </summary>
        /// <value>The state of the redemption. Possible values are:      * CANCELED * FULFILLED * UNFULFILLED</value>
        public enum StatusEnum
        {
            /// <summary>
            /// Enum CANCELED for value: CANCELED
            /// </summary>
            CANCELED = 1,

            /// <summary>
            /// Enum FULFILLED for value: FULFILLED
            /// </summary>
            FULFILLED = 2,

            /// <summary>
            /// Enum UNFULFILLED for value: UNFULFILLED
            /// </summary>
            UNFULFILLED = 3
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static StatusEnum StatusEnumFromString(string value)
        {
            if (value.Equals("CANCELED"))
                return StatusEnum.CANCELED;

            if (value.Equals("FULFILLED"))
                return StatusEnum.FULFILLED;

            if (value.Equals("UNFULFILLED"))
                return StatusEnum.UNFULFILLED;

            throw new NotImplementedException($"Could not convert value to type StatusEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static StatusEnum? StatusEnumFromStringOrDefault(string value)
        {
            if (value.Equals("CANCELED"))
                return StatusEnum.CANCELED;

            if (value.Equals("FULFILLED"))
                return StatusEnum.FULFILLED;

            if (value.Equals("UNFULFILLED"))
                return StatusEnum.UNFULFILLED;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="StatusEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string StatusEnumToJsonValue(StatusEnum value)
        {
            if (value == StatusEnum.CANCELED)
                return "CANCELED";

            if (value == StatusEnum.FULFILLED)
                return "FULFILLED";

            if (value == StatusEnum.UNFULFILLED)
                return "UNFULFILLED";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// The state of the redemption. Possible values are:      * CANCELED * FULFILLED * UNFULFILLED
        /// </summary>
        /// <value>The state of the redemption. Possible values are:      * CANCELED * FULFILLED * UNFULFILLED</value>
        [JsonPropertyName("status")]
        public StatusEnum Status { get; set; }

        /// <summary>
        /// The ID that uniquely identifies the broadcaster.
        /// </summary>
        /// <value>The ID that uniquely identifies the broadcaster.</value>
        [JsonPropertyName("broadcaster_id")]
        public string BroadcasterId { get; set; }

        /// <summary>
        /// The broadcaster’s login name.
        /// </summary>
        /// <value>The broadcaster’s login name.</value>
        [JsonPropertyName("broadcaster_login")]
        public string BroadcasterLogin { get; set; }

        /// <summary>
        /// The broadcaster’s display name.
        /// </summary>
        /// <value>The broadcaster’s display name.</value>
        [JsonPropertyName("broadcaster_name")]
        public string BroadcasterName { get; set; }

        /// <summary>
        /// The ID that uniquely identifies this redemption..
        /// </summary>
        /// <value>The ID that uniquely identifies this redemption..</value>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// The ID of the user that redeemed the reward.
        /// </summary>
        /// <value>The ID of the user that redeemed the reward.</value>
        [JsonPropertyName("user_id")]
        public string UserId { get; set; }

        /// <summary>
        /// The user’s display name.
        /// </summary>
        /// <value>The user’s display name.</value>
        [JsonPropertyName("user_name")]
        public string UserName { get; set; }

        /// <summary>
        /// The user’s login name.
        /// </summary>
        /// <value>The user’s login name.</value>
        [JsonPropertyName("user_login")]
        public string UserLogin { get; set; }

        /// <summary>
        /// Gets or Sets Reward
        /// </summary>
        [JsonPropertyName("reward")]
        public CustomRewardRedemptionReward Reward { get; set; }

        /// <summary>
        /// The text that the user entered at the prompt when they redeemed the reward; otherwise, an empty string if user input was not required.
        /// </summary>
        /// <value>The text that the user entered at the prompt when they redeemed the reward; otherwise, an empty string if user input was not required.</value>
        [JsonPropertyName("user_input")]
        public string UserInput { get; set; }

        /// <summary>
        /// The date and time of when the reward was redeemed, in RFC3339 format.
        /// </summary>
        /// <value>The date and time of when the reward was redeemed, in RFC3339 format.</value>
        [JsonPropertyName("redeemed_at")]
        public DateTime RedeemedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomRewardRedemption {\n");
            sb.Append("  BroadcasterId: ").Append(BroadcasterId).Append("\n");
            sb.Append("  BroadcasterLogin: ").Append(BroadcasterLogin).Append("\n");
            sb.Append("  BroadcasterName: ").Append(BroadcasterName).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  UserLogin: ").Append(UserLogin).Append("\n");
            sb.Append("  Reward: ").Append(Reward).Append("\n");
            sb.Append("  UserInput: ").Append(UserInput).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  RedeemedAt: ").Append(RedeemedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CustomRewardRedemption" />
    /// </summary>
    public class CustomRewardRedemptionJsonConverter : JsonConverter<CustomRewardRedemption>
    {
        /// <summary>
        /// The format to use to serialize RedeemedAt
        /// </summary>
        public static string RedeemedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="CustomRewardRedemption" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CustomRewardRedemption Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> broadcasterId = default;
            Option<string?> broadcasterLogin = default;
            Option<string?> broadcasterName = default;
            Option<string?> id = default;
            Option<string?> userId = default;
            Option<string?> userName = default;
            Option<string?> userLogin = default;
            Option<CustomRewardRedemptionReward?> reward = default;
            Option<string?> userInput = default;
            Option<CustomRewardRedemption.StatusEnum?> status = default;
            Option<DateTime?> redeemedAt = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "broadcaster_id":
                            broadcasterId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "broadcaster_login":
                            broadcasterLogin = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "broadcaster_name":
                            broadcasterName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "user_id":
                            userId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "user_name":
                            userName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "user_login":
                            userLogin = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "reward":
                            reward = new Option<CustomRewardRedemptionReward?>(JsonSerializer.Deserialize<CustomRewardRedemptionReward>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "user_input":
                            userInput = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "status":
                            string? statusRawValue = utf8JsonReader.GetString();
                            if (statusRawValue != null)
                                status = new Option<CustomRewardRedemption.StatusEnum?>(CustomRewardRedemption.StatusEnumFromStringOrDefault(statusRawValue));
                            break;
                        case "redeemed_at":
                            redeemedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!broadcasterId.IsSet)
                throw new ArgumentException("Property is required for class CustomRewardRedemption.", nameof(broadcasterId));

            if (!broadcasterLogin.IsSet)
                throw new ArgumentException("Property is required for class CustomRewardRedemption.", nameof(broadcasterLogin));

            if (!broadcasterName.IsSet)
                throw new ArgumentException("Property is required for class CustomRewardRedemption.", nameof(broadcasterName));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class CustomRewardRedemption.", nameof(id));

            if (!userId.IsSet)
                throw new ArgumentException("Property is required for class CustomRewardRedemption.", nameof(userId));

            if (!userName.IsSet)
                throw new ArgumentException("Property is required for class CustomRewardRedemption.", nameof(userName));

            if (!userLogin.IsSet)
                throw new ArgumentException("Property is required for class CustomRewardRedemption.", nameof(userLogin));

            if (!reward.IsSet)
                throw new ArgumentException("Property is required for class CustomRewardRedemption.", nameof(reward));

            if (!userInput.IsSet)
                throw new ArgumentException("Property is required for class CustomRewardRedemption.", nameof(userInput));

            if (!status.IsSet)
                throw new ArgumentException("Property is required for class CustomRewardRedemption.", nameof(status));

            if (!redeemedAt.IsSet)
                throw new ArgumentException("Property is required for class CustomRewardRedemption.", nameof(redeemedAt));

            if (broadcasterId.IsSet && broadcasterId.Value == null)
                throw new ArgumentNullException(nameof(broadcasterId), "Property is not nullable for class CustomRewardRedemption.");

            if (broadcasterLogin.IsSet && broadcasterLogin.Value == null)
                throw new ArgumentNullException(nameof(broadcasterLogin), "Property is not nullable for class CustomRewardRedemption.");

            if (broadcasterName.IsSet && broadcasterName.Value == null)
                throw new ArgumentNullException(nameof(broadcasterName), "Property is not nullable for class CustomRewardRedemption.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class CustomRewardRedemption.");

            if (userId.IsSet && userId.Value == null)
                throw new ArgumentNullException(nameof(userId), "Property is not nullable for class CustomRewardRedemption.");

            if (userName.IsSet && userName.Value == null)
                throw new ArgumentNullException(nameof(userName), "Property is not nullable for class CustomRewardRedemption.");

            if (userLogin.IsSet && userLogin.Value == null)
                throw new ArgumentNullException(nameof(userLogin), "Property is not nullable for class CustomRewardRedemption.");

            if (reward.IsSet && reward.Value == null)
                throw new ArgumentNullException(nameof(reward), "Property is not nullable for class CustomRewardRedemption.");

            if (userInput.IsSet && userInput.Value == null)
                throw new ArgumentNullException(nameof(userInput), "Property is not nullable for class CustomRewardRedemption.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class CustomRewardRedemption.");

            if (redeemedAt.IsSet && redeemedAt.Value == null)
                throw new ArgumentNullException(nameof(redeemedAt), "Property is not nullable for class CustomRewardRedemption.");

            return new CustomRewardRedemption(broadcasterId.Value!, broadcasterLogin.Value!, broadcasterName.Value!, id.Value!, userId.Value!, userName.Value!, userLogin.Value!, reward.Value!, userInput.Value!, status.Value!.Value!, redeemedAt.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="CustomRewardRedemption" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="customRewardRedemption"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CustomRewardRedemption customRewardRedemption, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, customRewardRedemption, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CustomRewardRedemption" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="customRewardRedemption"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CustomRewardRedemption customRewardRedemption, JsonSerializerOptions jsonSerializerOptions)
        {
            if (customRewardRedemption.BroadcasterId == null)
                throw new ArgumentNullException(nameof(customRewardRedemption.BroadcasterId), "Property is required for class CustomRewardRedemption.");

            if (customRewardRedemption.BroadcasterLogin == null)
                throw new ArgumentNullException(nameof(customRewardRedemption.BroadcasterLogin), "Property is required for class CustomRewardRedemption.");

            if (customRewardRedemption.BroadcasterName == null)
                throw new ArgumentNullException(nameof(customRewardRedemption.BroadcasterName), "Property is required for class CustomRewardRedemption.");

            if (customRewardRedemption.Id == null)
                throw new ArgumentNullException(nameof(customRewardRedemption.Id), "Property is required for class CustomRewardRedemption.");

            if (customRewardRedemption.UserId == null)
                throw new ArgumentNullException(nameof(customRewardRedemption.UserId), "Property is required for class CustomRewardRedemption.");

            if (customRewardRedemption.UserName == null)
                throw new ArgumentNullException(nameof(customRewardRedemption.UserName), "Property is required for class CustomRewardRedemption.");

            if (customRewardRedemption.UserLogin == null)
                throw new ArgumentNullException(nameof(customRewardRedemption.UserLogin), "Property is required for class CustomRewardRedemption.");

            if (customRewardRedemption.Reward == null)
                throw new ArgumentNullException(nameof(customRewardRedemption.Reward), "Property is required for class CustomRewardRedemption.");

            if (customRewardRedemption.UserInput == null)
                throw new ArgumentNullException(nameof(customRewardRedemption.UserInput), "Property is required for class CustomRewardRedemption.");

            writer.WriteString("broadcaster_id", customRewardRedemption.BroadcasterId);

            writer.WriteString("broadcaster_login", customRewardRedemption.BroadcasterLogin);

            writer.WriteString("broadcaster_name", customRewardRedemption.BroadcasterName);

            writer.WriteString("id", customRewardRedemption.Id);

            writer.WriteString("user_id", customRewardRedemption.UserId);

            writer.WriteString("user_name", customRewardRedemption.UserName);

            writer.WriteString("user_login", customRewardRedemption.UserLogin);

            writer.WritePropertyName("reward");
            JsonSerializer.Serialize(writer, customRewardRedemption.Reward, jsonSerializerOptions);
            writer.WriteString("user_input", customRewardRedemption.UserInput);

            var statusRawValue = CustomRewardRedemption.StatusEnumToJsonValue(customRewardRedemption.Status);
            writer.WriteString("status", statusRawValue);
            writer.WriteString("redeemed_at", customRewardRedemption.RedeemedAt.ToString(RedeemedAtFormat));
        }
    }
}

// <auto-generated>
/*
 * Twitch API Swagger UI (Unofficial)
 *
 * Unofficial Swagger UI for Twitch API.  All endpoints are generated automatically from the [twitch docs](https://dev.twitch.tv/docs/api/reference) page.  __Features:__  * Swagger UI for all Twitch API endpoints * Schemas for _Request Query Parameters_, _Request Body_, _Response Body_ * Some additional schemas like _Clip_, _ChatBadge_, _Prediction_, _Game_, _Channel_, _Video_ etc. * Response codes and examples * Generated types for TypeScript: [ts-twitch-api](https://github.com/DmitryScaletta/ts-twitch-api)  __Repository:__ [github.com/DmitryScaletta/twitch-api-swagger](https://github.com/DmitryScaletta/twitch-api-swagger)
 *
 * The version of the OpenAPI document: helix
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using TwistedTaleweaver.Integration.Twitch.Helix.Client;

namespace TwistedTaleweaver.Integration.Twitch.Helix.Model
{
    /// <summary>
    /// The event’s data.
    /// </summary>
    public partial class HypeTrainEventEventData : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HypeTrainEventEventData" /> class.
        /// </summary>
        /// <param name="broadcasterId">The ID of the broadcaster that’s running the Hype Train.</param>
        /// <param name="cooldownEndTime">The UTC date and time (in RFC3339 format) that another Hype Train can start.</param>
        /// <param name="expiresAt">The UTC date and time (in RFC3339 format) that the Hype Train ends.</param>
        /// <param name="goal">The value needed to reach the next level.</param>
        /// <param name="id">An ID that identifies this Hype Train.</param>
        /// <param name="lastContribution">lastContribution</param>
        /// <param name="level">The highest level that the Hype Train reached (the levels are 1 through 5).</param>
        /// <param name="startedAt">The UTC date and time (in RFC3339 format) that this Hype Train started.</param>
        /// <param name="topContributions">The top contributors for each contribution type. For example, the top contributor using BITS (by aggregate) and the top contributor using SUBS (by count).</param>
        /// <param name="total">The current total amount raised.</param>
        [JsonConstructor]
        public HypeTrainEventEventData(string broadcasterId, DateTime cooldownEndTime, DateTime expiresAt, int goal, string id, HypeTrainEventEventDataLastContribution lastContribution, int level, DateTime startedAt, List<HypeTrainEventEventDataTopContributionsInner> topContributions, int total)
        {
            BroadcasterId = broadcasterId;
            CooldownEndTime = cooldownEndTime;
            ExpiresAt = expiresAt;
            Goal = goal;
            Id = id;
            LastContribution = lastContribution;
            Level = level;
            StartedAt = startedAt;
            TopContributions = topContributions;
            Total = total;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The ID of the broadcaster that’s running the Hype Train.
        /// </summary>
        /// <value>The ID of the broadcaster that’s running the Hype Train.</value>
        [JsonPropertyName("broadcaster_id")]
        public string BroadcasterId { get; set; }

        /// <summary>
        /// The UTC date and time (in RFC3339 format) that another Hype Train can start.
        /// </summary>
        /// <value>The UTC date and time (in RFC3339 format) that another Hype Train can start.</value>
        [JsonPropertyName("cooldown_end_time")]
        public DateTime CooldownEndTime { get; set; }

        /// <summary>
        /// The UTC date and time (in RFC3339 format) that the Hype Train ends.
        /// </summary>
        /// <value>The UTC date and time (in RFC3339 format) that the Hype Train ends.</value>
        [JsonPropertyName("expires_at")]
        public DateTime ExpiresAt { get; set; }

        /// <summary>
        /// The value needed to reach the next level.
        /// </summary>
        /// <value>The value needed to reach the next level.</value>
        [JsonPropertyName("goal")]
        public int Goal { get; set; }

        /// <summary>
        /// An ID that identifies this Hype Train.
        /// </summary>
        /// <value>An ID that identifies this Hype Train.</value>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets LastContribution
        /// </summary>
        [JsonPropertyName("last_contribution")]
        public HypeTrainEventEventDataLastContribution LastContribution { get; set; }

        /// <summary>
        /// The highest level that the Hype Train reached (the levels are 1 through 5).
        /// </summary>
        /// <value>The highest level that the Hype Train reached (the levels are 1 through 5).</value>
        [JsonPropertyName("level")]
        public int Level { get; set; }

        /// <summary>
        /// The UTC date and time (in RFC3339 format) that this Hype Train started.
        /// </summary>
        /// <value>The UTC date and time (in RFC3339 format) that this Hype Train started.</value>
        [JsonPropertyName("started_at")]
        public DateTime StartedAt { get; set; }

        /// <summary>
        /// The top contributors for each contribution type. For example, the top contributor using BITS (by aggregate) and the top contributor using SUBS (by count).
        /// </summary>
        /// <value>The top contributors for each contribution type. For example, the top contributor using BITS (by aggregate) and the top contributor using SUBS (by count).</value>
        [JsonPropertyName("top_contributions")]
        public List<HypeTrainEventEventDataTopContributionsInner> TopContributions { get; set; }

        /// <summary>
        /// The current total amount raised.
        /// </summary>
        /// <value>The current total amount raised.</value>
        [JsonPropertyName("total")]
        public int Total { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class HypeTrainEventEventData {\n");
            sb.Append("  BroadcasterId: ").Append(BroadcasterId).Append("\n");
            sb.Append("  CooldownEndTime: ").Append(CooldownEndTime).Append("\n");
            sb.Append("  ExpiresAt: ").Append(ExpiresAt).Append("\n");
            sb.Append("  Goal: ").Append(Goal).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LastContribution: ").Append(LastContribution).Append("\n");
            sb.Append("  Level: ").Append(Level).Append("\n");
            sb.Append("  StartedAt: ").Append(StartedAt).Append("\n");
            sb.Append("  TopContributions: ").Append(TopContributions).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="HypeTrainEventEventData" />
    /// </summary>
    public class HypeTrainEventEventDataJsonConverter : JsonConverter<HypeTrainEventEventData>
    {
        /// <summary>
        /// The format to use to serialize CooldownEndTime
        /// </summary>
        public static string CooldownEndTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize ExpiresAt
        /// </summary>
        public static string ExpiresAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize StartedAt
        /// </summary>
        public static string StartedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="HypeTrainEventEventData" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override HypeTrainEventEventData Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> broadcasterId = default;
            Option<DateTime?> cooldownEndTime = default;
            Option<DateTime?> expiresAt = default;
            Option<int?> goal = default;
            Option<string?> id = default;
            Option<HypeTrainEventEventDataLastContribution?> lastContribution = default;
            Option<int?> level = default;
            Option<DateTime?> startedAt = default;
            Option<List<HypeTrainEventEventDataTopContributionsInner>?> topContributions = default;
            Option<int?> total = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "broadcaster_id":
                            broadcasterId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "cooldown_end_time":
                            cooldownEndTime = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "expires_at":
                            expiresAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "goal":
                            goal = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "last_contribution":
                            lastContribution = new Option<HypeTrainEventEventDataLastContribution?>(JsonSerializer.Deserialize<HypeTrainEventEventDataLastContribution>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "level":
                            level = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "started_at":
                            startedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "top_contributions":
                            topContributions = new Option<List<HypeTrainEventEventDataTopContributionsInner>?>(JsonSerializer.Deserialize<List<HypeTrainEventEventDataTopContributionsInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "total":
                            total = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!broadcasterId.IsSet)
                throw new ArgumentException("Property is required for class HypeTrainEventEventData.", nameof(broadcasterId));

            if (!cooldownEndTime.IsSet)
                throw new ArgumentException("Property is required for class HypeTrainEventEventData.", nameof(cooldownEndTime));

            if (!expiresAt.IsSet)
                throw new ArgumentException("Property is required for class HypeTrainEventEventData.", nameof(expiresAt));

            if (!goal.IsSet)
                throw new ArgumentException("Property is required for class HypeTrainEventEventData.", nameof(goal));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class HypeTrainEventEventData.", nameof(id));

            if (!lastContribution.IsSet)
                throw new ArgumentException("Property is required for class HypeTrainEventEventData.", nameof(lastContribution));

            if (!level.IsSet)
                throw new ArgumentException("Property is required for class HypeTrainEventEventData.", nameof(level));

            if (!startedAt.IsSet)
                throw new ArgumentException("Property is required for class HypeTrainEventEventData.", nameof(startedAt));

            if (!topContributions.IsSet)
                throw new ArgumentException("Property is required for class HypeTrainEventEventData.", nameof(topContributions));

            if (!total.IsSet)
                throw new ArgumentException("Property is required for class HypeTrainEventEventData.", nameof(total));

            if (broadcasterId.IsSet && broadcasterId.Value == null)
                throw new ArgumentNullException(nameof(broadcasterId), "Property is not nullable for class HypeTrainEventEventData.");

            if (cooldownEndTime.IsSet && cooldownEndTime.Value == null)
                throw new ArgumentNullException(nameof(cooldownEndTime), "Property is not nullable for class HypeTrainEventEventData.");

            if (expiresAt.IsSet && expiresAt.Value == null)
                throw new ArgumentNullException(nameof(expiresAt), "Property is not nullable for class HypeTrainEventEventData.");

            if (goal.IsSet && goal.Value == null)
                throw new ArgumentNullException(nameof(goal), "Property is not nullable for class HypeTrainEventEventData.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class HypeTrainEventEventData.");

            if (lastContribution.IsSet && lastContribution.Value == null)
                throw new ArgumentNullException(nameof(lastContribution), "Property is not nullable for class HypeTrainEventEventData.");

            if (level.IsSet && level.Value == null)
                throw new ArgumentNullException(nameof(level), "Property is not nullable for class HypeTrainEventEventData.");

            if (startedAt.IsSet && startedAt.Value == null)
                throw new ArgumentNullException(nameof(startedAt), "Property is not nullable for class HypeTrainEventEventData.");

            if (topContributions.IsSet && topContributions.Value == null)
                throw new ArgumentNullException(nameof(topContributions), "Property is not nullable for class HypeTrainEventEventData.");

            if (total.IsSet && total.Value == null)
                throw new ArgumentNullException(nameof(total), "Property is not nullable for class HypeTrainEventEventData.");

            return new HypeTrainEventEventData(broadcasterId.Value!, cooldownEndTime.Value!.Value!, expiresAt.Value!.Value!, goal.Value!.Value!, id.Value!, lastContribution.Value!, level.Value!.Value!, startedAt.Value!.Value!, topContributions.Value!, total.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="HypeTrainEventEventData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="hypeTrainEventEventData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, HypeTrainEventEventData hypeTrainEventEventData, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, hypeTrainEventEventData, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="HypeTrainEventEventData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="hypeTrainEventEventData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, HypeTrainEventEventData hypeTrainEventEventData, JsonSerializerOptions jsonSerializerOptions)
        {
            if (hypeTrainEventEventData.BroadcasterId == null)
                throw new ArgumentNullException(nameof(hypeTrainEventEventData.BroadcasterId), "Property is required for class HypeTrainEventEventData.");

            if (hypeTrainEventEventData.Id == null)
                throw new ArgumentNullException(nameof(hypeTrainEventEventData.Id), "Property is required for class HypeTrainEventEventData.");

            if (hypeTrainEventEventData.LastContribution == null)
                throw new ArgumentNullException(nameof(hypeTrainEventEventData.LastContribution), "Property is required for class HypeTrainEventEventData.");

            if (hypeTrainEventEventData.TopContributions == null)
                throw new ArgumentNullException(nameof(hypeTrainEventEventData.TopContributions), "Property is required for class HypeTrainEventEventData.");

            writer.WriteString("broadcaster_id", hypeTrainEventEventData.BroadcasterId);

            writer.WriteString("cooldown_end_time", hypeTrainEventEventData.CooldownEndTime.ToString(CooldownEndTimeFormat));

            writer.WriteString("expires_at", hypeTrainEventEventData.ExpiresAt.ToString(ExpiresAtFormat));

            writer.WriteNumber("goal", hypeTrainEventEventData.Goal);

            writer.WriteString("id", hypeTrainEventEventData.Id);

            writer.WritePropertyName("last_contribution");
            JsonSerializer.Serialize(writer, hypeTrainEventEventData.LastContribution, jsonSerializerOptions);
            writer.WriteNumber("level", hypeTrainEventEventData.Level);

            writer.WriteString("started_at", hypeTrainEventEventData.StartedAt.ToString(StartedAtFormat));

            writer.WritePropertyName("top_contributions");
            JsonSerializer.Serialize(writer, hypeTrainEventEventData.TopContributions, jsonSerializerOptions);
            writer.WriteNumber("total", hypeTrainEventEventData.Total);
        }
    }
}

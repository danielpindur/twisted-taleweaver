// <auto-generated>
/*
 * Twitch API Swagger UI (Unofficial)
 *
 * Unofficial Swagger UI for Twitch API.  All endpoints are generated automatically from the [twitch docs](https://dev.twitch.tv/docs/api/reference) page.  __Features:__  * Swagger UI for all Twitch API endpoints * Schemas for _Request Query Parameters_, _Request Body_, _Response Body_ * Some additional schemas like _Clip_, _ChatBadge_, _Prediction_, _Game_, _Channel_, _Video_ etc. * Response codes and examples * Generated types for TypeScript: [ts-twitch-api](https://github.com/DmitryScaletta/ts-twitch-api)  __Repository:__ [github.com/DmitryScaletta/twitch-api-swagger](https://github.com/DmitryScaletta/twitch-api-swagger)
 *
 * The version of the OpenAPI document: helix
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using TwistedTaleweaver.Integration.Twitch.Helix.Client;

namespace TwistedTaleweaver.Integration.Twitch.Helix.Model
{
    /// <summary>
    /// Game
    /// </summary>
    public partial class Game : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Game" /> class.
        /// </summary>
        /// <param name="id">An ID that identifies the category or game.</param>
        /// <param name="name">The category’s or game’s name.</param>
        /// <param name="boxArtUrl">A URL to the category’s or game’s box art. You must replace the &#x60;{width}x{height}&#x60; placeholder with the size of image you want.</param>
        /// <param name="igdbId">The ID that [IGDB](https://www.igdb.com/) uses to identify this game. If the IGDB ID is not available to Twitch, this field is set to an empty string.</param>
        [JsonConstructor]
        public Game(string id, string name, string boxArtUrl, string igdbId)
        {
            Id = id;
            Name = name;
            BoxArtUrl = boxArtUrl;
            IgdbId = igdbId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// An ID that identifies the category or game.
        /// </summary>
        /// <value>An ID that identifies the category or game.</value>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// The category’s or game’s name.
        /// </summary>
        /// <value>The category’s or game’s name.</value>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// A URL to the category’s or game’s box art. You must replace the &#x60;{width}x{height}&#x60; placeholder with the size of image you want.
        /// </summary>
        /// <value>A URL to the category’s or game’s box art. You must replace the &#x60;{width}x{height}&#x60; placeholder with the size of image you want.</value>
        [JsonPropertyName("box_art_url")]
        public string BoxArtUrl { get; set; }

        /// <summary>
        /// The ID that [IGDB](https://www.igdb.com/) uses to identify this game. If the IGDB ID is not available to Twitch, this field is set to an empty string.
        /// </summary>
        /// <value>The ID that [IGDB](https://www.igdb.com/) uses to identify this game. If the IGDB ID is not available to Twitch, this field is set to an empty string.</value>
        [JsonPropertyName("igdb_id")]
        public string IgdbId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Game {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  BoxArtUrl: ").Append(BoxArtUrl).Append("\n");
            sb.Append("  IgdbId: ").Append(IgdbId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Game" />
    /// </summary>
    public class GameJsonConverter : JsonConverter<Game>
    {
        /// <summary>
        /// Deserializes json to <see cref="Game" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Game Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> name = default;
            Option<string?> boxArtUrl = default;
            Option<string?> igdbId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "box_art_url":
                            boxArtUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "igdb_id":
                            igdbId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class Game.", nameof(id));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class Game.", nameof(name));

            if (!boxArtUrl.IsSet)
                throw new ArgumentException("Property is required for class Game.", nameof(boxArtUrl));

            if (!igdbId.IsSet)
                throw new ArgumentException("Property is required for class Game.", nameof(igdbId));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class Game.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class Game.");

            if (boxArtUrl.IsSet && boxArtUrl.Value == null)
                throw new ArgumentNullException(nameof(boxArtUrl), "Property is not nullable for class Game.");

            if (igdbId.IsSet && igdbId.Value == null)
                throw new ArgumentNullException(nameof(igdbId), "Property is not nullable for class Game.");

            return new Game(id.Value!, name.Value!, boxArtUrl.Value!, igdbId.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="Game" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="game"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Game game, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, game, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Game" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="game"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Game game, JsonSerializerOptions jsonSerializerOptions)
        {
            if (game.Id == null)
                throw new ArgumentNullException(nameof(game.Id), "Property is required for class Game.");

            if (game.Name == null)
                throw new ArgumentNullException(nameof(game.Name), "Property is required for class Game.");

            if (game.BoxArtUrl == null)
                throw new ArgumentNullException(nameof(game.BoxArtUrl), "Property is required for class Game.");

            if (game.IgdbId == null)
                throw new ArgumentNullException(nameof(game.IgdbId), "Property is required for class Game.");

            writer.WriteString("id", game.Id);

            writer.WriteString("name", game.Name);

            writer.WriteString("box_art_url", game.BoxArtUrl);

            writer.WriteString("igdb_id", game.IgdbId);
        }
    }
}

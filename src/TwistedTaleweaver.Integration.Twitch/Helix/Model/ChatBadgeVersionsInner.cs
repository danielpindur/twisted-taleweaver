// <auto-generated>
/*
 * Twitch API Swagger UI (Unofficial)
 *
 * Unofficial Swagger UI for Twitch API.  All endpoints are generated automatically from the [twitch docs](https://dev.twitch.tv/docs/api/reference) page.  __Features:__  * Swagger UI for all Twitch API endpoints * Schemas for _Request Query Parameters_, _Request Body_, _Response Body_ * Some additional schemas like _Clip_, _ChatBadge_, _Prediction_, _Game_, _Channel_, _Video_ etc. * Response codes and examples * Generated types for TypeScript: [ts-twitch-api](https://github.com/DmitryScaletta/ts-twitch-api)  __Repository:__ [github.com/DmitryScaletta/twitch-api-swagger](https://github.com/DmitryScaletta/twitch-api-swagger)
 *
 * The version of the OpenAPI document: helix
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using TwistedTaleweaver.Integration.Twitch.Helix.Client;

namespace TwistedTaleweaver.Integration.Twitch.Helix.Model
{
    /// <summary>
    /// ChatBadgeVersionsInner
    /// </summary>
    public partial class ChatBadgeVersionsInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChatBadgeVersionsInner" /> class.
        /// </summary>
        /// <param name="id">An ID that identifies this version of the badge. The ID can be any value. For example, for Bits, the ID is the Bits tier level, but for World of Warcraft, it could be Alliance or Horde.</param>
        /// <param name="imageUrl1x">A URL to the small version (18px x 18px) of the badge.</param>
        /// <param name="imageUrl2x">A URL to the medium version (36px x 36px) of the badge.</param>
        /// <param name="imageUrl4x">A URL to the large version (72px x 72px) of the badge.</param>
        /// <param name="title">The title of the badge.</param>
        /// <param name="description">The description of the badge.</param>
        /// <param name="clickAction">The action to take when clicking on the badge. Set to &#x60;null&#x60; if no action is specified.</param>
        /// <param name="clickUrl">The URL to navigate to when clicking on the badge. Set to &#x60;null&#x60; if no URL is specified.</param>
        [JsonConstructor]
        public ChatBadgeVersionsInner(string id, string imageUrl1x, string imageUrl2x, string imageUrl4x, string title, string description, string clickAction, string clickUrl)
        {
            Id = id;
            ImageUrl1x = imageUrl1x;
            ImageUrl2x = imageUrl2x;
            ImageUrl4x = imageUrl4x;
            Title = title;
            Description = description;
            ClickAction = clickAction;
            ClickUrl = clickUrl;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// An ID that identifies this version of the badge. The ID can be any value. For example, for Bits, the ID is the Bits tier level, but for World of Warcraft, it could be Alliance or Horde.
        /// </summary>
        /// <value>An ID that identifies this version of the badge. The ID can be any value. For example, for Bits, the ID is the Bits tier level, but for World of Warcraft, it could be Alliance or Horde.</value>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// A URL to the small version (18px x 18px) of the badge.
        /// </summary>
        /// <value>A URL to the small version (18px x 18px) of the badge.</value>
        [JsonPropertyName("image_url_1x")]
        public string ImageUrl1x { get; set; }

        /// <summary>
        /// A URL to the medium version (36px x 36px) of the badge.
        /// </summary>
        /// <value>A URL to the medium version (36px x 36px) of the badge.</value>
        [JsonPropertyName("image_url_2x")]
        public string ImageUrl2x { get; set; }

        /// <summary>
        /// A URL to the large version (72px x 72px) of the badge.
        /// </summary>
        /// <value>A URL to the large version (72px x 72px) of the badge.</value>
        [JsonPropertyName("image_url_4x")]
        public string ImageUrl4x { get; set; }

        /// <summary>
        /// The title of the badge.
        /// </summary>
        /// <value>The title of the badge.</value>
        [JsonPropertyName("title")]
        public string Title { get; set; }

        /// <summary>
        /// The description of the badge.
        /// </summary>
        /// <value>The description of the badge.</value>
        [JsonPropertyName("description")]
        public string Description { get; set; }

        /// <summary>
        /// The action to take when clicking on the badge. Set to &#x60;null&#x60; if no action is specified.
        /// </summary>
        /// <value>The action to take when clicking on the badge. Set to &#x60;null&#x60; if no action is specified.</value>
        [JsonPropertyName("click_action")]
        public string ClickAction { get; set; }

        /// <summary>
        /// The URL to navigate to when clicking on the badge. Set to &#x60;null&#x60; if no URL is specified.
        /// </summary>
        /// <value>The URL to navigate to when clicking on the badge. Set to &#x60;null&#x60; if no URL is specified.</value>
        [JsonPropertyName("click_url")]
        public string ClickUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ChatBadgeVersionsInner {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ImageUrl1x: ").Append(ImageUrl1x).Append("\n");
            sb.Append("  ImageUrl2x: ").Append(ImageUrl2x).Append("\n");
            sb.Append("  ImageUrl4x: ").Append(ImageUrl4x).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ClickAction: ").Append(ClickAction).Append("\n");
            sb.Append("  ClickUrl: ").Append(ClickUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ChatBadgeVersionsInner" />
    /// </summary>
    public class ChatBadgeVersionsInnerJsonConverter : JsonConverter<ChatBadgeVersionsInner>
    {
        /// <summary>
        /// Deserializes json to <see cref="ChatBadgeVersionsInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ChatBadgeVersionsInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> imageUrl1x = default;
            Option<string?> imageUrl2x = default;
            Option<string?> imageUrl4x = default;
            Option<string?> title = default;
            Option<string?> description = default;
            Option<string?> clickAction = default;
            Option<string?> clickUrl = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "image_url_1x":
                            imageUrl1x = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "image_url_2x":
                            imageUrl2x = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "image_url_4x":
                            imageUrl4x = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "click_action":
                            clickAction = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "click_url":
                            clickUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class ChatBadgeVersionsInner.", nameof(id));

            if (!imageUrl1x.IsSet)
                throw new ArgumentException("Property is required for class ChatBadgeVersionsInner.", nameof(imageUrl1x));

            if (!imageUrl2x.IsSet)
                throw new ArgumentException("Property is required for class ChatBadgeVersionsInner.", nameof(imageUrl2x));

            if (!imageUrl4x.IsSet)
                throw new ArgumentException("Property is required for class ChatBadgeVersionsInner.", nameof(imageUrl4x));

            if (!title.IsSet)
                throw new ArgumentException("Property is required for class ChatBadgeVersionsInner.", nameof(title));

            if (!description.IsSet)
                throw new ArgumentException("Property is required for class ChatBadgeVersionsInner.", nameof(description));

            if (!clickAction.IsSet)
                throw new ArgumentException("Property is required for class ChatBadgeVersionsInner.", nameof(clickAction));

            if (!clickUrl.IsSet)
                throw new ArgumentException("Property is required for class ChatBadgeVersionsInner.", nameof(clickUrl));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class ChatBadgeVersionsInner.");

            if (imageUrl1x.IsSet && imageUrl1x.Value == null)
                throw new ArgumentNullException(nameof(imageUrl1x), "Property is not nullable for class ChatBadgeVersionsInner.");

            if (imageUrl2x.IsSet && imageUrl2x.Value == null)
                throw new ArgumentNullException(nameof(imageUrl2x), "Property is not nullable for class ChatBadgeVersionsInner.");

            if (imageUrl4x.IsSet && imageUrl4x.Value == null)
                throw new ArgumentNullException(nameof(imageUrl4x), "Property is not nullable for class ChatBadgeVersionsInner.");

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class ChatBadgeVersionsInner.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class ChatBadgeVersionsInner.");

            if (clickAction.IsSet && clickAction.Value == null)
                throw new ArgumentNullException(nameof(clickAction), "Property is not nullable for class ChatBadgeVersionsInner.");

            if (clickUrl.IsSet && clickUrl.Value == null)
                throw new ArgumentNullException(nameof(clickUrl), "Property is not nullable for class ChatBadgeVersionsInner.");

            return new ChatBadgeVersionsInner(id.Value!, imageUrl1x.Value!, imageUrl2x.Value!, imageUrl4x.Value!, title.Value!, description.Value!, clickAction.Value!, clickUrl.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="ChatBadgeVersionsInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="chatBadgeVersionsInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ChatBadgeVersionsInner chatBadgeVersionsInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, chatBadgeVersionsInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ChatBadgeVersionsInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="chatBadgeVersionsInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ChatBadgeVersionsInner chatBadgeVersionsInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (chatBadgeVersionsInner.Id == null)
                throw new ArgumentNullException(nameof(chatBadgeVersionsInner.Id), "Property is required for class ChatBadgeVersionsInner.");

            if (chatBadgeVersionsInner.ImageUrl1x == null)
                throw new ArgumentNullException(nameof(chatBadgeVersionsInner.ImageUrl1x), "Property is required for class ChatBadgeVersionsInner.");

            if (chatBadgeVersionsInner.ImageUrl2x == null)
                throw new ArgumentNullException(nameof(chatBadgeVersionsInner.ImageUrl2x), "Property is required for class ChatBadgeVersionsInner.");

            if (chatBadgeVersionsInner.ImageUrl4x == null)
                throw new ArgumentNullException(nameof(chatBadgeVersionsInner.ImageUrl4x), "Property is required for class ChatBadgeVersionsInner.");

            if (chatBadgeVersionsInner.Title == null)
                throw new ArgumentNullException(nameof(chatBadgeVersionsInner.Title), "Property is required for class ChatBadgeVersionsInner.");

            if (chatBadgeVersionsInner.Description == null)
                throw new ArgumentNullException(nameof(chatBadgeVersionsInner.Description), "Property is required for class ChatBadgeVersionsInner.");

            if (chatBadgeVersionsInner.ClickAction == null)
                throw new ArgumentNullException(nameof(chatBadgeVersionsInner.ClickAction), "Property is required for class ChatBadgeVersionsInner.");

            if (chatBadgeVersionsInner.ClickUrl == null)
                throw new ArgumentNullException(nameof(chatBadgeVersionsInner.ClickUrl), "Property is required for class ChatBadgeVersionsInner.");

            writer.WriteString("id", chatBadgeVersionsInner.Id);

            writer.WriteString("image_url_1x", chatBadgeVersionsInner.ImageUrl1x);

            writer.WriteString("image_url_2x", chatBadgeVersionsInner.ImageUrl2x);

            writer.WriteString("image_url_4x", chatBadgeVersionsInner.ImageUrl4x);

            writer.WriteString("title", chatBadgeVersionsInner.Title);

            writer.WriteString("description", chatBadgeVersionsInner.Description);

            writer.WriteString("click_action", chatBadgeVersionsInner.ClickAction);

            writer.WriteString("click_url", chatBadgeVersionsInner.ClickUrl);
        }
    }
}

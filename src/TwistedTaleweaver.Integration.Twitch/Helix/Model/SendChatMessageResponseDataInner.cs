// <auto-generated>
/*
 * Twitch API Swagger UI (Unofficial)
 *
 * Unofficial Swagger UI for Twitch API.  All endpoints are generated automatically from the [twitch docs](https://dev.twitch.tv/docs/api/reference) page.  __Features:__  * Swagger UI for all Twitch API endpoints * Schemas for _Request Query Parameters_, _Request Body_, _Response Body_ * Some additional schemas like _Clip_, _ChatBadge_, _Prediction_, _Game_, _Channel_, _Video_ etc. * Response codes and examples * Generated types for TypeScript: [ts-twitch-api](https://github.com/DmitryScaletta/ts-twitch-api)  __Repository:__ [github.com/DmitryScaletta/twitch-api-swagger](https://github.com/DmitryScaletta/twitch-api-swagger)
 *
 * The version of the OpenAPI document: helix
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using TwistedTaleweaver.Integration.Twitch.Helix.Client;

namespace TwistedTaleweaver.Integration.Twitch.Helix.Model
{
    /// <summary>
    /// SendChatMessageResponseDataInner
    /// </summary>
    public partial class SendChatMessageResponseDataInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SendChatMessageResponseDataInner" /> class.
        /// </summary>
        /// <param name="messageId">The message id for the message that was sent.</param>
        /// <param name="isSent">If the message passed all checks and was sent.</param>
        /// <param name="dropReason">dropReason</param>
        [JsonConstructor]
        public SendChatMessageResponseDataInner(string messageId, bool isSent, Option<SendChatMessageResponseDataInnerDropReason?> dropReason = default)
        {
            MessageId = messageId;
            IsSent = isSent;
            DropReasonOption = dropReason;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The message id for the message that was sent.
        /// </summary>
        /// <value>The message id for the message that was sent.</value>
        [JsonPropertyName("message_id")]
        public string MessageId { get; set; }

        /// <summary>
        /// If the message passed all checks and was sent.
        /// </summary>
        /// <value>If the message passed all checks and was sent.</value>
        [JsonPropertyName("is_sent")]
        public bool IsSent { get; set; }

        /// <summary>
        /// Used to track the state of DropReason
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<SendChatMessageResponseDataInnerDropReason?> DropReasonOption { get; private set; }

        /// <summary>
        /// Gets or Sets DropReason
        /// </summary>
        [JsonPropertyName("drop_reason")]
        public SendChatMessageResponseDataInnerDropReason? DropReason { get { return this.DropReasonOption; } set { this.DropReasonOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SendChatMessageResponseDataInner {\n");
            sb.Append("  MessageId: ").Append(MessageId).Append("\n");
            sb.Append("  IsSent: ").Append(IsSent).Append("\n");
            sb.Append("  DropReason: ").Append(DropReason).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SendChatMessageResponseDataInner" />
    /// </summary>
    public class SendChatMessageResponseDataInnerJsonConverter : JsonConverter<SendChatMessageResponseDataInner>
    {
        /// <summary>
        /// Deserializes json to <see cref="SendChatMessageResponseDataInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SendChatMessageResponseDataInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> messageId = default;
            Option<bool?> isSent = default;
            Option<SendChatMessageResponseDataInnerDropReason?> dropReason = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "message_id":
                            messageId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "is_sent":
                            isSent = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "drop_reason":
                            dropReason = new Option<SendChatMessageResponseDataInnerDropReason?>(JsonSerializer.Deserialize<SendChatMessageResponseDataInnerDropReason>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!messageId.IsSet)
                throw new ArgumentException("Property is required for class SendChatMessageResponseDataInner.", nameof(messageId));

            if (!isSent.IsSet)
                throw new ArgumentException("Property is required for class SendChatMessageResponseDataInner.", nameof(isSent));

            if (messageId.IsSet && messageId.Value == null)
                throw new ArgumentNullException(nameof(messageId), "Property is not nullable for class SendChatMessageResponseDataInner.");

            if (isSent.IsSet && isSent.Value == null)
                throw new ArgumentNullException(nameof(isSent), "Property is not nullable for class SendChatMessageResponseDataInner.");

            if (dropReason.IsSet && dropReason.Value == null)
                throw new ArgumentNullException(nameof(dropReason), "Property is not nullable for class SendChatMessageResponseDataInner.");

            return new SendChatMessageResponseDataInner(messageId.Value!, isSent.Value!.Value!, dropReason);
        }

        /// <summary>
        /// Serializes a <see cref="SendChatMessageResponseDataInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="sendChatMessageResponseDataInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SendChatMessageResponseDataInner sendChatMessageResponseDataInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, sendChatMessageResponseDataInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SendChatMessageResponseDataInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="sendChatMessageResponseDataInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SendChatMessageResponseDataInner sendChatMessageResponseDataInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (sendChatMessageResponseDataInner.MessageId == null)
                throw new ArgumentNullException(nameof(sendChatMessageResponseDataInner.MessageId), "Property is required for class SendChatMessageResponseDataInner.");

            if (sendChatMessageResponseDataInner.DropReasonOption.IsSet && sendChatMessageResponseDataInner.DropReason == null)
                throw new ArgumentNullException(nameof(sendChatMessageResponseDataInner.DropReason), "Property is required for class SendChatMessageResponseDataInner.");

            writer.WriteString("message_id", sendChatMessageResponseDataInner.MessageId);

            writer.WriteBoolean("is_sent", sendChatMessageResponseDataInner.IsSent);

            if (sendChatMessageResponseDataInner.DropReasonOption.IsSet)
            {
                writer.WritePropertyName("drop_reason");
                JsonSerializer.Serialize(writer, sendChatMessageResponseDataInner.DropReason, jsonSerializerOptions);
            }
        }
    }
}

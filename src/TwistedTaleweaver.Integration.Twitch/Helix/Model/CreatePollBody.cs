// <auto-generated>
/*
 * Twitch API Swagger UI (Unofficial)
 *
 * Unofficial Swagger UI for Twitch API.  All endpoints are generated automatically from the [twitch docs](https://dev.twitch.tv/docs/api/reference) page.  __Features:__  * Swagger UI for all Twitch API endpoints * Schemas for _Request Query Parameters_, _Request Body_, _Response Body_ * Some additional schemas like _Clip_, _ChatBadge_, _Prediction_, _Game_, _Channel_, _Video_ etc. * Response codes and examples * Generated types for TypeScript: [ts-twitch-api](https://github.com/DmitryScaletta/ts-twitch-api)  __Repository:__ [github.com/DmitryScaletta/twitch-api-swagger](https://github.com/DmitryScaletta/twitch-api-swagger)
 *
 * The version of the OpenAPI document: helix
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using TwistedTaleweaver.Integration.Twitch.Helix.Client;

namespace TwistedTaleweaver.Integration.Twitch.Helix.Model
{
    /// <summary>
    /// CreatePollBody
    /// </summary>
    public partial class CreatePollBody : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreatePollBody" /> class.
        /// </summary>
        /// <param name="broadcasterId">The ID of the broadcaster that’s running the poll. This ID must match the user ID in the user access token.</param>
        /// <param name="title">The question that viewers will vote on. For example, _What game should I play next?_ The question may contain a maximum of 60 characters.</param>
        /// <param name="choices">A list of choices that viewers may choose from. The list must contain a minimum of 2 choices and up to a maximum of 5 choices.</param>
        /// <param name="duration">The length of time (in seconds) that the poll will run for. The minimum is 15 seconds and the maximum is 1800 seconds (30 minutes).</param>
        /// <param name="channelPointsVotingEnabled">A Boolean value that indicates whether viewers may cast additional votes using Channel Points. If **true**, the viewer may cast more than one vote but each additional vote costs the number of Channel Points specified in &#x60;channel_points_per_vote&#x60;. The default is **false** (viewers may cast only one vote). For information about Channel Points, see [Channel Points Guide](https://help.twitch.tv/s/article/channel-points-guide).</param>
        /// <param name="channelPointsPerVote">The number of points that the viewer must spend to cast one additional vote. The minimum is 1 and the maximum is 1000000\\. Set only if &#x60;ChannelPointsVotingEnabled&#x60; is **true**.</param>
        [JsonConstructor]
        public CreatePollBody(string broadcasterId, string title, List<CreatePollBodyChoicesInner> choices, int duration, Option<bool?> channelPointsVotingEnabled = default, Option<int?> channelPointsPerVote = default)
        {
            BroadcasterId = broadcasterId;
            Title = title;
            Choices = choices;
            Duration = duration;
            ChannelPointsVotingEnabledOption = channelPointsVotingEnabled;
            ChannelPointsPerVoteOption = channelPointsPerVote;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The ID of the broadcaster that’s running the poll. This ID must match the user ID in the user access token.
        /// </summary>
        /// <value>The ID of the broadcaster that’s running the poll. This ID must match the user ID in the user access token.</value>
        [JsonPropertyName("broadcaster_id")]
        public string BroadcasterId { get; set; }

        /// <summary>
        /// The question that viewers will vote on. For example, _What game should I play next?_ The question may contain a maximum of 60 characters.
        /// </summary>
        /// <value>The question that viewers will vote on. For example, _What game should I play next?_ The question may contain a maximum of 60 characters.</value>
        [JsonPropertyName("title")]
        public string Title { get; set; }

        /// <summary>
        /// A list of choices that viewers may choose from. The list must contain a minimum of 2 choices and up to a maximum of 5 choices.
        /// </summary>
        /// <value>A list of choices that viewers may choose from. The list must contain a minimum of 2 choices and up to a maximum of 5 choices.</value>
        [JsonPropertyName("choices")]
        public List<CreatePollBodyChoicesInner> Choices { get; set; }

        /// <summary>
        /// The length of time (in seconds) that the poll will run for. The minimum is 15 seconds and the maximum is 1800 seconds (30 minutes).
        /// </summary>
        /// <value>The length of time (in seconds) that the poll will run for. The minimum is 15 seconds and the maximum is 1800 seconds (30 minutes).</value>
        [JsonPropertyName("duration")]
        public int Duration { get; set; }

        /// <summary>
        /// Used to track the state of ChannelPointsVotingEnabled
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ChannelPointsVotingEnabledOption { get; private set; }

        /// <summary>
        /// A Boolean value that indicates whether viewers may cast additional votes using Channel Points. If **true**, the viewer may cast more than one vote but each additional vote costs the number of Channel Points specified in &#x60;channel_points_per_vote&#x60;. The default is **false** (viewers may cast only one vote). For information about Channel Points, see [Channel Points Guide](https://help.twitch.tv/s/article/channel-points-guide).
        /// </summary>
        /// <value>A Boolean value that indicates whether viewers may cast additional votes using Channel Points. If **true**, the viewer may cast more than one vote but each additional vote costs the number of Channel Points specified in &#x60;channel_points_per_vote&#x60;. The default is **false** (viewers may cast only one vote). For information about Channel Points, see [Channel Points Guide](https://help.twitch.tv/s/article/channel-points-guide).</value>
        [JsonPropertyName("channel_points_voting_enabled")]
        public bool? ChannelPointsVotingEnabled { get { return this.ChannelPointsVotingEnabledOption; } set { this.ChannelPointsVotingEnabledOption = new(value); } }

        /// <summary>
        /// Used to track the state of ChannelPointsPerVote
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ChannelPointsPerVoteOption { get; private set; }

        /// <summary>
        /// The number of points that the viewer must spend to cast one additional vote. The minimum is 1 and the maximum is 1000000\\. Set only if &#x60;ChannelPointsVotingEnabled&#x60; is **true**.
        /// </summary>
        /// <value>The number of points that the viewer must spend to cast one additional vote. The minimum is 1 and the maximum is 1000000\\. Set only if &#x60;ChannelPointsVotingEnabled&#x60; is **true**.</value>
        [JsonPropertyName("channel_points_per_vote")]
        public int? ChannelPointsPerVote { get { return this.ChannelPointsPerVoteOption; } set { this.ChannelPointsPerVoteOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreatePollBody {\n");
            sb.Append("  BroadcasterId: ").Append(BroadcasterId).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Choices: ").Append(Choices).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  ChannelPointsVotingEnabled: ").Append(ChannelPointsVotingEnabled).Append("\n");
            sb.Append("  ChannelPointsPerVote: ").Append(ChannelPointsPerVote).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreatePollBody" />
    /// </summary>
    public class CreatePollBodyJsonConverter : JsonConverter<CreatePollBody>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreatePollBody" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreatePollBody Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> broadcasterId = default;
            Option<string?> title = default;
            Option<List<CreatePollBodyChoicesInner>?> choices = default;
            Option<int?> duration = default;
            Option<bool?> channelPointsVotingEnabled = default;
            Option<int?> channelPointsPerVote = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "broadcaster_id":
                            broadcasterId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "choices":
                            choices = new Option<List<CreatePollBodyChoicesInner>?>(JsonSerializer.Deserialize<List<CreatePollBodyChoicesInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "duration":
                            duration = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "channel_points_voting_enabled":
                            channelPointsVotingEnabled = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "channel_points_per_vote":
                            channelPointsPerVote = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!broadcasterId.IsSet)
                throw new ArgumentException("Property is required for class CreatePollBody.", nameof(broadcasterId));

            if (!title.IsSet)
                throw new ArgumentException("Property is required for class CreatePollBody.", nameof(title));

            if (!choices.IsSet)
                throw new ArgumentException("Property is required for class CreatePollBody.", nameof(choices));

            if (!duration.IsSet)
                throw new ArgumentException("Property is required for class CreatePollBody.", nameof(duration));

            if (broadcasterId.IsSet && broadcasterId.Value == null)
                throw new ArgumentNullException(nameof(broadcasterId), "Property is not nullable for class CreatePollBody.");

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class CreatePollBody.");

            if (choices.IsSet && choices.Value == null)
                throw new ArgumentNullException(nameof(choices), "Property is not nullable for class CreatePollBody.");

            if (duration.IsSet && duration.Value == null)
                throw new ArgumentNullException(nameof(duration), "Property is not nullable for class CreatePollBody.");

            if (channelPointsVotingEnabled.IsSet && channelPointsVotingEnabled.Value == null)
                throw new ArgumentNullException(nameof(channelPointsVotingEnabled), "Property is not nullable for class CreatePollBody.");

            if (channelPointsPerVote.IsSet && channelPointsPerVote.Value == null)
                throw new ArgumentNullException(nameof(channelPointsPerVote), "Property is not nullable for class CreatePollBody.");

            return new CreatePollBody(broadcasterId.Value!, title.Value!, choices.Value!, duration.Value!.Value!, channelPointsVotingEnabled, channelPointsPerVote);
        }

        /// <summary>
        /// Serializes a <see cref="CreatePollBody" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createPollBody"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreatePollBody createPollBody, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createPollBody, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreatePollBody" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createPollBody"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CreatePollBody createPollBody, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createPollBody.BroadcasterId == null)
                throw new ArgumentNullException(nameof(createPollBody.BroadcasterId), "Property is required for class CreatePollBody.");

            if (createPollBody.Title == null)
                throw new ArgumentNullException(nameof(createPollBody.Title), "Property is required for class CreatePollBody.");

            if (createPollBody.Choices == null)
                throw new ArgumentNullException(nameof(createPollBody.Choices), "Property is required for class CreatePollBody.");

            writer.WriteString("broadcaster_id", createPollBody.BroadcasterId);

            writer.WriteString("title", createPollBody.Title);

            writer.WritePropertyName("choices");
            JsonSerializer.Serialize(writer, createPollBody.Choices, jsonSerializerOptions);
            writer.WriteNumber("duration", createPollBody.Duration);

            if (createPollBody.ChannelPointsVotingEnabledOption.IsSet)
                writer.WriteBoolean("channel_points_voting_enabled", createPollBody.ChannelPointsVotingEnabledOption.Value!.Value);

            if (createPollBody.ChannelPointsPerVoteOption.IsSet)
                writer.WriteNumber("channel_points_per_vote", createPollBody.ChannelPointsPerVoteOption.Value!.Value);
        }
    }
}

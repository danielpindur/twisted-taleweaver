// <auto-generated>
/*
 * Twitch API Swagger UI (Unofficial)
 *
 * Unofficial Swagger UI for Twitch API.  All endpoints are generated automatically from the [twitch docs](https://dev.twitch.tv/docs/api/reference) page.  __Features:__  * Swagger UI for all Twitch API endpoints * Schemas for _Request Query Parameters_, _Request Body_, _Response Body_ * Some additional schemas like _Clip_, _ChatBadge_, _Prediction_, _Game_, _Channel_, _Video_ etc. * Response codes and examples * Generated types for TypeScript: [ts-twitch-api](https://github.com/DmitryScaletta/ts-twitch-api)  __Repository:__ [github.com/DmitryScaletta/twitch-api-swagger](https://github.com/DmitryScaletta/twitch-api-swagger)
 *
 * The version of the OpenAPI document: helix
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using TwistedTaleweaver.Integration.Twitch.Helix.Client;

namespace TwistedTaleweaver.Integration.Twitch.Helix.Model
{
    /// <summary>
    /// SetExtensionConfigurationSegmentBody
    /// </summary>
    public partial class SetExtensionConfigurationSegmentBody : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SetExtensionConfigurationSegmentBody" /> class.
        /// </summary>
        /// <param name="extensionId">The ID of the extension to update.</param>
        /// <param name="segment">The configuration segment to update. Possible case-sensitive values are:      * broadcaster * developer * global</param>
        /// <param name="broadcasterId">The ID of the broadcaster that installed the extension. Include this field only if the &#x60;segment&#x60; is set to developer or broadcaster.</param>
        /// <param name="content">The contents of the segment. This string may be a plain-text string or a string-encoded JSON object.</param>
        /// <param name="varVersion">The version number that identifies this definition of the segment’s data. If not specified, the latest definition is updated.</param>
        [JsonConstructor]
        public SetExtensionConfigurationSegmentBody(string extensionId, SegmentEnum segment, Option<string?> broadcasterId = default, Option<string?> content = default, Option<string?> varVersion = default)
        {
            ExtensionId = extensionId;
            Segment = segment;
            BroadcasterIdOption = broadcasterId;
            ContentOption = content;
            VarVersionOption = varVersion;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The configuration segment to update. Possible case-sensitive values are:      * broadcaster * developer * global
        /// </summary>
        /// <value>The configuration segment to update. Possible case-sensitive values are:      * broadcaster * developer * global</value>
        public enum SegmentEnum
        {
            /// <summary>
            /// Enum Broadcaster for value: broadcaster
            /// </summary>
            Broadcaster = 1,

            /// <summary>
            /// Enum Developer for value: developer
            /// </summary>
            Developer = 2,

            /// <summary>
            /// Enum Global for value: global
            /// </summary>
            Global = 3
        }

        /// <summary>
        /// Returns a <see cref="SegmentEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static SegmentEnum SegmentEnumFromString(string value)
        {
            if (value.Equals("broadcaster"))
                return SegmentEnum.Broadcaster;

            if (value.Equals("developer"))
                return SegmentEnum.Developer;

            if (value.Equals("global"))
                return SegmentEnum.Global;

            throw new NotImplementedException($"Could not convert value to type SegmentEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="SegmentEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static SegmentEnum? SegmentEnumFromStringOrDefault(string value)
        {
            if (value.Equals("broadcaster"))
                return SegmentEnum.Broadcaster;

            if (value.Equals("developer"))
                return SegmentEnum.Developer;

            if (value.Equals("global"))
                return SegmentEnum.Global;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="SegmentEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string SegmentEnumToJsonValue(SegmentEnum value)
        {
            if (value == SegmentEnum.Broadcaster)
                return "broadcaster";

            if (value == SegmentEnum.Developer)
                return "developer";

            if (value == SegmentEnum.Global)
                return "global";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// The configuration segment to update. Possible case-sensitive values are:      * broadcaster * developer * global
        /// </summary>
        /// <value>The configuration segment to update. Possible case-sensitive values are:      * broadcaster * developer * global</value>
        [JsonPropertyName("segment")]
        public SegmentEnum Segment { get; set; }

        /// <summary>
        /// The ID of the extension to update.
        /// </summary>
        /// <value>The ID of the extension to update.</value>
        [JsonPropertyName("extension_id")]
        public string ExtensionId { get; set; }

        /// <summary>
        /// Used to track the state of BroadcasterId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BroadcasterIdOption { get; private set; }

        /// <summary>
        /// The ID of the broadcaster that installed the extension. Include this field only if the &#x60;segment&#x60; is set to developer or broadcaster.
        /// </summary>
        /// <value>The ID of the broadcaster that installed the extension. Include this field only if the &#x60;segment&#x60; is set to developer or broadcaster.</value>
        [JsonPropertyName("broadcaster_id")]
        public string? BroadcasterId { get { return this.BroadcasterIdOption; } set { this.BroadcasterIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Content
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ContentOption { get; private set; }

        /// <summary>
        /// The contents of the segment. This string may be a plain-text string or a string-encoded JSON object.
        /// </summary>
        /// <value>The contents of the segment. This string may be a plain-text string or a string-encoded JSON object.</value>
        [JsonPropertyName("content")]
        public string? Content { get { return this.ContentOption; } set { this.ContentOption = new(value); } }

        /// <summary>
        /// Used to track the state of VarVersion
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> VarVersionOption { get; private set; }

        /// <summary>
        /// The version number that identifies this definition of the segment’s data. If not specified, the latest definition is updated.
        /// </summary>
        /// <value>The version number that identifies this definition of the segment’s data. If not specified, the latest definition is updated.</value>
        [JsonPropertyName("version")]
        public string? VarVersion { get { return this.VarVersionOption; } set { this.VarVersionOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SetExtensionConfigurationSegmentBody {\n");
            sb.Append("  ExtensionId: ").Append(ExtensionId).Append("\n");
            sb.Append("  Segment: ").Append(Segment).Append("\n");
            sb.Append("  BroadcasterId: ").Append(BroadcasterId).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SetExtensionConfigurationSegmentBody" />
    /// </summary>
    public class SetExtensionConfigurationSegmentBodyJsonConverter : JsonConverter<SetExtensionConfigurationSegmentBody>
    {
        /// <summary>
        /// Deserializes json to <see cref="SetExtensionConfigurationSegmentBody" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SetExtensionConfigurationSegmentBody Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> extensionId = default;
            Option<SetExtensionConfigurationSegmentBody.SegmentEnum?> segment = default;
            Option<string?> broadcasterId = default;
            Option<string?> content = default;
            Option<string?> varVersion = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "extension_id":
                            extensionId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "segment":
                            string? segmentRawValue = utf8JsonReader.GetString();
                            if (segmentRawValue != null)
                                segment = new Option<SetExtensionConfigurationSegmentBody.SegmentEnum?>(SetExtensionConfigurationSegmentBody.SegmentEnumFromStringOrDefault(segmentRawValue));
                            break;
                        case "broadcaster_id":
                            broadcasterId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "content":
                            content = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "version":
                            varVersion = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!extensionId.IsSet)
                throw new ArgumentException("Property is required for class SetExtensionConfigurationSegmentBody.", nameof(extensionId));

            if (!segment.IsSet)
                throw new ArgumentException("Property is required for class SetExtensionConfigurationSegmentBody.", nameof(segment));

            if (extensionId.IsSet && extensionId.Value == null)
                throw new ArgumentNullException(nameof(extensionId), "Property is not nullable for class SetExtensionConfigurationSegmentBody.");

            if (segment.IsSet && segment.Value == null)
                throw new ArgumentNullException(nameof(segment), "Property is not nullable for class SetExtensionConfigurationSegmentBody.");

            if (broadcasterId.IsSet && broadcasterId.Value == null)
                throw new ArgumentNullException(nameof(broadcasterId), "Property is not nullable for class SetExtensionConfigurationSegmentBody.");

            if (content.IsSet && content.Value == null)
                throw new ArgumentNullException(nameof(content), "Property is not nullable for class SetExtensionConfigurationSegmentBody.");

            if (varVersion.IsSet && varVersion.Value == null)
                throw new ArgumentNullException(nameof(varVersion), "Property is not nullable for class SetExtensionConfigurationSegmentBody.");

            return new SetExtensionConfigurationSegmentBody(extensionId.Value!, segment.Value!.Value!, broadcasterId, content, varVersion);
        }

        /// <summary>
        /// Serializes a <see cref="SetExtensionConfigurationSegmentBody" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="setExtensionConfigurationSegmentBody"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SetExtensionConfigurationSegmentBody setExtensionConfigurationSegmentBody, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, setExtensionConfigurationSegmentBody, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SetExtensionConfigurationSegmentBody" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="setExtensionConfigurationSegmentBody"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SetExtensionConfigurationSegmentBody setExtensionConfigurationSegmentBody, JsonSerializerOptions jsonSerializerOptions)
        {
            if (setExtensionConfigurationSegmentBody.ExtensionId == null)
                throw new ArgumentNullException(nameof(setExtensionConfigurationSegmentBody.ExtensionId), "Property is required for class SetExtensionConfigurationSegmentBody.");

            if (setExtensionConfigurationSegmentBody.BroadcasterIdOption.IsSet && setExtensionConfigurationSegmentBody.BroadcasterId == null)
                throw new ArgumentNullException(nameof(setExtensionConfigurationSegmentBody.BroadcasterId), "Property is required for class SetExtensionConfigurationSegmentBody.");

            if (setExtensionConfigurationSegmentBody.ContentOption.IsSet && setExtensionConfigurationSegmentBody.Content == null)
                throw new ArgumentNullException(nameof(setExtensionConfigurationSegmentBody.Content), "Property is required for class SetExtensionConfigurationSegmentBody.");

            if (setExtensionConfigurationSegmentBody.VarVersionOption.IsSet && setExtensionConfigurationSegmentBody.VarVersion == null)
                throw new ArgumentNullException(nameof(setExtensionConfigurationSegmentBody.VarVersion), "Property is required for class SetExtensionConfigurationSegmentBody.");

            writer.WriteString("extension_id", setExtensionConfigurationSegmentBody.ExtensionId);

            var segmentRawValue = SetExtensionConfigurationSegmentBody.SegmentEnumToJsonValue(setExtensionConfigurationSegmentBody.Segment);
            writer.WriteString("segment", segmentRawValue);
            if (setExtensionConfigurationSegmentBody.BroadcasterIdOption.IsSet)
                writer.WriteString("broadcaster_id", setExtensionConfigurationSegmentBody.BroadcasterId);

            if (setExtensionConfigurationSegmentBody.ContentOption.IsSet)
                writer.WriteString("content", setExtensionConfigurationSegmentBody.Content);

            if (setExtensionConfigurationSegmentBody.VarVersionOption.IsSet)
                writer.WriteString("version", setExtensionConfigurationSegmentBody.VarVersion);
        }
    }
}

// <auto-generated>
/*
 * Twitch API Swagger UI (Unofficial)
 *
 * Unofficial Swagger UI for Twitch API.  All endpoints are generated automatically from the [twitch docs](https://dev.twitch.tv/docs/api/reference) page.  __Features:__  * Swagger UI for all Twitch API endpoints * Schemas for _Request Query Parameters_, _Request Body_, _Response Body_ * Some additional schemas like _Clip_, _ChatBadge_, _Prediction_, _Game_, _Channel_, _Video_ etc. * Response codes and examples * Generated types for TypeScript: [ts-twitch-api](https://github.com/DmitryScaletta/ts-twitch-api)  __Repository:__ [github.com/DmitryScaletta/twitch-api-swagger](https://github.com/DmitryScaletta/twitch-api-swagger)
 *
 * The version of the OpenAPI document: helix
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using TwistedTaleweaver.Integration.Twitch.Helix.Client;

namespace TwistedTaleweaver.Integration.Twitch.Helix.Model
{
    /// <summary>
    /// UpdateConduitShardsResponseErrorsInner
    /// </summary>
    public partial class UpdateConduitShardsResponseErrorsInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateConduitShardsResponseErrorsInner" /> class.
        /// </summary>
        /// <param name="id">Shard ID.</param>
        /// <param name="message">The error that occurred while updating the shard. Possible errors:      * The length of the string in the secret field is not valid. * The URL in the transport&#39;s callback field is not valid. The URL must use the HTTPS protocol and the 443 port number. * The value specified in the method field is not valid. * The callback field is required if you specify the webhook transport method. * The session\\_id field is required if you specify the WebSocket transport method. * The websocket session is not connected. * The shard id is outside of the conduit’s range.</param>
        /// <param name="code">Error codes used to represent a specific error condition while attempting to update shards.</param>
        [JsonConstructor]
        public UpdateConduitShardsResponseErrorsInner(string id, string message, string code)
        {
            Id = id;
            Message = message;
            Code = code;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Shard ID.
        /// </summary>
        /// <value>Shard ID.</value>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// The error that occurred while updating the shard. Possible errors:      * The length of the string in the secret field is not valid. * The URL in the transport&#39;s callback field is not valid. The URL must use the HTTPS protocol and the 443 port number. * The value specified in the method field is not valid. * The callback field is required if you specify the webhook transport method. * The session\\_id field is required if you specify the WebSocket transport method. * The websocket session is not connected. * The shard id is outside of the conduit’s range.
        /// </summary>
        /// <value>The error that occurred while updating the shard. Possible errors:      * The length of the string in the secret field is not valid. * The URL in the transport&#39;s callback field is not valid. The URL must use the HTTPS protocol and the 443 port number. * The value specified in the method field is not valid. * The callback field is required if you specify the webhook transport method. * The session\\_id field is required if you specify the WebSocket transport method. * The websocket session is not connected. * The shard id is outside of the conduit’s range.</value>
        [JsonPropertyName("message")]
        public string Message { get; set; }

        /// <summary>
        /// Error codes used to represent a specific error condition while attempting to update shards.
        /// </summary>
        /// <value>Error codes used to represent a specific error condition while attempting to update shards.</value>
        [JsonPropertyName("code")]
        public string Code { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateConduitShardsResponseErrorsInner {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UpdateConduitShardsResponseErrorsInner" />
    /// </summary>
    public class UpdateConduitShardsResponseErrorsInnerJsonConverter : JsonConverter<UpdateConduitShardsResponseErrorsInner>
    {
        /// <summary>
        /// Deserializes json to <see cref="UpdateConduitShardsResponseErrorsInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override UpdateConduitShardsResponseErrorsInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> message = default;
            Option<string?> code = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "message":
                            message = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "code":
                            code = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class UpdateConduitShardsResponseErrorsInner.", nameof(id));

            if (!message.IsSet)
                throw new ArgumentException("Property is required for class UpdateConduitShardsResponseErrorsInner.", nameof(message));

            if (!code.IsSet)
                throw new ArgumentException("Property is required for class UpdateConduitShardsResponseErrorsInner.", nameof(code));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class UpdateConduitShardsResponseErrorsInner.");

            if (message.IsSet && message.Value == null)
                throw new ArgumentNullException(nameof(message), "Property is not nullable for class UpdateConduitShardsResponseErrorsInner.");

            if (code.IsSet && code.Value == null)
                throw new ArgumentNullException(nameof(code), "Property is not nullable for class UpdateConduitShardsResponseErrorsInner.");

            return new UpdateConduitShardsResponseErrorsInner(id.Value!, message.Value!, code.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="UpdateConduitShardsResponseErrorsInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="updateConduitShardsResponseErrorsInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, UpdateConduitShardsResponseErrorsInner updateConduitShardsResponseErrorsInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, updateConduitShardsResponseErrorsInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="UpdateConduitShardsResponseErrorsInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="updateConduitShardsResponseErrorsInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, UpdateConduitShardsResponseErrorsInner updateConduitShardsResponseErrorsInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (updateConduitShardsResponseErrorsInner.Id == null)
                throw new ArgumentNullException(nameof(updateConduitShardsResponseErrorsInner.Id), "Property is required for class UpdateConduitShardsResponseErrorsInner.");

            if (updateConduitShardsResponseErrorsInner.Message == null)
                throw new ArgumentNullException(nameof(updateConduitShardsResponseErrorsInner.Message), "Property is required for class UpdateConduitShardsResponseErrorsInner.");

            if (updateConduitShardsResponseErrorsInner.Code == null)
                throw new ArgumentNullException(nameof(updateConduitShardsResponseErrorsInner.Code), "Property is required for class UpdateConduitShardsResponseErrorsInner.");

            writer.WriteString("id", updateConduitShardsResponseErrorsInner.Id);

            writer.WriteString("message", updateConduitShardsResponseErrorsInner.Message);

            writer.WriteString("code", updateConduitShardsResponseErrorsInner.Code);
        }
    }
}

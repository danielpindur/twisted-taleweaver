// <auto-generated>
/*
 * Twitch API Swagger UI (Unofficial)
 *
 * Unofficial Swagger UI for Twitch API.  All endpoints are generated automatically from the [twitch docs](https://dev.twitch.tv/docs/api/reference) page.  __Features:__  * Swagger UI for all Twitch API endpoints * Schemas for _Request Query Parameters_, _Request Body_, _Response Body_ * Some additional schemas like _Clip_, _ChatBadge_, _Prediction_, _Game_, _Channel_, _Video_ etc. * Response codes and examples * Generated types for TypeScript: [ts-twitch-api](https://github.com/DmitryScaletta/ts-twitch-api)  __Repository:__ [github.com/DmitryScaletta/twitch-api-swagger](https://github.com/DmitryScaletta/twitch-api-swagger)
 *
 * The version of the OpenAPI document: helix
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using TwistedTaleweaver.Integration.Twitch.Helix.Client;

namespace TwistedTaleweaver.Integration.Twitch.Helix.Model
{
    /// <summary>
    /// The transport details that you want Twitch to use when sending you notifications.
    /// </summary>
    public partial class UpdateConduitShardsBodyShardsInnerTransport : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateConduitShardsBodyShardsInnerTransport" /> class.
        /// </summary>
        /// <param name="method">The transport method. Possible values are:      * webhook * websocket</param>
        /// <param name="callback">The callback URL where the notifications are sent. The URL must use the HTTPS protocol and port 443\\. See Processing an event.Specify this field only if method is set to webhook.NOTE: Redirects are not followed.</param>
        /// <param name="secret">The secret used to verify the signature. The secret must be an ASCII string that’s a minimum of 10 characters long and a maximum of 100 characters long. For information about how the secret is used, see Verifying the event message.Specify this field only if method is set to webhook.</param>
        /// <param name="sessionId">An ID that identifies the WebSocket to send notifications to. When you connect to EventSub using WebSockets, the server returns the ID in the Welcome message.Specify this field only if method is set to websocket.</param>
        [JsonConstructor]
        public UpdateConduitShardsBodyShardsInnerTransport(Option<MethodEnum?> method = default, Option<string?> callback = default, Option<string?> secret = default, Option<string?> sessionId = default)
        {
            MethodOption = method;
            CallbackOption = callback;
            SecretOption = secret;
            SessionIdOption = sessionId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The transport method. Possible values are:      * webhook * websocket
        /// </summary>
        /// <value>The transport method. Possible values are:      * webhook * websocket</value>
        public enum MethodEnum
        {
            /// <summary>
            /// Enum Webhook for value: webhook
            /// </summary>
            Webhook = 1,

            /// <summary>
            /// Enum Websocket for value: websocket
            /// </summary>
            Websocket = 2
        }

        /// <summary>
        /// Returns a <see cref="MethodEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static MethodEnum MethodEnumFromString(string value)
        {
            if (value.Equals("webhook"))
                return MethodEnum.Webhook;

            if (value.Equals("websocket"))
                return MethodEnum.Websocket;

            throw new NotImplementedException($"Could not convert value to type MethodEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="MethodEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static MethodEnum? MethodEnumFromStringOrDefault(string value)
        {
            if (value.Equals("webhook"))
                return MethodEnum.Webhook;

            if (value.Equals("websocket"))
                return MethodEnum.Websocket;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="MethodEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string MethodEnumToJsonValue(MethodEnum? value)
        {
            if (value == MethodEnum.Webhook)
                return "webhook";

            if (value == MethodEnum.Websocket)
                return "websocket";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Method
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<MethodEnum?> MethodOption { get; private set; }

        /// <summary>
        /// The transport method. Possible values are:      * webhook * websocket
        /// </summary>
        /// <value>The transport method. Possible values are:      * webhook * websocket</value>
        [JsonPropertyName("method")]
        public MethodEnum? Method { get { return this.MethodOption; } set { this.MethodOption = new(value); } }

        /// <summary>
        /// Used to track the state of Callback
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CallbackOption { get; private set; }

        /// <summary>
        /// The callback URL where the notifications are sent. The URL must use the HTTPS protocol and port 443\\. See Processing an event.Specify this field only if method is set to webhook.NOTE: Redirects are not followed.
        /// </summary>
        /// <value>The callback URL where the notifications are sent. The URL must use the HTTPS protocol and port 443\\. See Processing an event.Specify this field only if method is set to webhook.NOTE: Redirects are not followed.</value>
        [JsonPropertyName("callback")]
        public string? Callback { get { return this.CallbackOption; } set { this.CallbackOption = new(value); } }

        /// <summary>
        /// Used to track the state of Secret
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SecretOption { get; private set; }

        /// <summary>
        /// The secret used to verify the signature. The secret must be an ASCII string that’s a minimum of 10 characters long and a maximum of 100 characters long. For information about how the secret is used, see Verifying the event message.Specify this field only if method is set to webhook.
        /// </summary>
        /// <value>The secret used to verify the signature. The secret must be an ASCII string that’s a minimum of 10 characters long and a maximum of 100 characters long. For information about how the secret is used, see Verifying the event message.Specify this field only if method is set to webhook.</value>
        [JsonPropertyName("secret")]
        public string? Secret { get { return this.SecretOption; } set { this.SecretOption = new(value); } }

        /// <summary>
        /// Used to track the state of SessionId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SessionIdOption { get; private set; }

        /// <summary>
        /// An ID that identifies the WebSocket to send notifications to. When you connect to EventSub using WebSockets, the server returns the ID in the Welcome message.Specify this field only if method is set to websocket.
        /// </summary>
        /// <value>An ID that identifies the WebSocket to send notifications to. When you connect to EventSub using WebSockets, the server returns the ID in the Welcome message.Specify this field only if method is set to websocket.</value>
        [JsonPropertyName("session_id")]
        public string? SessionId { get { return this.SessionIdOption; } set { this.SessionIdOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateConduitShardsBodyShardsInnerTransport {\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  Callback: ").Append(Callback).Append("\n");
            sb.Append("  Secret: ").Append(Secret).Append("\n");
            sb.Append("  SessionId: ").Append(SessionId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UpdateConduitShardsBodyShardsInnerTransport" />
    /// </summary>
    public class UpdateConduitShardsBodyShardsInnerTransportJsonConverter : JsonConverter<UpdateConduitShardsBodyShardsInnerTransport>
    {
        /// <summary>
        /// Deserializes json to <see cref="UpdateConduitShardsBodyShardsInnerTransport" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override UpdateConduitShardsBodyShardsInnerTransport Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<UpdateConduitShardsBodyShardsInnerTransport.MethodEnum?> method = default;
            Option<string?> callback = default;
            Option<string?> secret = default;
            Option<string?> sessionId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "method":
                            string? methodRawValue = utf8JsonReader.GetString();
                            if (methodRawValue != null)
                                method = new Option<UpdateConduitShardsBodyShardsInnerTransport.MethodEnum?>(UpdateConduitShardsBodyShardsInnerTransport.MethodEnumFromStringOrDefault(methodRawValue));
                            break;
                        case "callback":
                            callback = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "secret":
                            secret = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "session_id":
                            sessionId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (method.IsSet && method.Value == null)
                throw new ArgumentNullException(nameof(method), "Property is not nullable for class UpdateConduitShardsBodyShardsInnerTransport.");

            if (callback.IsSet && callback.Value == null)
                throw new ArgumentNullException(nameof(callback), "Property is not nullable for class UpdateConduitShardsBodyShardsInnerTransport.");

            if (secret.IsSet && secret.Value == null)
                throw new ArgumentNullException(nameof(secret), "Property is not nullable for class UpdateConduitShardsBodyShardsInnerTransport.");

            if (sessionId.IsSet && sessionId.Value == null)
                throw new ArgumentNullException(nameof(sessionId), "Property is not nullable for class UpdateConduitShardsBodyShardsInnerTransport.");

            return new UpdateConduitShardsBodyShardsInnerTransport(method, callback, secret, sessionId);
        }

        /// <summary>
        /// Serializes a <see cref="UpdateConduitShardsBodyShardsInnerTransport" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="updateConduitShardsBodyShardsInnerTransport"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, UpdateConduitShardsBodyShardsInnerTransport updateConduitShardsBodyShardsInnerTransport, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, updateConduitShardsBodyShardsInnerTransport, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="UpdateConduitShardsBodyShardsInnerTransport" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="updateConduitShardsBodyShardsInnerTransport"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, UpdateConduitShardsBodyShardsInnerTransport updateConduitShardsBodyShardsInnerTransport, JsonSerializerOptions jsonSerializerOptions)
        {
            if (updateConduitShardsBodyShardsInnerTransport.CallbackOption.IsSet && updateConduitShardsBodyShardsInnerTransport.Callback == null)
                throw new ArgumentNullException(nameof(updateConduitShardsBodyShardsInnerTransport.Callback), "Property is required for class UpdateConduitShardsBodyShardsInnerTransport.");

            if (updateConduitShardsBodyShardsInnerTransport.SecretOption.IsSet && updateConduitShardsBodyShardsInnerTransport.Secret == null)
                throw new ArgumentNullException(nameof(updateConduitShardsBodyShardsInnerTransport.Secret), "Property is required for class UpdateConduitShardsBodyShardsInnerTransport.");

            if (updateConduitShardsBodyShardsInnerTransport.SessionIdOption.IsSet && updateConduitShardsBodyShardsInnerTransport.SessionId == null)
                throw new ArgumentNullException(nameof(updateConduitShardsBodyShardsInnerTransport.SessionId), "Property is required for class UpdateConduitShardsBodyShardsInnerTransport.");

            var methodRawValue = UpdateConduitShardsBodyShardsInnerTransport.MethodEnumToJsonValue(updateConduitShardsBodyShardsInnerTransport.MethodOption.Value!.Value);
            writer.WriteString("method", methodRawValue);
            if (updateConduitShardsBodyShardsInnerTransport.CallbackOption.IsSet)
                writer.WriteString("callback", updateConduitShardsBodyShardsInnerTransport.Callback);

            if (updateConduitShardsBodyShardsInnerTransport.SecretOption.IsSet)
                writer.WriteString("secret", updateConduitShardsBodyShardsInnerTransport.Secret);

            if (updateConduitShardsBodyShardsInnerTransport.SessionIdOption.IsSet)
                writer.WriteString("session_id", updateConduitShardsBodyShardsInnerTransport.SessionId);
        }
    }
}

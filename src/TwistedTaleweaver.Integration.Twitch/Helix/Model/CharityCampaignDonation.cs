// <auto-generated>
/*
 * Twitch API Swagger UI (Unofficial)
 *
 * Unofficial Swagger UI for Twitch API.  All endpoints are generated automatically from the [twitch docs](https://dev.twitch.tv/docs/api/reference) page.  __Features:__  * Swagger UI for all Twitch API endpoints * Schemas for _Request Query Parameters_, _Request Body_, _Response Body_ * Some additional schemas like _Clip_, _ChatBadge_, _Prediction_, _Game_, _Channel_, _Video_ etc. * Response codes and examples * Generated types for TypeScript: [ts-twitch-api](https://github.com/DmitryScaletta/ts-twitch-api)  __Repository:__ [github.com/DmitryScaletta/twitch-api-swagger](https://github.com/DmitryScaletta/twitch-api-swagger)
 *
 * The version of the OpenAPI document: helix
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using TwistedTaleweaver.Integration.Twitch.Helix.Client;

namespace TwistedTaleweaver.Integration.Twitch.Helix.Model
{
    /// <summary>
    /// CharityCampaignDonation
    /// </summary>
    public partial class CharityCampaignDonation : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CharityCampaignDonation" /> class.
        /// </summary>
        /// <param name="id">An ID that identifies the donation. The ID is unique across campaigns.</param>
        /// <param name="campaignId">An ID that identifies the charity campaign that the donation applies to.</param>
        /// <param name="userId">An ID that identifies a user that donated money to the campaign.</param>
        /// <param name="userLogin">The user’s login name.</param>
        /// <param name="userName">The user’s display name.</param>
        /// <param name="amount">amount</param>
        [JsonConstructor]
        public CharityCampaignDonation(string id, string campaignId, string userId, string userLogin, string userName, CharityCampaignDonationAmount amount)
        {
            Id = id;
            CampaignId = campaignId;
            UserId = userId;
            UserLogin = userLogin;
            UserName = userName;
            Amount = amount;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// An ID that identifies the donation. The ID is unique across campaigns.
        /// </summary>
        /// <value>An ID that identifies the donation. The ID is unique across campaigns.</value>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// An ID that identifies the charity campaign that the donation applies to.
        /// </summary>
        /// <value>An ID that identifies the charity campaign that the donation applies to.</value>
        [JsonPropertyName("campaign_id")]
        public string CampaignId { get; set; }

        /// <summary>
        /// An ID that identifies a user that donated money to the campaign.
        /// </summary>
        /// <value>An ID that identifies a user that donated money to the campaign.</value>
        [JsonPropertyName("user_id")]
        public string UserId { get; set; }

        /// <summary>
        /// The user’s login name.
        /// </summary>
        /// <value>The user’s login name.</value>
        [JsonPropertyName("user_login")]
        public string UserLogin { get; set; }

        /// <summary>
        /// The user’s display name.
        /// </summary>
        /// <value>The user’s display name.</value>
        [JsonPropertyName("user_name")]
        public string UserName { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [JsonPropertyName("amount")]
        public CharityCampaignDonationAmount Amount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CharityCampaignDonation {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CampaignId: ").Append(CampaignId).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  UserLogin: ").Append(UserLogin).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CharityCampaignDonation" />
    /// </summary>
    public class CharityCampaignDonationJsonConverter : JsonConverter<CharityCampaignDonation>
    {
        /// <summary>
        /// Deserializes json to <see cref="CharityCampaignDonation" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CharityCampaignDonation Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> campaignId = default;
            Option<string?> userId = default;
            Option<string?> userLogin = default;
            Option<string?> userName = default;
            Option<CharityCampaignDonationAmount?> amount = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "campaign_id":
                            campaignId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "user_id":
                            userId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "user_login":
                            userLogin = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "user_name":
                            userName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "amount":
                            amount = new Option<CharityCampaignDonationAmount?>(JsonSerializer.Deserialize<CharityCampaignDonationAmount>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class CharityCampaignDonation.", nameof(id));

            if (!campaignId.IsSet)
                throw new ArgumentException("Property is required for class CharityCampaignDonation.", nameof(campaignId));

            if (!userId.IsSet)
                throw new ArgumentException("Property is required for class CharityCampaignDonation.", nameof(userId));

            if (!userLogin.IsSet)
                throw new ArgumentException("Property is required for class CharityCampaignDonation.", nameof(userLogin));

            if (!userName.IsSet)
                throw new ArgumentException("Property is required for class CharityCampaignDonation.", nameof(userName));

            if (!amount.IsSet)
                throw new ArgumentException("Property is required for class CharityCampaignDonation.", nameof(amount));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class CharityCampaignDonation.");

            if (campaignId.IsSet && campaignId.Value == null)
                throw new ArgumentNullException(nameof(campaignId), "Property is not nullable for class CharityCampaignDonation.");

            if (userId.IsSet && userId.Value == null)
                throw new ArgumentNullException(nameof(userId), "Property is not nullable for class CharityCampaignDonation.");

            if (userLogin.IsSet && userLogin.Value == null)
                throw new ArgumentNullException(nameof(userLogin), "Property is not nullable for class CharityCampaignDonation.");

            if (userName.IsSet && userName.Value == null)
                throw new ArgumentNullException(nameof(userName), "Property is not nullable for class CharityCampaignDonation.");

            if (amount.IsSet && amount.Value == null)
                throw new ArgumentNullException(nameof(amount), "Property is not nullable for class CharityCampaignDonation.");

            return new CharityCampaignDonation(id.Value!, campaignId.Value!, userId.Value!, userLogin.Value!, userName.Value!, amount.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="CharityCampaignDonation" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="charityCampaignDonation"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CharityCampaignDonation charityCampaignDonation, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, charityCampaignDonation, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CharityCampaignDonation" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="charityCampaignDonation"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CharityCampaignDonation charityCampaignDonation, JsonSerializerOptions jsonSerializerOptions)
        {
            if (charityCampaignDonation.Id == null)
                throw new ArgumentNullException(nameof(charityCampaignDonation.Id), "Property is required for class CharityCampaignDonation.");

            if (charityCampaignDonation.CampaignId == null)
                throw new ArgumentNullException(nameof(charityCampaignDonation.CampaignId), "Property is required for class CharityCampaignDonation.");

            if (charityCampaignDonation.UserId == null)
                throw new ArgumentNullException(nameof(charityCampaignDonation.UserId), "Property is required for class CharityCampaignDonation.");

            if (charityCampaignDonation.UserLogin == null)
                throw new ArgumentNullException(nameof(charityCampaignDonation.UserLogin), "Property is required for class CharityCampaignDonation.");

            if (charityCampaignDonation.UserName == null)
                throw new ArgumentNullException(nameof(charityCampaignDonation.UserName), "Property is required for class CharityCampaignDonation.");

            if (charityCampaignDonation.Amount == null)
                throw new ArgumentNullException(nameof(charityCampaignDonation.Amount), "Property is required for class CharityCampaignDonation.");

            writer.WriteString("id", charityCampaignDonation.Id);

            writer.WriteString("campaign_id", charityCampaignDonation.CampaignId);

            writer.WriteString("user_id", charityCampaignDonation.UserId);

            writer.WriteString("user_login", charityCampaignDonation.UserLogin);

            writer.WriteString("user_name", charityCampaignDonation.UserName);

            writer.WritePropertyName("amount");
            JsonSerializer.Serialize(writer, charityCampaignDonation.Amount, jsonSerializerOptions);
        }
    }
}

// <auto-generated>
/*
 * Twitch API Swagger UI (Unofficial)
 *
 * Unofficial Swagger UI for Twitch API.  All endpoints are generated automatically from the [twitch docs](https://dev.twitch.tv/docs/api/reference) page.  __Features:__  * Swagger UI for all Twitch API endpoints * Schemas for _Request Query Parameters_, _Request Body_, _Response Body_ * Some additional schemas like _Clip_, _ChatBadge_, _Prediction_, _Game_, _Channel_, _Video_ etc. * Response codes and examples * Generated types for TypeScript: [ts-twitch-api](https://github.com/DmitryScaletta/ts-twitch-api)  __Repository:__ [github.com/DmitryScaletta/twitch-api-swagger](https://github.com/DmitryScaletta/twitch-api-swagger)
 *
 * The version of the OpenAPI document: helix
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using TwistedTaleweaver.Integration.Twitch.Helix.Client;

namespace TwistedTaleweaver.Integration.Twitch.Helix.Model
{
    /// <summary>
    /// HypeTrainEvent
    /// </summary>
    public partial class HypeTrainEvent : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HypeTrainEvent" /> class.
        /// </summary>
        /// <param name="id">An ID that identifies this event.</param>
        /// <param name="eventType">The type of event. The string is in the form, hypetrain.{event\\_name}. The request returns only progress event types (i.e., hypetrain.progression).</param>
        /// <param name="eventTimestamp">The UTC date and time (in RFC3339 format) that the event occurred.</param>
        /// <param name="varVersion">The version number of the definition of the event’s data. For example, the value is 1 if the data in &#x60;event_data&#x60; uses the first definition of the event’s data.</param>
        /// <param name="eventData">eventData</param>
        [JsonConstructor]
        public HypeTrainEvent(string id, string eventType, DateTime eventTimestamp, string varVersion, HypeTrainEventEventData eventData)
        {
            Id = id;
            EventType = eventType;
            EventTimestamp = eventTimestamp;
            VarVersion = varVersion;
            EventData = eventData;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// An ID that identifies this event.
        /// </summary>
        /// <value>An ID that identifies this event.</value>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// The type of event. The string is in the form, hypetrain.{event\\_name}. The request returns only progress event types (i.e., hypetrain.progression).
        /// </summary>
        /// <value>The type of event. The string is in the form, hypetrain.{event\\_name}. The request returns only progress event types (i.e., hypetrain.progression).</value>
        [JsonPropertyName("event_type")]
        public string EventType { get; set; }

        /// <summary>
        /// The UTC date and time (in RFC3339 format) that the event occurred.
        /// </summary>
        /// <value>The UTC date and time (in RFC3339 format) that the event occurred.</value>
        [JsonPropertyName("event_timestamp")]
        public DateTime EventTimestamp { get; set; }

        /// <summary>
        /// The version number of the definition of the event’s data. For example, the value is 1 if the data in &#x60;event_data&#x60; uses the first definition of the event’s data.
        /// </summary>
        /// <value>The version number of the definition of the event’s data. For example, the value is 1 if the data in &#x60;event_data&#x60; uses the first definition of the event’s data.</value>
        [JsonPropertyName("version")]
        public string VarVersion { get; set; }

        /// <summary>
        /// Gets or Sets EventData
        /// </summary>
        [JsonPropertyName("event_data")]
        public HypeTrainEventEventData EventData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class HypeTrainEvent {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  EventType: ").Append(EventType).Append("\n");
            sb.Append("  EventTimestamp: ").Append(EventTimestamp).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  EventData: ").Append(EventData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="HypeTrainEvent" />
    /// </summary>
    public class HypeTrainEventJsonConverter : JsonConverter<HypeTrainEvent>
    {
        /// <summary>
        /// The format to use to serialize EventTimestamp
        /// </summary>
        public static string EventTimestampFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="HypeTrainEvent" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override HypeTrainEvent Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> eventType = default;
            Option<DateTime?> eventTimestamp = default;
            Option<string?> varVersion = default;
            Option<HypeTrainEventEventData?> eventData = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "event_type":
                            eventType = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "event_timestamp":
                            eventTimestamp = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "version":
                            varVersion = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "event_data":
                            eventData = new Option<HypeTrainEventEventData?>(JsonSerializer.Deserialize<HypeTrainEventEventData>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class HypeTrainEvent.", nameof(id));

            if (!eventType.IsSet)
                throw new ArgumentException("Property is required for class HypeTrainEvent.", nameof(eventType));

            if (!eventTimestamp.IsSet)
                throw new ArgumentException("Property is required for class HypeTrainEvent.", nameof(eventTimestamp));

            if (!varVersion.IsSet)
                throw new ArgumentException("Property is required for class HypeTrainEvent.", nameof(varVersion));

            if (!eventData.IsSet)
                throw new ArgumentException("Property is required for class HypeTrainEvent.", nameof(eventData));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class HypeTrainEvent.");

            if (eventType.IsSet && eventType.Value == null)
                throw new ArgumentNullException(nameof(eventType), "Property is not nullable for class HypeTrainEvent.");

            if (eventTimestamp.IsSet && eventTimestamp.Value == null)
                throw new ArgumentNullException(nameof(eventTimestamp), "Property is not nullable for class HypeTrainEvent.");

            if (varVersion.IsSet && varVersion.Value == null)
                throw new ArgumentNullException(nameof(varVersion), "Property is not nullable for class HypeTrainEvent.");

            if (eventData.IsSet && eventData.Value == null)
                throw new ArgumentNullException(nameof(eventData), "Property is not nullable for class HypeTrainEvent.");

            return new HypeTrainEvent(id.Value!, eventType.Value!, eventTimestamp.Value!.Value!, varVersion.Value!, eventData.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="HypeTrainEvent" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="hypeTrainEvent"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, HypeTrainEvent hypeTrainEvent, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, hypeTrainEvent, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="HypeTrainEvent" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="hypeTrainEvent"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, HypeTrainEvent hypeTrainEvent, JsonSerializerOptions jsonSerializerOptions)
        {
            if (hypeTrainEvent.Id == null)
                throw new ArgumentNullException(nameof(hypeTrainEvent.Id), "Property is required for class HypeTrainEvent.");

            if (hypeTrainEvent.EventType == null)
                throw new ArgumentNullException(nameof(hypeTrainEvent.EventType), "Property is required for class HypeTrainEvent.");

            if (hypeTrainEvent.VarVersion == null)
                throw new ArgumentNullException(nameof(hypeTrainEvent.VarVersion), "Property is required for class HypeTrainEvent.");

            if (hypeTrainEvent.EventData == null)
                throw new ArgumentNullException(nameof(hypeTrainEvent.EventData), "Property is required for class HypeTrainEvent.");

            writer.WriteString("id", hypeTrainEvent.Id);

            writer.WriteString("event_type", hypeTrainEvent.EventType);

            writer.WriteString("event_timestamp", hypeTrainEvent.EventTimestamp.ToString(EventTimestampFormat));

            writer.WriteString("version", hypeTrainEvent.VarVersion);

            writer.WritePropertyName("event_data");
            JsonSerializer.Serialize(writer, hypeTrainEvent.EventData, jsonSerializerOptions);
        }
    }
}

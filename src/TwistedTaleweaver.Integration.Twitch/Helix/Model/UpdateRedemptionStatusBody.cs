// <auto-generated>
/*
 * Twitch API Swagger UI (Unofficial)
 *
 * Unofficial Swagger UI for Twitch API.  All endpoints are generated automatically from the [twitch docs](https://dev.twitch.tv/docs/api/reference) page.  __Features:__  * Swagger UI for all Twitch API endpoints * Schemas for _Request Query Parameters_, _Request Body_, _Response Body_ * Some additional schemas like _Clip_, _ChatBadge_, _Prediction_, _Game_, _Channel_, _Video_ etc. * Response codes and examples * Generated types for TypeScript: [ts-twitch-api](https://github.com/DmitryScaletta/ts-twitch-api)  __Repository:__ [github.com/DmitryScaletta/twitch-api-swagger](https://github.com/DmitryScaletta/twitch-api-swagger)
 *
 * The version of the OpenAPI document: helix
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using TwistedTaleweaver.Integration.Twitch.Helix.Client;

namespace TwistedTaleweaver.Integration.Twitch.Helix.Model
{
    /// <summary>
    /// UpdateRedemptionStatusBody
    /// </summary>
    public partial class UpdateRedemptionStatusBody : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateRedemptionStatusBody" /> class.
        /// </summary>
        /// <param name="status">The status to set the redemption to. Possible values are:      * CANCELED * FULFILLED    Setting the status to CANCELED refunds the user’s channel points.</param>
        [JsonConstructor]
        public UpdateRedemptionStatusBody(StatusEnum status)
        {
            Status = status;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The status to set the redemption to. Possible values are:      * CANCELED * FULFILLED    Setting the status to CANCELED refunds the user’s channel points.
        /// </summary>
        /// <value>The status to set the redemption to. Possible values are:      * CANCELED * FULFILLED    Setting the status to CANCELED refunds the user’s channel points.</value>
        public enum StatusEnum
        {
            /// <summary>
            /// Enum CANCELED for value: CANCELED
            /// </summary>
            CANCELED = 1,

            /// <summary>
            /// Enum FULFILLED for value: FULFILLED
            /// </summary>
            FULFILLED = 2
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static StatusEnum StatusEnumFromString(string value)
        {
            if (value.Equals("CANCELED"))
                return StatusEnum.CANCELED;

            if (value.Equals("FULFILLED"))
                return StatusEnum.FULFILLED;

            throw new NotImplementedException($"Could not convert value to type StatusEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static StatusEnum? StatusEnumFromStringOrDefault(string value)
        {
            if (value.Equals("CANCELED"))
                return StatusEnum.CANCELED;

            if (value.Equals("FULFILLED"))
                return StatusEnum.FULFILLED;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="StatusEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string StatusEnumToJsonValue(StatusEnum value)
        {
            if (value == StatusEnum.CANCELED)
                return "CANCELED";

            if (value == StatusEnum.FULFILLED)
                return "FULFILLED";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// The status to set the redemption to. Possible values are:      * CANCELED * FULFILLED    Setting the status to CANCELED refunds the user’s channel points.
        /// </summary>
        /// <value>The status to set the redemption to. Possible values are:      * CANCELED * FULFILLED    Setting the status to CANCELED refunds the user’s channel points.</value>
        [JsonPropertyName("status")]
        public StatusEnum Status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateRedemptionStatusBody {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UpdateRedemptionStatusBody" />
    /// </summary>
    public class UpdateRedemptionStatusBodyJsonConverter : JsonConverter<UpdateRedemptionStatusBody>
    {
        /// <summary>
        /// Deserializes json to <see cref="UpdateRedemptionStatusBody" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override UpdateRedemptionStatusBody Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<UpdateRedemptionStatusBody.StatusEnum?> status = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "status":
                            string? statusRawValue = utf8JsonReader.GetString();
                            if (statusRawValue != null)
                                status = new Option<UpdateRedemptionStatusBody.StatusEnum?>(UpdateRedemptionStatusBody.StatusEnumFromStringOrDefault(statusRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!status.IsSet)
                throw new ArgumentException("Property is required for class UpdateRedemptionStatusBody.", nameof(status));

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class UpdateRedemptionStatusBody.");

            return new UpdateRedemptionStatusBody(status.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="UpdateRedemptionStatusBody" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="updateRedemptionStatusBody"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, UpdateRedemptionStatusBody updateRedemptionStatusBody, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, updateRedemptionStatusBody, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="UpdateRedemptionStatusBody" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="updateRedemptionStatusBody"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, UpdateRedemptionStatusBody updateRedemptionStatusBody, JsonSerializerOptions jsonSerializerOptions)
        {
            var statusRawValue = UpdateRedemptionStatusBody.StatusEnumToJsonValue(updateRedemptionStatusBody.Status);
            writer.WriteString("status", statusRawValue);
        }
    }
}

// <auto-generated>
/*
 * Twitch API Swagger UI (Unofficial)
 *
 * Unofficial Swagger UI for Twitch API.  All endpoints are generated automatically from the [twitch docs](https://dev.twitch.tv/docs/api/reference) page.  __Features:__  * Swagger UI for all Twitch API endpoints * Schemas for _Request Query Parameters_, _Request Body_, _Response Body_ * Some additional schemas like _Clip_, _ChatBadge_, _Prediction_, _Game_, _Channel_, _Video_ etc. * Response codes and examples * Generated types for TypeScript: [ts-twitch-api](https://github.com/DmitryScaletta/ts-twitch-api)  __Repository:__ [github.com/DmitryScaletta/twitch-api-swagger](https://github.com/DmitryScaletta/twitch-api-swagger)
 *
 * The version of the OpenAPI document: helix
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using TwistedTaleweaver.Integration.Twitch.Helix.Client;

namespace TwistedTaleweaver.Integration.Twitch.Helix.Model
{
    /// <summary>
    /// ModifyChannelInformationBodyContentClassificationLabelsInner
    /// </summary>
    public partial class ModifyChannelInformationBodyContentClassificationLabelsInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModifyChannelInformationBodyContentClassificationLabelsInner" /> class.
        /// </summary>
        /// <param name="id">ID of the [Content Classification Labels](https://help.twitch.tv/s/article/content-classification-labels) that must be added/removed from the channel. Can be one of the following values:      * DebatedSocialIssuesAndPolitics * DrugsIntoxication * SexualThemes * ViolentGraphic * Gambling * ProfanityVulgarity</param>
        /// <param name="isEnabled">Boolean flag indicating whether the label should be enabled (true) or disabled for the channel.</param>
        [JsonConstructor]
        public ModifyChannelInformationBodyContentClassificationLabelsInner(IdEnum id, bool isEnabled)
        {
            Id = id;
            IsEnabled = isEnabled;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// ID of the [Content Classification Labels](https://help.twitch.tv/s/article/content-classification-labels) that must be added/removed from the channel. Can be one of the following values:      * DebatedSocialIssuesAndPolitics * DrugsIntoxication * SexualThemes * ViolentGraphic * Gambling * ProfanityVulgarity
        /// </summary>
        /// <value>ID of the [Content Classification Labels](https://help.twitch.tv/s/article/content-classification-labels) that must be added/removed from the channel. Can be one of the following values:      * DebatedSocialIssuesAndPolitics * DrugsIntoxication * SexualThemes * ViolentGraphic * Gambling * ProfanityVulgarity</value>
        public enum IdEnum
        {
            /// <summary>
            /// Enum DebatedSocialIssuesAndPolitics for value: DebatedSocialIssuesAndPolitics
            /// </summary>
            DebatedSocialIssuesAndPolitics = 1,

            /// <summary>
            /// Enum DrugsIntoxication for value: DrugsIntoxication
            /// </summary>
            DrugsIntoxication = 2,

            /// <summary>
            /// Enum SexualThemes for value: SexualThemes
            /// </summary>
            SexualThemes = 3,

            /// <summary>
            /// Enum ViolentGraphic for value: ViolentGraphic
            /// </summary>
            ViolentGraphic = 4,

            /// <summary>
            /// Enum Gambling for value: Gambling
            /// </summary>
            Gambling = 5,

            /// <summary>
            /// Enum ProfanityVulgarity for value: ProfanityVulgarity
            /// </summary>
            ProfanityVulgarity = 6
        }

        /// <summary>
        /// Returns a <see cref="IdEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static IdEnum IdEnumFromString(string value)
        {
            if (value.Equals("DebatedSocialIssuesAndPolitics"))
                return IdEnum.DebatedSocialIssuesAndPolitics;

            if (value.Equals("DrugsIntoxication"))
                return IdEnum.DrugsIntoxication;

            if (value.Equals("SexualThemes"))
                return IdEnum.SexualThemes;

            if (value.Equals("ViolentGraphic"))
                return IdEnum.ViolentGraphic;

            if (value.Equals("Gambling"))
                return IdEnum.Gambling;

            if (value.Equals("ProfanityVulgarity"))
                return IdEnum.ProfanityVulgarity;

            throw new NotImplementedException($"Could not convert value to type IdEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="IdEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static IdEnum? IdEnumFromStringOrDefault(string value)
        {
            if (value.Equals("DebatedSocialIssuesAndPolitics"))
                return IdEnum.DebatedSocialIssuesAndPolitics;

            if (value.Equals("DrugsIntoxication"))
                return IdEnum.DrugsIntoxication;

            if (value.Equals("SexualThemes"))
                return IdEnum.SexualThemes;

            if (value.Equals("ViolentGraphic"))
                return IdEnum.ViolentGraphic;

            if (value.Equals("Gambling"))
                return IdEnum.Gambling;

            if (value.Equals("ProfanityVulgarity"))
                return IdEnum.ProfanityVulgarity;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="IdEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string IdEnumToJsonValue(IdEnum value)
        {
            if (value == IdEnum.DebatedSocialIssuesAndPolitics)
                return "DebatedSocialIssuesAndPolitics";

            if (value == IdEnum.DrugsIntoxication)
                return "DrugsIntoxication";

            if (value == IdEnum.SexualThemes)
                return "SexualThemes";

            if (value == IdEnum.ViolentGraphic)
                return "ViolentGraphic";

            if (value == IdEnum.Gambling)
                return "Gambling";

            if (value == IdEnum.ProfanityVulgarity)
                return "ProfanityVulgarity";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// ID of the [Content Classification Labels](https://help.twitch.tv/s/article/content-classification-labels) that must be added/removed from the channel. Can be one of the following values:      * DebatedSocialIssuesAndPolitics * DrugsIntoxication * SexualThemes * ViolentGraphic * Gambling * ProfanityVulgarity
        /// </summary>
        /// <value>ID of the [Content Classification Labels](https://help.twitch.tv/s/article/content-classification-labels) that must be added/removed from the channel. Can be one of the following values:      * DebatedSocialIssuesAndPolitics * DrugsIntoxication * SexualThemes * ViolentGraphic * Gambling * ProfanityVulgarity</value>
        [JsonPropertyName("id")]
        public IdEnum Id { get; set; }

        /// <summary>
        /// Boolean flag indicating whether the label should be enabled (true) or disabled for the channel.
        /// </summary>
        /// <value>Boolean flag indicating whether the label should be enabled (true) or disabled for the channel.</value>
        [JsonPropertyName("is_enabled")]
        public bool IsEnabled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModifyChannelInformationBodyContentClassificationLabelsInner {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsEnabled: ").Append(IsEnabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ModifyChannelInformationBodyContentClassificationLabelsInner" />
    /// </summary>
    public class ModifyChannelInformationBodyContentClassificationLabelsInnerJsonConverter : JsonConverter<ModifyChannelInformationBodyContentClassificationLabelsInner>
    {
        /// <summary>
        /// Deserializes json to <see cref="ModifyChannelInformationBodyContentClassificationLabelsInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ModifyChannelInformationBodyContentClassificationLabelsInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<ModifyChannelInformationBodyContentClassificationLabelsInner.IdEnum?> id = default;
            Option<bool?> isEnabled = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            string? idRawValue = utf8JsonReader.GetString();
                            if (idRawValue != null)
                                id = new Option<ModifyChannelInformationBodyContentClassificationLabelsInner.IdEnum?>(ModifyChannelInformationBodyContentClassificationLabelsInner.IdEnumFromStringOrDefault(idRawValue));
                            break;
                        case "is_enabled":
                            isEnabled = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class ModifyChannelInformationBodyContentClassificationLabelsInner.", nameof(id));

            if (!isEnabled.IsSet)
                throw new ArgumentException("Property is required for class ModifyChannelInformationBodyContentClassificationLabelsInner.", nameof(isEnabled));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class ModifyChannelInformationBodyContentClassificationLabelsInner.");

            if (isEnabled.IsSet && isEnabled.Value == null)
                throw new ArgumentNullException(nameof(isEnabled), "Property is not nullable for class ModifyChannelInformationBodyContentClassificationLabelsInner.");

            return new ModifyChannelInformationBodyContentClassificationLabelsInner(id.Value!.Value!, isEnabled.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="ModifyChannelInformationBodyContentClassificationLabelsInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="modifyChannelInformationBodyContentClassificationLabelsInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ModifyChannelInformationBodyContentClassificationLabelsInner modifyChannelInformationBodyContentClassificationLabelsInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, modifyChannelInformationBodyContentClassificationLabelsInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ModifyChannelInformationBodyContentClassificationLabelsInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="modifyChannelInformationBodyContentClassificationLabelsInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ModifyChannelInformationBodyContentClassificationLabelsInner modifyChannelInformationBodyContentClassificationLabelsInner, JsonSerializerOptions jsonSerializerOptions)
        {
            var idRawValue = ModifyChannelInformationBodyContentClassificationLabelsInner.IdEnumToJsonValue(modifyChannelInformationBodyContentClassificationLabelsInner.Id);
            writer.WriteString("id", idRawValue);
            writer.WriteBoolean("is_enabled", modifyChannelInformationBodyContentClassificationLabelsInner.IsEnabled);
        }
    }
}

// <auto-generated>
/*
 * Twitch API Swagger UI (Unofficial)
 *
 * Unofficial Swagger UI for Twitch API.  All endpoints are generated automatically from the [twitch docs](https://dev.twitch.tv/docs/api/reference) page.  __Features:__  * Swagger UI for all Twitch API endpoints * Schemas for _Request Query Parameters_, _Request Body_, _Response Body_ * Some additional schemas like _Clip_, _ChatBadge_, _Prediction_, _Game_, _Channel_, _Video_ etc. * Response codes and examples * Generated types for TypeScript: [ts-twitch-api](https://github.com/DmitryScaletta/ts-twitch-api)  __Repository:__ [github.com/DmitryScaletta/twitch-api-swagger](https://github.com/DmitryScaletta/twitch-api-swagger)
 *
 * The version of the OpenAPI document: helix
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using TwistedTaleweaver.Integration.Twitch.Helix.Client;

namespace TwistedTaleweaver.Integration.Twitch.Helix.Model
{
    /// <summary>
    /// Contains details about the digital productâ€™s cost.
    /// </summary>
    public partial class ExtensionTransactionProductDataCost : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExtensionTransactionProductDataCost" /> class.
        /// </summary>
        /// <param name="amount">The amount exchanged for the digital product.</param>
        /// <param name="type">The type of currency exchanged. Possible values are:      * bits</param>
        [JsonConstructor]
        public ExtensionTransactionProductDataCost(int amount, TypeEnum type)
        {
            Amount = amount;
            Type = type;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The type of currency exchanged. Possible values are:      * bits
        /// </summary>
        /// <value>The type of currency exchanged. Possible values are:      * bits</value>
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Bits for value: bits
            /// </summary>
            Bits = 1
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TypeEnum TypeEnumFromString(string value)
        {
            if (value.Equals("bits"))
                return TypeEnum.Bits;

            throw new NotImplementedException($"Could not convert value to type TypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TypeEnum? TypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("bits"))
                return TypeEnum.Bits;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TypeEnumToJsonValue(TypeEnum value)
        {
            if (value == TypeEnum.Bits)
                return "bits";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// The type of currency exchanged. Possible values are:      * bits
        /// </summary>
        /// <value>The type of currency exchanged. Possible values are:      * bits</value>
        [JsonPropertyName("type")]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// The amount exchanged for the digital product.
        /// </summary>
        /// <value>The amount exchanged for the digital product.</value>
        [JsonPropertyName("amount")]
        public int Amount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ExtensionTransactionProductDataCost {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ExtensionTransactionProductDataCost" />
    /// </summary>
    public class ExtensionTransactionProductDataCostJsonConverter : JsonConverter<ExtensionTransactionProductDataCost>
    {
        /// <summary>
        /// Deserializes json to <see cref="ExtensionTransactionProductDataCost" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ExtensionTransactionProductDataCost Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> amount = default;
            Option<ExtensionTransactionProductDataCost.TypeEnum?> type = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "amount":
                            amount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<ExtensionTransactionProductDataCost.TypeEnum?>(ExtensionTransactionProductDataCost.TypeEnumFromStringOrDefault(typeRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!amount.IsSet)
                throw new ArgumentException("Property is required for class ExtensionTransactionProductDataCost.", nameof(amount));

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class ExtensionTransactionProductDataCost.", nameof(type));

            if (amount.IsSet && amount.Value == null)
                throw new ArgumentNullException(nameof(amount), "Property is not nullable for class ExtensionTransactionProductDataCost.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class ExtensionTransactionProductDataCost.");

            return new ExtensionTransactionProductDataCost(amount.Value!.Value!, type.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="ExtensionTransactionProductDataCost" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="extensionTransactionProductDataCost"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ExtensionTransactionProductDataCost extensionTransactionProductDataCost, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, extensionTransactionProductDataCost, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ExtensionTransactionProductDataCost" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="extensionTransactionProductDataCost"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ExtensionTransactionProductDataCost extensionTransactionProductDataCost, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteNumber("amount", extensionTransactionProductDataCost.Amount);

            var typeRawValue = ExtensionTransactionProductDataCost.TypeEnumToJsonValue(extensionTransactionProductDataCost.Type);
            writer.WriteString("type", typeRawValue);
        }
    }
}

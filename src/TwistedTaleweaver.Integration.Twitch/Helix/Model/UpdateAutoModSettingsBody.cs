// <auto-generated>
/*
 * Twitch API Swagger UI (Unofficial)
 *
 * Unofficial Swagger UI for Twitch API.  All endpoints are generated automatically from the [twitch docs](https://dev.twitch.tv/docs/api/reference) page.  __Features:__  * Swagger UI for all Twitch API endpoints * Schemas for _Request Query Parameters_, _Request Body_, _Response Body_ * Some additional schemas like _Clip_, _ChatBadge_, _Prediction_, _Game_, _Channel_, _Video_ etc. * Response codes and examples * Generated types for TypeScript: [ts-twitch-api](https://github.com/DmitryScaletta/ts-twitch-api)  __Repository:__ [github.com/DmitryScaletta/twitch-api-swagger](https://github.com/DmitryScaletta/twitch-api-swagger)
 *
 * The version of the OpenAPI document: helix
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using TwistedTaleweaver.Integration.Twitch.Helix.Client;

namespace TwistedTaleweaver.Integration.Twitch.Helix.Model
{
    /// <summary>
    /// UpdateAutoModSettingsBody
    /// </summary>
    public partial class UpdateAutoModSettingsBody : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateAutoModSettingsBody" /> class.
        /// </summary>
        /// <param name="aggression">The Automod level for hostility involving aggression.</param>
        /// <param name="bullying">The Automod level for hostility involving name calling or insults.</param>
        /// <param name="disability">The Automod level for discrimination against disability.</param>
        /// <param name="misogyny">The Automod level for discrimination against women.</param>
        /// <param name="overallLevel">The default AutoMod level for the broadcaster.</param>
        /// <param name="raceEthnicityOrReligion">The Automod level for racial discrimination.</param>
        /// <param name="sexBasedTerms">The Automod level for sexual content.</param>
        /// <param name="sexualitySexOrGender">The AutoMod level for discrimination based on sexuality, sex, or gender.</param>
        /// <param name="swearing">The Automod level for profanity.</param>
        [JsonConstructor]
        public UpdateAutoModSettingsBody(Option<int?> aggression = default, Option<int?> bullying = default, Option<int?> disability = default, Option<int?> misogyny = default, Option<int?> overallLevel = default, Option<int?> raceEthnicityOrReligion = default, Option<int?> sexBasedTerms = default, Option<int?> sexualitySexOrGender = default, Option<int?> swearing = default)
        {
            AggressionOption = aggression;
            BullyingOption = bullying;
            DisabilityOption = disability;
            MisogynyOption = misogyny;
            OverallLevelOption = overallLevel;
            RaceEthnicityOrReligionOption = raceEthnicityOrReligion;
            SexBasedTermsOption = sexBasedTerms;
            SexualitySexOrGenderOption = sexualitySexOrGender;
            SwearingOption = swearing;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Aggression
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> AggressionOption { get; private set; }

        /// <summary>
        /// The Automod level for hostility involving aggression.
        /// </summary>
        /// <value>The Automod level for hostility involving aggression.</value>
        [JsonPropertyName("aggression")]
        public int? Aggression { get { return this.AggressionOption; } set { this.AggressionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Bullying
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> BullyingOption { get; private set; }

        /// <summary>
        /// The Automod level for hostility involving name calling or insults.
        /// </summary>
        /// <value>The Automod level for hostility involving name calling or insults.</value>
        [JsonPropertyName("bullying")]
        public int? Bullying { get { return this.BullyingOption; } set { this.BullyingOption = new(value); } }

        /// <summary>
        /// Used to track the state of Disability
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> DisabilityOption { get; private set; }

        /// <summary>
        /// The Automod level for discrimination against disability.
        /// </summary>
        /// <value>The Automod level for discrimination against disability.</value>
        [JsonPropertyName("disability")]
        public int? Disability { get { return this.DisabilityOption; } set { this.DisabilityOption = new(value); } }

        /// <summary>
        /// Used to track the state of Misogyny
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> MisogynyOption { get; private set; }

        /// <summary>
        /// The Automod level for discrimination against women.
        /// </summary>
        /// <value>The Automod level for discrimination against women.</value>
        [JsonPropertyName("misogyny")]
        public int? Misogyny { get { return this.MisogynyOption; } set { this.MisogynyOption = new(value); } }

        /// <summary>
        /// Used to track the state of OverallLevel
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> OverallLevelOption { get; private set; }

        /// <summary>
        /// The default AutoMod level for the broadcaster.
        /// </summary>
        /// <value>The default AutoMod level for the broadcaster.</value>
        [JsonPropertyName("overall_level")]
        public int? OverallLevel { get { return this.OverallLevelOption; } set { this.OverallLevelOption = new(value); } }

        /// <summary>
        /// Used to track the state of RaceEthnicityOrReligion
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> RaceEthnicityOrReligionOption { get; private set; }

        /// <summary>
        /// The Automod level for racial discrimination.
        /// </summary>
        /// <value>The Automod level for racial discrimination.</value>
        [JsonPropertyName("race_ethnicity_or_religion")]
        public int? RaceEthnicityOrReligion { get { return this.RaceEthnicityOrReligionOption; } set { this.RaceEthnicityOrReligionOption = new(value); } }

        /// <summary>
        /// Used to track the state of SexBasedTerms
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> SexBasedTermsOption { get; private set; }

        /// <summary>
        /// The Automod level for sexual content.
        /// </summary>
        /// <value>The Automod level for sexual content.</value>
        [JsonPropertyName("sex_based_terms")]
        public int? SexBasedTerms { get { return this.SexBasedTermsOption; } set { this.SexBasedTermsOption = new(value); } }

        /// <summary>
        /// Used to track the state of SexualitySexOrGender
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> SexualitySexOrGenderOption { get; private set; }

        /// <summary>
        /// The AutoMod level for discrimination based on sexuality, sex, or gender.
        /// </summary>
        /// <value>The AutoMod level for discrimination based on sexuality, sex, or gender.</value>
        [JsonPropertyName("sexuality_sex_or_gender")]
        public int? SexualitySexOrGender { get { return this.SexualitySexOrGenderOption; } set { this.SexualitySexOrGenderOption = new(value); } }

        /// <summary>
        /// Used to track the state of Swearing
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> SwearingOption { get; private set; }

        /// <summary>
        /// The Automod level for profanity.
        /// </summary>
        /// <value>The Automod level for profanity.</value>
        [JsonPropertyName("swearing")]
        public int? Swearing { get { return this.SwearingOption; } set { this.SwearingOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateAutoModSettingsBody {\n");
            sb.Append("  Aggression: ").Append(Aggression).Append("\n");
            sb.Append("  Bullying: ").Append(Bullying).Append("\n");
            sb.Append("  Disability: ").Append(Disability).Append("\n");
            sb.Append("  Misogyny: ").Append(Misogyny).Append("\n");
            sb.Append("  OverallLevel: ").Append(OverallLevel).Append("\n");
            sb.Append("  RaceEthnicityOrReligion: ").Append(RaceEthnicityOrReligion).Append("\n");
            sb.Append("  SexBasedTerms: ").Append(SexBasedTerms).Append("\n");
            sb.Append("  SexualitySexOrGender: ").Append(SexualitySexOrGender).Append("\n");
            sb.Append("  Swearing: ").Append(Swearing).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UpdateAutoModSettingsBody" />
    /// </summary>
    public class UpdateAutoModSettingsBodyJsonConverter : JsonConverter<UpdateAutoModSettingsBody>
    {
        /// <summary>
        /// Deserializes json to <see cref="UpdateAutoModSettingsBody" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override UpdateAutoModSettingsBody Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> aggression = default;
            Option<int?> bullying = default;
            Option<int?> disability = default;
            Option<int?> misogyny = default;
            Option<int?> overallLevel = default;
            Option<int?> raceEthnicityOrReligion = default;
            Option<int?> sexBasedTerms = default;
            Option<int?> sexualitySexOrGender = default;
            Option<int?> swearing = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "aggression":
                            aggression = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "bullying":
                            bullying = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "disability":
                            disability = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "misogyny":
                            misogyny = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "overall_level":
                            overallLevel = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "race_ethnicity_or_religion":
                            raceEthnicityOrReligion = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "sex_based_terms":
                            sexBasedTerms = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "sexuality_sex_or_gender":
                            sexualitySexOrGender = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "swearing":
                            swearing = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (aggression.IsSet && aggression.Value == null)
                throw new ArgumentNullException(nameof(aggression), "Property is not nullable for class UpdateAutoModSettingsBody.");

            if (bullying.IsSet && bullying.Value == null)
                throw new ArgumentNullException(nameof(bullying), "Property is not nullable for class UpdateAutoModSettingsBody.");

            if (disability.IsSet && disability.Value == null)
                throw new ArgumentNullException(nameof(disability), "Property is not nullable for class UpdateAutoModSettingsBody.");

            if (misogyny.IsSet && misogyny.Value == null)
                throw new ArgumentNullException(nameof(misogyny), "Property is not nullable for class UpdateAutoModSettingsBody.");

            if (overallLevel.IsSet && overallLevel.Value == null)
                throw new ArgumentNullException(nameof(overallLevel), "Property is not nullable for class UpdateAutoModSettingsBody.");

            if (raceEthnicityOrReligion.IsSet && raceEthnicityOrReligion.Value == null)
                throw new ArgumentNullException(nameof(raceEthnicityOrReligion), "Property is not nullable for class UpdateAutoModSettingsBody.");

            if (sexBasedTerms.IsSet && sexBasedTerms.Value == null)
                throw new ArgumentNullException(nameof(sexBasedTerms), "Property is not nullable for class UpdateAutoModSettingsBody.");

            if (sexualitySexOrGender.IsSet && sexualitySexOrGender.Value == null)
                throw new ArgumentNullException(nameof(sexualitySexOrGender), "Property is not nullable for class UpdateAutoModSettingsBody.");

            if (swearing.IsSet && swearing.Value == null)
                throw new ArgumentNullException(nameof(swearing), "Property is not nullable for class UpdateAutoModSettingsBody.");

            return new UpdateAutoModSettingsBody(aggression, bullying, disability, misogyny, overallLevel, raceEthnicityOrReligion, sexBasedTerms, sexualitySexOrGender, swearing);
        }

        /// <summary>
        /// Serializes a <see cref="UpdateAutoModSettingsBody" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="updateAutoModSettingsBody"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, UpdateAutoModSettingsBody updateAutoModSettingsBody, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, updateAutoModSettingsBody, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="UpdateAutoModSettingsBody" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="updateAutoModSettingsBody"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, UpdateAutoModSettingsBody updateAutoModSettingsBody, JsonSerializerOptions jsonSerializerOptions)
        {
            if (updateAutoModSettingsBody.AggressionOption.IsSet)
                writer.WriteNumber("aggression", updateAutoModSettingsBody.AggressionOption.Value!.Value);

            if (updateAutoModSettingsBody.BullyingOption.IsSet)
                writer.WriteNumber("bullying", updateAutoModSettingsBody.BullyingOption.Value!.Value);

            if (updateAutoModSettingsBody.DisabilityOption.IsSet)
                writer.WriteNumber("disability", updateAutoModSettingsBody.DisabilityOption.Value!.Value);

            if (updateAutoModSettingsBody.MisogynyOption.IsSet)
                writer.WriteNumber("misogyny", updateAutoModSettingsBody.MisogynyOption.Value!.Value);

            if (updateAutoModSettingsBody.OverallLevelOption.IsSet)
                writer.WriteNumber("overall_level", updateAutoModSettingsBody.OverallLevelOption.Value!.Value);

            if (updateAutoModSettingsBody.RaceEthnicityOrReligionOption.IsSet)
                writer.WriteNumber("race_ethnicity_or_religion", updateAutoModSettingsBody.RaceEthnicityOrReligionOption.Value!.Value);

            if (updateAutoModSettingsBody.SexBasedTermsOption.IsSet)
                writer.WriteNumber("sex_based_terms", updateAutoModSettingsBody.SexBasedTermsOption.Value!.Value);

            if (updateAutoModSettingsBody.SexualitySexOrGenderOption.IsSet)
                writer.WriteNumber("sexuality_sex_or_gender", updateAutoModSettingsBody.SexualitySexOrGenderOption.Value!.Value);

            if (updateAutoModSettingsBody.SwearingOption.IsSet)
                writer.WriteNumber("swearing", updateAutoModSettingsBody.SwearingOption.Value!.Value);
        }
    }
}

// <auto-generated>
/*
 * Twitch API Swagger UI (Unofficial)
 *
 * Unofficial Swagger UI for Twitch API.  All endpoints are generated automatically from the [twitch docs](https://dev.twitch.tv/docs/api/reference) page.  __Features:__  * Swagger UI for all Twitch API endpoints * Schemas for _Request Query Parameters_, _Request Body_, _Response Body_ * Some additional schemas like _Clip_, _ChatBadge_, _Prediction_, _Game_, _Channel_, _Video_ etc. * Response codes and examples * Generated types for TypeScript: [ts-twitch-api](https://github.com/DmitryScaletta/ts-twitch-api)  __Repository:__ [github.com/DmitryScaletta/twitch-api-swagger](https://github.com/DmitryScaletta/twitch-api-swagger)
 *
 * The version of the OpenAPI document: helix
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using TwistedTaleweaver.Integration.Twitch.Helix.Client;

namespace TwistedTaleweaver.Integration.Twitch.Helix.Model
{
    /// <summary>
    /// SendExtensionPubSubMessageBody
    /// </summary>
    public partial class SendExtensionPubSubMessageBody : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SendExtensionPubSubMessageBody" /> class.
        /// </summary>
        /// <param name="target">The target of the message. Possible values are:      * broadcast * global * whisper-&lt;user-id&gt;    If &#x60;is_global_broadcast&#x60; is **true**, you must set this field to global. The broadcast and global values are mutually exclusive; specify only one of them.</param>
        /// <param name="broadcasterId">The ID of the broadcaster to send the message to. Don’t include this field if &#x60;is_global_broadcast&#x60; is set to **true**.</param>
        /// <param name="message">The message to send. The message can be a plain-text string or a string-encoded JSON object. The message is limited to a maximum of 5 KB.</param>
        /// <param name="isGlobalBroadcast">A Boolean value that determines whether the message should be sent to all channels where your extension is active. Set to **true** if the message should be sent to all channels. The default is **false**.</param>
        [JsonConstructor]
        public SendExtensionPubSubMessageBody(List<SendExtensionPubSubMessageBody.TargetEnum> target, string broadcasterId, string message, Option<bool?> isGlobalBroadcast = default)
        {
            Target = target;
            BroadcasterId = broadcasterId;
            Message = message;
            IsGlobalBroadcastOption = isGlobalBroadcast;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines Target
        /// </summary>
        public enum TargetEnum
        {
            /// <summary>
            /// Enum Broadcast for value: broadcast
            /// </summary>
            Broadcast = 1,

            /// <summary>
            /// Enum Global for value: global
            /// </summary>
            Global = 2,

            /// <summary>
            /// Enum WhisperuserId for value: whisper-&lt;user-id&gt;
            /// </summary>
            WhisperuserId = 3
        }

        /// <summary>
        /// Returns a <see cref="TargetEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TargetEnum TargetEnumFromString(string value)
        {
            if (value.Equals("broadcast"))
                return TargetEnum.Broadcast;

            if (value.Equals("global"))
                return TargetEnum.Global;

            if (value.Equals("whisper-<user-id>"))
                return TargetEnum.WhisperuserId;

            throw new NotImplementedException($"Could not convert value to type TargetEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TargetEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TargetEnum? TargetEnumFromStringOrDefault(string value)
        {
            if (value.Equals("broadcast"))
                return TargetEnum.Broadcast;

            if (value.Equals("global"))
                return TargetEnum.Global;

            if (value.Equals("whisper-<user-id>"))
                return TargetEnum.WhisperuserId;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TargetEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TargetEnumToJsonValue(TargetEnum? value)
        {
            if (value == TargetEnum.Broadcast)
                return "broadcast";

            if (value == TargetEnum.Global)
                return "global";

            if (value == TargetEnum.WhisperuserId)
                return "whisper-<user-id>";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// The target of the message. Possible values are:      * broadcast * global * whisper-&lt;user-id&gt;    If &#x60;is_global_broadcast&#x60; is **true**, you must set this field to global. The broadcast and global values are mutually exclusive; specify only one of them.
        /// </summary>
        /// <value>The target of the message. Possible values are:      * broadcast * global * whisper-&lt;user-id&gt;    If &#x60;is_global_broadcast&#x60; is **true**, you must set this field to global. The broadcast and global values are mutually exclusive; specify only one of them.</value>
        [JsonPropertyName("target")]
        public List<SendExtensionPubSubMessageBody.TargetEnum> Target { get; set; }

        /// <summary>
        /// The ID of the broadcaster to send the message to. Don’t include this field if &#x60;is_global_broadcast&#x60; is set to **true**.
        /// </summary>
        /// <value>The ID of the broadcaster to send the message to. Don’t include this field if &#x60;is_global_broadcast&#x60; is set to **true**.</value>
        [JsonPropertyName("broadcaster_id")]
        public string BroadcasterId { get; set; }

        /// <summary>
        /// The message to send. The message can be a plain-text string or a string-encoded JSON object. The message is limited to a maximum of 5 KB.
        /// </summary>
        /// <value>The message to send. The message can be a plain-text string or a string-encoded JSON object. The message is limited to a maximum of 5 KB.</value>
        [JsonPropertyName("message")]
        public string Message { get; set; }

        /// <summary>
        /// Used to track the state of IsGlobalBroadcast
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsGlobalBroadcastOption { get; private set; }

        /// <summary>
        /// A Boolean value that determines whether the message should be sent to all channels where your extension is active. Set to **true** if the message should be sent to all channels. The default is **false**.
        /// </summary>
        /// <value>A Boolean value that determines whether the message should be sent to all channels where your extension is active. Set to **true** if the message should be sent to all channels. The default is **false**.</value>
        [JsonPropertyName("is_global_broadcast")]
        public bool? IsGlobalBroadcast { get { return this.IsGlobalBroadcastOption; } set { this.IsGlobalBroadcastOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SendExtensionPubSubMessageBody {\n");
            sb.Append("  Target: ").Append(Target).Append("\n");
            sb.Append("  BroadcasterId: ").Append(BroadcasterId).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  IsGlobalBroadcast: ").Append(IsGlobalBroadcast).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SendExtensionPubSubMessageBody" />
    /// </summary>
    public class SendExtensionPubSubMessageBodyJsonConverter : JsonConverter<SendExtensionPubSubMessageBody>
    {
        /// <summary>
        /// Deserializes json to <see cref="SendExtensionPubSubMessageBody" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SendExtensionPubSubMessageBody Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<SendExtensionPubSubMessageBody.TargetEnum>?> target = default;
            Option<string?> broadcasterId = default;
            Option<string?> message = default;
            Option<bool?> isGlobalBroadcast = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "target":
                            target = new Option<List<SendExtensionPubSubMessageBody.TargetEnum>?>(JsonSerializer.Deserialize<List<SendExtensionPubSubMessageBody.TargetEnum>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "broadcaster_id":
                            broadcasterId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "message":
                            message = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "is_global_broadcast":
                            isGlobalBroadcast = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!target.IsSet)
                throw new ArgumentException("Property is required for class SendExtensionPubSubMessageBody.", nameof(target));

            if (!broadcasterId.IsSet)
                throw new ArgumentException("Property is required for class SendExtensionPubSubMessageBody.", nameof(broadcasterId));

            if (!message.IsSet)
                throw new ArgumentException("Property is required for class SendExtensionPubSubMessageBody.", nameof(message));

            if (target.IsSet && target.Value == null)
                throw new ArgumentNullException(nameof(target), "Property is not nullable for class SendExtensionPubSubMessageBody.");

            if (broadcasterId.IsSet && broadcasterId.Value == null)
                throw new ArgumentNullException(nameof(broadcasterId), "Property is not nullable for class SendExtensionPubSubMessageBody.");

            if (message.IsSet && message.Value == null)
                throw new ArgumentNullException(nameof(message), "Property is not nullable for class SendExtensionPubSubMessageBody.");

            if (isGlobalBroadcast.IsSet && isGlobalBroadcast.Value == null)
                throw new ArgumentNullException(nameof(isGlobalBroadcast), "Property is not nullable for class SendExtensionPubSubMessageBody.");

            return new SendExtensionPubSubMessageBody(target.Value!, broadcasterId.Value!, message.Value!, isGlobalBroadcast);
        }

        /// <summary>
        /// Serializes a <see cref="SendExtensionPubSubMessageBody" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="sendExtensionPubSubMessageBody"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SendExtensionPubSubMessageBody sendExtensionPubSubMessageBody, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, sendExtensionPubSubMessageBody, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SendExtensionPubSubMessageBody" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="sendExtensionPubSubMessageBody"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SendExtensionPubSubMessageBody sendExtensionPubSubMessageBody, JsonSerializerOptions jsonSerializerOptions)
        {
            if (sendExtensionPubSubMessageBody.Target == null)
                throw new ArgumentNullException(nameof(sendExtensionPubSubMessageBody.Target), "Property is required for class SendExtensionPubSubMessageBody.");

            if (sendExtensionPubSubMessageBody.BroadcasterId == null)
                throw new ArgumentNullException(nameof(sendExtensionPubSubMessageBody.BroadcasterId), "Property is required for class SendExtensionPubSubMessageBody.");

            if (sendExtensionPubSubMessageBody.Message == null)
                throw new ArgumentNullException(nameof(sendExtensionPubSubMessageBody.Message), "Property is required for class SendExtensionPubSubMessageBody.");

            writer.WritePropertyName("target");
            JsonSerializer.Serialize(writer, sendExtensionPubSubMessageBody.Target, jsonSerializerOptions);
            writer.WriteString("broadcaster_id", sendExtensionPubSubMessageBody.BroadcasterId);

            writer.WriteString("message", sendExtensionPubSubMessageBody.Message);

            if (sendExtensionPubSubMessageBody.IsGlobalBroadcastOption.IsSet)
                writer.WriteBoolean("is_global_broadcast", sendExtensionPubSubMessageBody.IsGlobalBroadcastOption.Value!.Value);
        }
    }
}

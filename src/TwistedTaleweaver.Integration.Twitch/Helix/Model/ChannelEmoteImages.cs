// <auto-generated>
/*
 * Twitch API Swagger UI (Unofficial)
 *
 * Unofficial Swagger UI for Twitch API.  All endpoints are generated automatically from the [twitch docs](https://dev.twitch.tv/docs/api/reference) page.  __Features:__  * Swagger UI for all Twitch API endpoints * Schemas for _Request Query Parameters_, _Request Body_, _Response Body_ * Some additional schemas like _Clip_, _ChatBadge_, _Prediction_, _Game_, _Channel_, _Video_ etc. * Response codes and examples * Generated types for TypeScript: [ts-twitch-api](https://github.com/DmitryScaletta/ts-twitch-api)  __Repository:__ [github.com/DmitryScaletta/twitch-api-swagger](https://github.com/DmitryScaletta/twitch-api-swagger)
 *
 * The version of the OpenAPI document: helix
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using TwistedTaleweaver.Integration.Twitch.Helix.Client;

namespace TwistedTaleweaver.Integration.Twitch.Helix.Model
{
    /// <summary>
    /// The image URLs for the emote. These image URLs always provide a static, non-animated emote image with a light background.      **NOTE:** You should use the templated URL in the &#x60;template&#x60; field to fetch the image instead of using these URLs.
    /// </summary>
    public partial class ChannelEmoteImages : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelEmoteImages" /> class.
        /// </summary>
        /// <param name="url1x">A URL to the small version (28px x 28px) of the emote.</param>
        /// <param name="url2x">A URL to the medium version (56px x 56px) of the emote.</param>
        /// <param name="url4x">A URL to the large version (112px x 112px) of the emote.</param>
        [JsonConstructor]
        public ChannelEmoteImages(string url1x, string url2x, string url4x)
        {
            Url1x = url1x;
            Url2x = url2x;
            Url4x = url4x;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// A URL to the small version (28px x 28px) of the emote.
        /// </summary>
        /// <value>A URL to the small version (28px x 28px) of the emote.</value>
        [JsonPropertyName("url_1x")]
        public string Url1x { get; set; }

        /// <summary>
        /// A URL to the medium version (56px x 56px) of the emote.
        /// </summary>
        /// <value>A URL to the medium version (56px x 56px) of the emote.</value>
        [JsonPropertyName("url_2x")]
        public string Url2x { get; set; }

        /// <summary>
        /// A URL to the large version (112px x 112px) of the emote.
        /// </summary>
        /// <value>A URL to the large version (112px x 112px) of the emote.</value>
        [JsonPropertyName("url_4x")]
        public string Url4x { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ChannelEmoteImages {\n");
            sb.Append("  Url1x: ").Append(Url1x).Append("\n");
            sb.Append("  Url2x: ").Append(Url2x).Append("\n");
            sb.Append("  Url4x: ").Append(Url4x).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ChannelEmoteImages" />
    /// </summary>
    public class ChannelEmoteImagesJsonConverter : JsonConverter<ChannelEmoteImages>
    {
        /// <summary>
        /// Deserializes json to <see cref="ChannelEmoteImages" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ChannelEmoteImages Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> url1x = default;
            Option<string?> url2x = default;
            Option<string?> url4x = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "url_1x":
                            url1x = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "url_2x":
                            url2x = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "url_4x":
                            url4x = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!url1x.IsSet)
                throw new ArgumentException("Property is required for class ChannelEmoteImages.", nameof(url1x));

            if (!url2x.IsSet)
                throw new ArgumentException("Property is required for class ChannelEmoteImages.", nameof(url2x));

            if (!url4x.IsSet)
                throw new ArgumentException("Property is required for class ChannelEmoteImages.", nameof(url4x));

            if (url1x.IsSet && url1x.Value == null)
                throw new ArgumentNullException(nameof(url1x), "Property is not nullable for class ChannelEmoteImages.");

            if (url2x.IsSet && url2x.Value == null)
                throw new ArgumentNullException(nameof(url2x), "Property is not nullable for class ChannelEmoteImages.");

            if (url4x.IsSet && url4x.Value == null)
                throw new ArgumentNullException(nameof(url4x), "Property is not nullable for class ChannelEmoteImages.");

            return new ChannelEmoteImages(url1x.Value!, url2x.Value!, url4x.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="ChannelEmoteImages" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="channelEmoteImages"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ChannelEmoteImages channelEmoteImages, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, channelEmoteImages, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ChannelEmoteImages" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="channelEmoteImages"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ChannelEmoteImages channelEmoteImages, JsonSerializerOptions jsonSerializerOptions)
        {
            if (channelEmoteImages.Url1x == null)
                throw new ArgumentNullException(nameof(channelEmoteImages.Url1x), "Property is required for class ChannelEmoteImages.");

            if (channelEmoteImages.Url2x == null)
                throw new ArgumentNullException(nameof(channelEmoteImages.Url2x), "Property is required for class ChannelEmoteImages.");

            if (channelEmoteImages.Url4x == null)
                throw new ArgumentNullException(nameof(channelEmoteImages.Url4x), "Property is required for class ChannelEmoteImages.");

            writer.WriteString("url_1x", channelEmoteImages.Url1x);

            writer.WriteString("url_2x", channelEmoteImages.Url2x);

            writer.WriteString("url_4x", channelEmoteImages.Url4x);
        }
    }
}

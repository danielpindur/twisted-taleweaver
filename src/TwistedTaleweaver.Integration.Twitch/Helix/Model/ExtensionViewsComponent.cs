// <auto-generated>
/*
 * Twitch API Swagger UI (Unofficial)
 *
 * Unofficial Swagger UI for Twitch API.  All endpoints are generated automatically from the [twitch docs](https://dev.twitch.tv/docs/api/reference) page.  __Features:__  * Swagger UI for all Twitch API endpoints * Schemas for _Request Query Parameters_, _Request Body_, _Response Body_ * Some additional schemas like _Clip_, _ChatBadge_, _Prediction_, _Game_, _Channel_, _Video_ etc. * Response codes and examples * Generated types for TypeScript: [ts-twitch-api](https://github.com/DmitryScaletta/ts-twitch-api)  __Repository:__ [github.com/DmitryScaletta/twitch-api-swagger](https://github.com/DmitryScaletta/twitch-api-swagger)
 *
 * The version of the OpenAPI document: helix
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using TwistedTaleweaver.Integration.Twitch.Helix.Client;

namespace TwistedTaleweaver.Integration.Twitch.Helix.Model
{
    /// <summary>
    /// Describes how the extension is rendered if the extension may be activated as a video-component extension.
    /// </summary>
    public partial class ExtensionViewsComponent : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExtensionViewsComponent" /> class.
        /// </summary>
        /// <param name="viewerUrl">The HTML file that is shown to viewers on the channel page when the extension is activated in a Video - Component slot.</param>
        /// <param name="aspectRatioX">The width value of the ratio (width : height) which determines the extension’s width, and how the extension’s iframe will resize in different video player environments.</param>
        /// <param name="aspectRatioY">The height value of the ratio (width : height) which determines the extension’s height, and how the extension’s iframe will resize in different video player environments.</param>
        /// <param name="autoscale">A Boolean value that determines whether to apply CSS zoom. If **true**, a CSS zoom is applied such that the size of the extension is variable but the inner dimensions are fixed based on Scale Pixels. This allows your extension to render as if it is of fixed width and height. If **false**, the inner dimensions of the extension iframe are variable, meaning your extension must implement responsiveness.</param>
        /// <param name="scalePixels">The base width, in pixels, of the extension to use when scaling (see &#x60;autoscale&#x60;). This value is ignored if &#x60;autoscale&#x60; is **false**.</param>
        /// <param name="targetHeight">The height as a percent of the maximum height of a video component extension. Values are between 1% - 100%.</param>
        /// <param name="canLinkExternalContent">A Boolean value that determines whether the extension can link to non-Twitch domains.</param>
        [JsonConstructor]
        public ExtensionViewsComponent(string viewerUrl, int aspectRatioX, int aspectRatioY, bool autoscale, int scalePixels, int targetHeight, bool canLinkExternalContent)
        {
            ViewerUrl = viewerUrl;
            AspectRatioX = aspectRatioX;
            AspectRatioY = aspectRatioY;
            Autoscale = autoscale;
            ScalePixels = scalePixels;
            TargetHeight = targetHeight;
            CanLinkExternalContent = canLinkExternalContent;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The HTML file that is shown to viewers on the channel page when the extension is activated in a Video - Component slot.
        /// </summary>
        /// <value>The HTML file that is shown to viewers on the channel page when the extension is activated in a Video - Component slot.</value>
        [JsonPropertyName("viewer_url")]
        public string ViewerUrl { get; set; }

        /// <summary>
        /// The width value of the ratio (width : height) which determines the extension’s width, and how the extension’s iframe will resize in different video player environments.
        /// </summary>
        /// <value>The width value of the ratio (width : height) which determines the extension’s width, and how the extension’s iframe will resize in different video player environments.</value>
        [JsonPropertyName("aspect_ratio_x")]
        public int AspectRatioX { get; set; }

        /// <summary>
        /// The height value of the ratio (width : height) which determines the extension’s height, and how the extension’s iframe will resize in different video player environments.
        /// </summary>
        /// <value>The height value of the ratio (width : height) which determines the extension’s height, and how the extension’s iframe will resize in different video player environments.</value>
        [JsonPropertyName("aspect_ratio_y")]
        public int AspectRatioY { get; set; }

        /// <summary>
        /// A Boolean value that determines whether to apply CSS zoom. If **true**, a CSS zoom is applied such that the size of the extension is variable but the inner dimensions are fixed based on Scale Pixels. This allows your extension to render as if it is of fixed width and height. If **false**, the inner dimensions of the extension iframe are variable, meaning your extension must implement responsiveness.
        /// </summary>
        /// <value>A Boolean value that determines whether to apply CSS zoom. If **true**, a CSS zoom is applied such that the size of the extension is variable but the inner dimensions are fixed based on Scale Pixels. This allows your extension to render as if it is of fixed width and height. If **false**, the inner dimensions of the extension iframe are variable, meaning your extension must implement responsiveness.</value>
        [JsonPropertyName("autoscale")]
        public bool Autoscale { get; set; }

        /// <summary>
        /// The base width, in pixels, of the extension to use when scaling (see &#x60;autoscale&#x60;). This value is ignored if &#x60;autoscale&#x60; is **false**.
        /// </summary>
        /// <value>The base width, in pixels, of the extension to use when scaling (see &#x60;autoscale&#x60;). This value is ignored if &#x60;autoscale&#x60; is **false**.</value>
        [JsonPropertyName("scale_pixels")]
        public int ScalePixels { get; set; }

        /// <summary>
        /// The height as a percent of the maximum height of a video component extension. Values are between 1% - 100%.
        /// </summary>
        /// <value>The height as a percent of the maximum height of a video component extension. Values are between 1% - 100%.</value>
        [JsonPropertyName("target_height")]
        public int TargetHeight { get; set; }

        /// <summary>
        /// A Boolean value that determines whether the extension can link to non-Twitch domains.
        /// </summary>
        /// <value>A Boolean value that determines whether the extension can link to non-Twitch domains.</value>
        [JsonPropertyName("can_link_external_content")]
        public bool CanLinkExternalContent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ExtensionViewsComponent {\n");
            sb.Append("  ViewerUrl: ").Append(ViewerUrl).Append("\n");
            sb.Append("  AspectRatioX: ").Append(AspectRatioX).Append("\n");
            sb.Append("  AspectRatioY: ").Append(AspectRatioY).Append("\n");
            sb.Append("  Autoscale: ").Append(Autoscale).Append("\n");
            sb.Append("  ScalePixels: ").Append(ScalePixels).Append("\n");
            sb.Append("  TargetHeight: ").Append(TargetHeight).Append("\n");
            sb.Append("  CanLinkExternalContent: ").Append(CanLinkExternalContent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ExtensionViewsComponent" />
    /// </summary>
    public class ExtensionViewsComponentJsonConverter : JsonConverter<ExtensionViewsComponent>
    {
        /// <summary>
        /// Deserializes json to <see cref="ExtensionViewsComponent" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ExtensionViewsComponent Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> viewerUrl = default;
            Option<int?> aspectRatioX = default;
            Option<int?> aspectRatioY = default;
            Option<bool?> autoscale = default;
            Option<int?> scalePixels = default;
            Option<int?> targetHeight = default;
            Option<bool?> canLinkExternalContent = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "viewer_url":
                            viewerUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "aspect_ratio_x":
                            aspectRatioX = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "aspect_ratio_y":
                            aspectRatioY = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "autoscale":
                            autoscale = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "scale_pixels":
                            scalePixels = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "target_height":
                            targetHeight = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "can_link_external_content":
                            canLinkExternalContent = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!viewerUrl.IsSet)
                throw new ArgumentException("Property is required for class ExtensionViewsComponent.", nameof(viewerUrl));

            if (!aspectRatioX.IsSet)
                throw new ArgumentException("Property is required for class ExtensionViewsComponent.", nameof(aspectRatioX));

            if (!aspectRatioY.IsSet)
                throw new ArgumentException("Property is required for class ExtensionViewsComponent.", nameof(aspectRatioY));

            if (!autoscale.IsSet)
                throw new ArgumentException("Property is required for class ExtensionViewsComponent.", nameof(autoscale));

            if (!scalePixels.IsSet)
                throw new ArgumentException("Property is required for class ExtensionViewsComponent.", nameof(scalePixels));

            if (!targetHeight.IsSet)
                throw new ArgumentException("Property is required for class ExtensionViewsComponent.", nameof(targetHeight));

            if (!canLinkExternalContent.IsSet)
                throw new ArgumentException("Property is required for class ExtensionViewsComponent.", nameof(canLinkExternalContent));

            if (viewerUrl.IsSet && viewerUrl.Value == null)
                throw new ArgumentNullException(nameof(viewerUrl), "Property is not nullable for class ExtensionViewsComponent.");

            if (aspectRatioX.IsSet && aspectRatioX.Value == null)
                throw new ArgumentNullException(nameof(aspectRatioX), "Property is not nullable for class ExtensionViewsComponent.");

            if (aspectRatioY.IsSet && aspectRatioY.Value == null)
                throw new ArgumentNullException(nameof(aspectRatioY), "Property is not nullable for class ExtensionViewsComponent.");

            if (autoscale.IsSet && autoscale.Value == null)
                throw new ArgumentNullException(nameof(autoscale), "Property is not nullable for class ExtensionViewsComponent.");

            if (scalePixels.IsSet && scalePixels.Value == null)
                throw new ArgumentNullException(nameof(scalePixels), "Property is not nullable for class ExtensionViewsComponent.");

            if (targetHeight.IsSet && targetHeight.Value == null)
                throw new ArgumentNullException(nameof(targetHeight), "Property is not nullable for class ExtensionViewsComponent.");

            if (canLinkExternalContent.IsSet && canLinkExternalContent.Value == null)
                throw new ArgumentNullException(nameof(canLinkExternalContent), "Property is not nullable for class ExtensionViewsComponent.");

            return new ExtensionViewsComponent(viewerUrl.Value!, aspectRatioX.Value!.Value!, aspectRatioY.Value!.Value!, autoscale.Value!.Value!, scalePixels.Value!.Value!, targetHeight.Value!.Value!, canLinkExternalContent.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="ExtensionViewsComponent" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="extensionViewsComponent"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ExtensionViewsComponent extensionViewsComponent, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, extensionViewsComponent, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ExtensionViewsComponent" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="extensionViewsComponent"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ExtensionViewsComponent extensionViewsComponent, JsonSerializerOptions jsonSerializerOptions)
        {
            if (extensionViewsComponent.ViewerUrl == null)
                throw new ArgumentNullException(nameof(extensionViewsComponent.ViewerUrl), "Property is required for class ExtensionViewsComponent.");

            writer.WriteString("viewer_url", extensionViewsComponent.ViewerUrl);

            writer.WriteNumber("aspect_ratio_x", extensionViewsComponent.AspectRatioX);

            writer.WriteNumber("aspect_ratio_y", extensionViewsComponent.AspectRatioY);

            writer.WriteBoolean("autoscale", extensionViewsComponent.Autoscale);

            writer.WriteNumber("scale_pixels", extensionViewsComponent.ScalePixels);

            writer.WriteNumber("target_height", extensionViewsComponent.TargetHeight);

            writer.WriteBoolean("can_link_external_content", extensionViewsComponent.CanLinkExternalContent);
        }
    }
}

// <auto-generated>
/*
 * Twitch API Swagger UI (Unofficial)
 *
 * Unofficial Swagger UI for Twitch API.  All endpoints are generated automatically from the [twitch docs](https://dev.twitch.tv/docs/api/reference) page.  __Features:__  * Swagger UI for all Twitch API endpoints * Schemas for _Request Query Parameters_, _Request Body_, _Response Body_ * Some additional schemas like _Clip_, _ChatBadge_, _Prediction_, _Game_, _Channel_, _Video_ etc. * Response codes and examples * Generated types for TypeScript: [ts-twitch-api](https://github.com/DmitryScaletta/ts-twitch-api)  __Repository:__ [github.com/DmitryScaletta/twitch-api-swagger](https://github.com/DmitryScaletta/twitch-api-swagger)
 *
 * The version of the OpenAPI document: helix
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using TwistedTaleweaver.Integration.Twitch.Helix.Client;

namespace TwistedTaleweaver.Integration.Twitch.Helix.Model
{
    /// <summary>
    /// Poll
    /// </summary>
    public partial class Poll : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Poll" /> class.
        /// </summary>
        /// <param name="id">An ID that identifies the poll.</param>
        /// <param name="broadcasterId">An ID that identifies the broadcaster that created the poll.</param>
        /// <param name="broadcasterName">The broadcaster’s display name.</param>
        /// <param name="broadcasterLogin">The broadcaster’s login name.</param>
        /// <param name="title">The question that viewers are voting on. For example, _What game should I play next?_ The title may contain a maximum of 60 characters.</param>
        /// <param name="choices">A list of choices that viewers can choose from. The list will contain a minimum of two choices and up to a maximum of five choices.</param>
        /// <param name="bitsVotingEnabled">Not used; will be set to **false**.</param>
        /// <param name="bitsPerVote">Not used; will be set to 0.</param>
        /// <param name="channelPointsVotingEnabled">A Boolean value that indicates whether viewers may cast additional votes using Channel Points. For information about Channel Points, see [Channel Points Guide](https://help.twitch.tv/s/article/channel-points-guide).</param>
        /// <param name="channelPointsPerVote">The number of points the viewer must spend to cast one additional vote.</param>
        /// <param name="status">The poll’s status. Valid values are:      * ACTIVE — The poll is running. * COMPLETED — The poll ended on schedule (see the &#x60;duration&#x60; field). * TERMINATED — The poll was terminated before its scheduled end. * ARCHIVED — The poll has been archived and is no longer visible on the channel. * MODERATED — The poll was deleted. * INVALID — Something went wrong while determining the state.</param>
        /// <param name="duration">The length of time (in seconds) that the poll will run for.</param>
        /// <param name="startedAt">The UTC date and time (in RFC3339 format) of when the poll began.</param>
        /// <param name="endedAt">The UTC date and time (in RFC3339 format) of when the poll ended. If &#x60;status&#x60; is ACTIVE, this field is set to **null**.</param>
        [JsonConstructor]
        public Poll(string id, string broadcasterId, string broadcasterName, string broadcasterLogin, string title, List<PollChoicesInner> choices, bool bitsVotingEnabled, int bitsPerVote, bool channelPointsVotingEnabled, int channelPointsPerVote, StatusEnum status, int duration, DateTime startedAt, DateTime? endedAt = default)
        {
            Id = id;
            BroadcasterId = broadcasterId;
            BroadcasterName = broadcasterName;
            BroadcasterLogin = broadcasterLogin;
            Title = title;
            Choices = choices;
            BitsVotingEnabled = bitsVotingEnabled;
            BitsPerVote = bitsPerVote;
            ChannelPointsVotingEnabled = channelPointsVotingEnabled;
            ChannelPointsPerVote = channelPointsPerVote;
            Status = status;
            Duration = duration;
            StartedAt = startedAt;
            EndedAt = endedAt;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The poll’s status. Valid values are:      * ACTIVE — The poll is running. * COMPLETED — The poll ended on schedule (see the &#x60;duration&#x60; field). * TERMINATED — The poll was terminated before its scheduled end. * ARCHIVED — The poll has been archived and is no longer visible on the channel. * MODERATED — The poll was deleted. * INVALID — Something went wrong while determining the state.
        /// </summary>
        /// <value>The poll’s status. Valid values are:      * ACTIVE — The poll is running. * COMPLETED — The poll ended on schedule (see the &#x60;duration&#x60; field). * TERMINATED — The poll was terminated before its scheduled end. * ARCHIVED — The poll has been archived and is no longer visible on the channel. * MODERATED — The poll was deleted. * INVALID — Something went wrong while determining the state.</value>
        public enum StatusEnum
        {
            /// <summary>
            /// Enum ACTIVE for value: ACTIVE
            /// </summary>
            ACTIVE = 1,

            /// <summary>
            /// Enum COMPLETED for value: COMPLETED
            /// </summary>
            COMPLETED = 2,

            /// <summary>
            /// Enum TERMINATED for value: TERMINATED
            /// </summary>
            TERMINATED = 3,

            /// <summary>
            /// Enum ARCHIVED for value: ARCHIVED
            /// </summary>
            ARCHIVED = 4,

            /// <summary>
            /// Enum MODERATED for value: MODERATED
            /// </summary>
            MODERATED = 5,

            /// <summary>
            /// Enum INVALID for value: INVALID
            /// </summary>
            INVALID = 6
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static StatusEnum StatusEnumFromString(string value)
        {
            if (value.Equals("ACTIVE"))
                return StatusEnum.ACTIVE;

            if (value.Equals("COMPLETED"))
                return StatusEnum.COMPLETED;

            if (value.Equals("TERMINATED"))
                return StatusEnum.TERMINATED;

            if (value.Equals("ARCHIVED"))
                return StatusEnum.ARCHIVED;

            if (value.Equals("MODERATED"))
                return StatusEnum.MODERATED;

            if (value.Equals("INVALID"))
                return StatusEnum.INVALID;

            throw new NotImplementedException($"Could not convert value to type StatusEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static StatusEnum? StatusEnumFromStringOrDefault(string value)
        {
            if (value.Equals("ACTIVE"))
                return StatusEnum.ACTIVE;

            if (value.Equals("COMPLETED"))
                return StatusEnum.COMPLETED;

            if (value.Equals("TERMINATED"))
                return StatusEnum.TERMINATED;

            if (value.Equals("ARCHIVED"))
                return StatusEnum.ARCHIVED;

            if (value.Equals("MODERATED"))
                return StatusEnum.MODERATED;

            if (value.Equals("INVALID"))
                return StatusEnum.INVALID;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="StatusEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string StatusEnumToJsonValue(StatusEnum value)
        {
            if (value == StatusEnum.ACTIVE)
                return "ACTIVE";

            if (value == StatusEnum.COMPLETED)
                return "COMPLETED";

            if (value == StatusEnum.TERMINATED)
                return "TERMINATED";

            if (value == StatusEnum.ARCHIVED)
                return "ARCHIVED";

            if (value == StatusEnum.MODERATED)
                return "MODERATED";

            if (value == StatusEnum.INVALID)
                return "INVALID";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// The poll’s status. Valid values are:      * ACTIVE — The poll is running. * COMPLETED — The poll ended on schedule (see the &#x60;duration&#x60; field). * TERMINATED — The poll was terminated before its scheduled end. * ARCHIVED — The poll has been archived and is no longer visible on the channel. * MODERATED — The poll was deleted. * INVALID — Something went wrong while determining the state.
        /// </summary>
        /// <value>The poll’s status. Valid values are:      * ACTIVE — The poll is running. * COMPLETED — The poll ended on schedule (see the &#x60;duration&#x60; field). * TERMINATED — The poll was terminated before its scheduled end. * ARCHIVED — The poll has been archived and is no longer visible on the channel. * MODERATED — The poll was deleted. * INVALID — Something went wrong while determining the state.</value>
        [JsonPropertyName("status")]
        public StatusEnum Status { get; set; }

        /// <summary>
        /// An ID that identifies the poll.
        /// </summary>
        /// <value>An ID that identifies the poll.</value>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// An ID that identifies the broadcaster that created the poll.
        /// </summary>
        /// <value>An ID that identifies the broadcaster that created the poll.</value>
        [JsonPropertyName("broadcaster_id")]
        public string BroadcasterId { get; set; }

        /// <summary>
        /// The broadcaster’s display name.
        /// </summary>
        /// <value>The broadcaster’s display name.</value>
        [JsonPropertyName("broadcaster_name")]
        public string BroadcasterName { get; set; }

        /// <summary>
        /// The broadcaster’s login name.
        /// </summary>
        /// <value>The broadcaster’s login name.</value>
        [JsonPropertyName("broadcaster_login")]
        public string BroadcasterLogin { get; set; }

        /// <summary>
        /// The question that viewers are voting on. For example, _What game should I play next?_ The title may contain a maximum of 60 characters.
        /// </summary>
        /// <value>The question that viewers are voting on. For example, _What game should I play next?_ The title may contain a maximum of 60 characters.</value>
        [JsonPropertyName("title")]
        public string Title { get; set; }

        /// <summary>
        /// A list of choices that viewers can choose from. The list will contain a minimum of two choices and up to a maximum of five choices.
        /// </summary>
        /// <value>A list of choices that viewers can choose from. The list will contain a minimum of two choices and up to a maximum of five choices.</value>
        [JsonPropertyName("choices")]
        public List<PollChoicesInner> Choices { get; set; }

        /// <summary>
        /// Not used; will be set to **false**.
        /// </summary>
        /// <value>Not used; will be set to **false**.</value>
        [JsonPropertyName("bits_voting_enabled")]
        public bool BitsVotingEnabled { get; set; }

        /// <summary>
        /// Not used; will be set to 0.
        /// </summary>
        /// <value>Not used; will be set to 0.</value>
        [JsonPropertyName("bits_per_vote")]
        public int BitsPerVote { get; set; }

        /// <summary>
        /// A Boolean value that indicates whether viewers may cast additional votes using Channel Points. For information about Channel Points, see [Channel Points Guide](https://help.twitch.tv/s/article/channel-points-guide).
        /// </summary>
        /// <value>A Boolean value that indicates whether viewers may cast additional votes using Channel Points. For information about Channel Points, see [Channel Points Guide](https://help.twitch.tv/s/article/channel-points-guide).</value>
        [JsonPropertyName("channel_points_voting_enabled")]
        public bool ChannelPointsVotingEnabled { get; set; }

        /// <summary>
        /// The number of points the viewer must spend to cast one additional vote.
        /// </summary>
        /// <value>The number of points the viewer must spend to cast one additional vote.</value>
        [JsonPropertyName("channel_points_per_vote")]
        public int ChannelPointsPerVote { get; set; }

        /// <summary>
        /// The length of time (in seconds) that the poll will run for.
        /// </summary>
        /// <value>The length of time (in seconds) that the poll will run for.</value>
        [JsonPropertyName("duration")]
        public int Duration { get; set; }

        /// <summary>
        /// The UTC date and time (in RFC3339 format) of when the poll began.
        /// </summary>
        /// <value>The UTC date and time (in RFC3339 format) of when the poll began.</value>
        [JsonPropertyName("started_at")]
        public DateTime StartedAt { get; set; }

        /// <summary>
        /// The UTC date and time (in RFC3339 format) of when the poll ended. If &#x60;status&#x60; is ACTIVE, this field is set to **null**.
        /// </summary>
        /// <value>The UTC date and time (in RFC3339 format) of when the poll ended. If &#x60;status&#x60; is ACTIVE, this field is set to **null**.</value>
        [JsonPropertyName("ended_at")]
        public DateTime? EndedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Poll {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  BroadcasterId: ").Append(BroadcasterId).Append("\n");
            sb.Append("  BroadcasterName: ").Append(BroadcasterName).Append("\n");
            sb.Append("  BroadcasterLogin: ").Append(BroadcasterLogin).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Choices: ").Append(Choices).Append("\n");
            sb.Append("  BitsVotingEnabled: ").Append(BitsVotingEnabled).Append("\n");
            sb.Append("  BitsPerVote: ").Append(BitsPerVote).Append("\n");
            sb.Append("  ChannelPointsVotingEnabled: ").Append(ChannelPointsVotingEnabled).Append("\n");
            sb.Append("  ChannelPointsPerVote: ").Append(ChannelPointsPerVote).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  StartedAt: ").Append(StartedAt).Append("\n");
            sb.Append("  EndedAt: ").Append(EndedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Poll" />
    /// </summary>
    public class PollJsonConverter : JsonConverter<Poll>
    {
        /// <summary>
        /// The format to use to serialize StartedAt
        /// </summary>
        public static string StartedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize EndedAt
        /// </summary>
        public static string EndedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="Poll" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Poll Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> broadcasterId = default;
            Option<string?> broadcasterName = default;
            Option<string?> broadcasterLogin = default;
            Option<string?> title = default;
            Option<List<PollChoicesInner>?> choices = default;
            Option<bool?> bitsVotingEnabled = default;
            Option<int?> bitsPerVote = default;
            Option<bool?> channelPointsVotingEnabled = default;
            Option<int?> channelPointsPerVote = default;
            Option<Poll.StatusEnum?> status = default;
            Option<int?> duration = default;
            Option<DateTime?> startedAt = default;
            Option<DateTime?> endedAt = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "broadcaster_id":
                            broadcasterId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "broadcaster_name":
                            broadcasterName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "broadcaster_login":
                            broadcasterLogin = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "choices":
                            choices = new Option<List<PollChoicesInner>?>(JsonSerializer.Deserialize<List<PollChoicesInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "bits_voting_enabled":
                            bitsVotingEnabled = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "bits_per_vote":
                            bitsPerVote = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "channel_points_voting_enabled":
                            channelPointsVotingEnabled = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "channel_points_per_vote":
                            channelPointsPerVote = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "status":
                            string? statusRawValue = utf8JsonReader.GetString();
                            if (statusRawValue != null)
                                status = new Option<Poll.StatusEnum?>(Poll.StatusEnumFromStringOrDefault(statusRawValue));
                            break;
                        case "duration":
                            duration = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "started_at":
                            startedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "ended_at":
                            endedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class Poll.", nameof(id));

            if (!broadcasterId.IsSet)
                throw new ArgumentException("Property is required for class Poll.", nameof(broadcasterId));

            if (!broadcasterName.IsSet)
                throw new ArgumentException("Property is required for class Poll.", nameof(broadcasterName));

            if (!broadcasterLogin.IsSet)
                throw new ArgumentException("Property is required for class Poll.", nameof(broadcasterLogin));

            if (!title.IsSet)
                throw new ArgumentException("Property is required for class Poll.", nameof(title));

            if (!choices.IsSet)
                throw new ArgumentException("Property is required for class Poll.", nameof(choices));

            if (!bitsVotingEnabled.IsSet)
                throw new ArgumentException("Property is required for class Poll.", nameof(bitsVotingEnabled));

            if (!bitsPerVote.IsSet)
                throw new ArgumentException("Property is required for class Poll.", nameof(bitsPerVote));

            if (!channelPointsVotingEnabled.IsSet)
                throw new ArgumentException("Property is required for class Poll.", nameof(channelPointsVotingEnabled));

            if (!channelPointsPerVote.IsSet)
                throw new ArgumentException("Property is required for class Poll.", nameof(channelPointsPerVote));

            if (!status.IsSet)
                throw new ArgumentException("Property is required for class Poll.", nameof(status));

            if (!duration.IsSet)
                throw new ArgumentException("Property is required for class Poll.", nameof(duration));

            if (!startedAt.IsSet)
                throw new ArgumentException("Property is required for class Poll.", nameof(startedAt));

            if (!endedAt.IsSet)
                throw new ArgumentException("Property is required for class Poll.", nameof(endedAt));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class Poll.");

            if (broadcasterId.IsSet && broadcasterId.Value == null)
                throw new ArgumentNullException(nameof(broadcasterId), "Property is not nullable for class Poll.");

            if (broadcasterName.IsSet && broadcasterName.Value == null)
                throw new ArgumentNullException(nameof(broadcasterName), "Property is not nullable for class Poll.");

            if (broadcasterLogin.IsSet && broadcasterLogin.Value == null)
                throw new ArgumentNullException(nameof(broadcasterLogin), "Property is not nullable for class Poll.");

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class Poll.");

            if (choices.IsSet && choices.Value == null)
                throw new ArgumentNullException(nameof(choices), "Property is not nullable for class Poll.");

            if (bitsVotingEnabled.IsSet && bitsVotingEnabled.Value == null)
                throw new ArgumentNullException(nameof(bitsVotingEnabled), "Property is not nullable for class Poll.");

            if (bitsPerVote.IsSet && bitsPerVote.Value == null)
                throw new ArgumentNullException(nameof(bitsPerVote), "Property is not nullable for class Poll.");

            if (channelPointsVotingEnabled.IsSet && channelPointsVotingEnabled.Value == null)
                throw new ArgumentNullException(nameof(channelPointsVotingEnabled), "Property is not nullable for class Poll.");

            if (channelPointsPerVote.IsSet && channelPointsPerVote.Value == null)
                throw new ArgumentNullException(nameof(channelPointsPerVote), "Property is not nullable for class Poll.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class Poll.");

            if (duration.IsSet && duration.Value == null)
                throw new ArgumentNullException(nameof(duration), "Property is not nullable for class Poll.");

            if (startedAt.IsSet && startedAt.Value == null)
                throw new ArgumentNullException(nameof(startedAt), "Property is not nullable for class Poll.");

            return new Poll(id.Value!, broadcasterId.Value!, broadcasterName.Value!, broadcasterLogin.Value!, title.Value!, choices.Value!, bitsVotingEnabled.Value!.Value!, bitsPerVote.Value!.Value!, channelPointsVotingEnabled.Value!.Value!, channelPointsPerVote.Value!.Value!, status.Value!.Value!, duration.Value!.Value!, startedAt.Value!.Value!, endedAt.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="Poll" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="poll"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Poll poll, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, poll, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Poll" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="poll"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Poll poll, JsonSerializerOptions jsonSerializerOptions)
        {
            if (poll.Id == null)
                throw new ArgumentNullException(nameof(poll.Id), "Property is required for class Poll.");

            if (poll.BroadcasterId == null)
                throw new ArgumentNullException(nameof(poll.BroadcasterId), "Property is required for class Poll.");

            if (poll.BroadcasterName == null)
                throw new ArgumentNullException(nameof(poll.BroadcasterName), "Property is required for class Poll.");

            if (poll.BroadcasterLogin == null)
                throw new ArgumentNullException(nameof(poll.BroadcasterLogin), "Property is required for class Poll.");

            if (poll.Title == null)
                throw new ArgumentNullException(nameof(poll.Title), "Property is required for class Poll.");

            if (poll.Choices == null)
                throw new ArgumentNullException(nameof(poll.Choices), "Property is required for class Poll.");

            writer.WriteString("id", poll.Id);

            writer.WriteString("broadcaster_id", poll.BroadcasterId);

            writer.WriteString("broadcaster_name", poll.BroadcasterName);

            writer.WriteString("broadcaster_login", poll.BroadcasterLogin);

            writer.WriteString("title", poll.Title);

            writer.WritePropertyName("choices");
            JsonSerializer.Serialize(writer, poll.Choices, jsonSerializerOptions);
            writer.WriteBoolean("bits_voting_enabled", poll.BitsVotingEnabled);

            writer.WriteNumber("bits_per_vote", poll.BitsPerVote);

            writer.WriteBoolean("channel_points_voting_enabled", poll.ChannelPointsVotingEnabled);

            writer.WriteNumber("channel_points_per_vote", poll.ChannelPointsPerVote);

            var statusRawValue = Poll.StatusEnumToJsonValue(poll.Status);
            writer.WriteString("status", statusRawValue);
            writer.WriteNumber("duration", poll.Duration);

            writer.WriteString("started_at", poll.StartedAt.ToString(StartedAtFormat));

            if (poll.EndedAt != null)
                writer.WriteString("ended_at", poll.EndedAt.Value.ToString(EndedAtFormat));
            else
                writer.WriteNull("ended_at");
        }
    }
}

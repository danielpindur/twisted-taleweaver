// <auto-generated>
/*
 * Twitch API Swagger UI (Unofficial)
 *
 * Unofficial Swagger UI for Twitch API.  All endpoints are generated automatically from the [twitch docs](https://dev.twitch.tv/docs/api/reference) page.  __Features:__  * Swagger UI for all Twitch API endpoints * Schemas for _Request Query Parameters_, _Request Body_, _Response Body_ * Some additional schemas like _Clip_, _ChatBadge_, _Prediction_, _Game_, _Channel_, _Video_ etc. * Response codes and examples * Generated types for TypeScript: [ts-twitch-api](https://github.com/DmitryScaletta/ts-twitch-api)  __Repository:__ [github.com/DmitryScaletta/twitch-api-swagger](https://github.com/DmitryScaletta/twitch-api-swagger)
 *
 * The version of the OpenAPI document: helix
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using TwistedTaleweaver.Integration.Twitch.Helix.Client;

namespace TwistedTaleweaver.Integration.Twitch.Helix.Model
{
    /// <summary>
    /// GetEventSubSubscriptionsResponse
    /// </summary>
    public partial class GetEventSubSubscriptionsResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetEventSubSubscriptionsResponse" /> class.
        /// </summary>
        /// <param name="data">The list of subscriptions. The list is ordered by the oldest subscription first. The list is empty if the client hasn&#39;t created subscriptions or there are no subscriptions that match the specified filter criteria.</param>
        /// <param name="total">The total number of subscriptions that you&#39;ve created.</param>
        /// <param name="totalCost">The sum of all of your subscription costs. [Learn More](https://dev.twitch.tv/docs/eventsub/manage-subscriptions/#subscription-limits)</param>
        /// <param name="maxTotalCost">The maximum total cost that you&#39;re allowed to incur for all subscriptions that you create.</param>
        /// <param name="pagination">pagination</param>
        [JsonConstructor]
        public GetEventSubSubscriptionsResponse(List<EventSubSubscription> data, int total, int totalCost, int maxTotalCost, Option<GetEventSubSubscriptionsResponsePagination?> pagination = default)
        {
            Data = data;
            Total = total;
            TotalCost = totalCost;
            MaxTotalCost = maxTotalCost;
            PaginationOption = pagination;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The list of subscriptions. The list is ordered by the oldest subscription first. The list is empty if the client hasn&#39;t created subscriptions or there are no subscriptions that match the specified filter criteria.
        /// </summary>
        /// <value>The list of subscriptions. The list is ordered by the oldest subscription first. The list is empty if the client hasn&#39;t created subscriptions or there are no subscriptions that match the specified filter criteria.</value>
        [JsonPropertyName("data")]
        public List<EventSubSubscription> Data { get; set; }

        /// <summary>
        /// The total number of subscriptions that you&#39;ve created.
        /// </summary>
        /// <value>The total number of subscriptions that you&#39;ve created.</value>
        [JsonPropertyName("total")]
        public int Total { get; set; }

        /// <summary>
        /// The sum of all of your subscription costs. [Learn More](https://dev.twitch.tv/docs/eventsub/manage-subscriptions/#subscription-limits)
        /// </summary>
        /// <value>The sum of all of your subscription costs. [Learn More](https://dev.twitch.tv/docs/eventsub/manage-subscriptions/#subscription-limits)</value>
        [JsonPropertyName("total_cost")]
        public int TotalCost { get; set; }

        /// <summary>
        /// The maximum total cost that you&#39;re allowed to incur for all subscriptions that you create.
        /// </summary>
        /// <value>The maximum total cost that you&#39;re allowed to incur for all subscriptions that you create.</value>
        [JsonPropertyName("max_total_cost")]
        public int MaxTotalCost { get; set; }

        /// <summary>
        /// Used to track the state of Pagination
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<GetEventSubSubscriptionsResponsePagination?> PaginationOption { get; private set; }

        /// <summary>
        /// Gets or Sets Pagination
        /// </summary>
        [JsonPropertyName("pagination")]
        public GetEventSubSubscriptionsResponsePagination? Pagination { get { return this.PaginationOption; } set { this.PaginationOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetEventSubSubscriptionsResponse {\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  TotalCost: ").Append(TotalCost).Append("\n");
            sb.Append("  MaxTotalCost: ").Append(MaxTotalCost).Append("\n");
            sb.Append("  Pagination: ").Append(Pagination).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetEventSubSubscriptionsResponse" />
    /// </summary>
    public class GetEventSubSubscriptionsResponseJsonConverter : JsonConverter<GetEventSubSubscriptionsResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetEventSubSubscriptionsResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetEventSubSubscriptionsResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<EventSubSubscription>?> data = default;
            Option<int?> total = default;
            Option<int?> totalCost = default;
            Option<int?> maxTotalCost = default;
            Option<GetEventSubSubscriptionsResponsePagination?> pagination = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "data":
                            data = new Option<List<EventSubSubscription>?>(JsonSerializer.Deserialize<List<EventSubSubscription>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "total":
                            total = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "total_cost":
                            totalCost = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "max_total_cost":
                            maxTotalCost = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "pagination":
                            pagination = new Option<GetEventSubSubscriptionsResponsePagination?>(JsonSerializer.Deserialize<GetEventSubSubscriptionsResponsePagination>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!data.IsSet)
                throw new ArgumentException("Property is required for class GetEventSubSubscriptionsResponse.", nameof(data));

            if (!total.IsSet)
                throw new ArgumentException("Property is required for class GetEventSubSubscriptionsResponse.", nameof(total));

            if (!totalCost.IsSet)
                throw new ArgumentException("Property is required for class GetEventSubSubscriptionsResponse.", nameof(totalCost));

            if (!maxTotalCost.IsSet)
                throw new ArgumentException("Property is required for class GetEventSubSubscriptionsResponse.", nameof(maxTotalCost));

            if (data.IsSet && data.Value == null)
                throw new ArgumentNullException(nameof(data), "Property is not nullable for class GetEventSubSubscriptionsResponse.");

            if (total.IsSet && total.Value == null)
                throw new ArgumentNullException(nameof(total), "Property is not nullable for class GetEventSubSubscriptionsResponse.");

            if (totalCost.IsSet && totalCost.Value == null)
                throw new ArgumentNullException(nameof(totalCost), "Property is not nullable for class GetEventSubSubscriptionsResponse.");

            if (maxTotalCost.IsSet && maxTotalCost.Value == null)
                throw new ArgumentNullException(nameof(maxTotalCost), "Property is not nullable for class GetEventSubSubscriptionsResponse.");

            if (pagination.IsSet && pagination.Value == null)
                throw new ArgumentNullException(nameof(pagination), "Property is not nullable for class GetEventSubSubscriptionsResponse.");

            return new GetEventSubSubscriptionsResponse(data.Value!, total.Value!.Value!, totalCost.Value!.Value!, maxTotalCost.Value!.Value!, pagination);
        }

        /// <summary>
        /// Serializes a <see cref="GetEventSubSubscriptionsResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getEventSubSubscriptionsResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetEventSubSubscriptionsResponse getEventSubSubscriptionsResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getEventSubSubscriptionsResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetEventSubSubscriptionsResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getEventSubSubscriptionsResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetEventSubSubscriptionsResponse getEventSubSubscriptionsResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getEventSubSubscriptionsResponse.Data == null)
                throw new ArgumentNullException(nameof(getEventSubSubscriptionsResponse.Data), "Property is required for class GetEventSubSubscriptionsResponse.");

            if (getEventSubSubscriptionsResponse.PaginationOption.IsSet && getEventSubSubscriptionsResponse.Pagination == null)
                throw new ArgumentNullException(nameof(getEventSubSubscriptionsResponse.Pagination), "Property is required for class GetEventSubSubscriptionsResponse.");

            writer.WritePropertyName("data");
            JsonSerializer.Serialize(writer, getEventSubSubscriptionsResponse.Data, jsonSerializerOptions);
            writer.WriteNumber("total", getEventSubSubscriptionsResponse.Total);

            writer.WriteNumber("total_cost", getEventSubSubscriptionsResponse.TotalCost);

            writer.WriteNumber("max_total_cost", getEventSubSubscriptionsResponse.MaxTotalCost);

            if (getEventSubSubscriptionsResponse.PaginationOption.IsSet)
            {
                writer.WritePropertyName("pagination");
                JsonSerializer.Serialize(writer, getEventSubSubscriptionsResponse.Pagination, jsonSerializerOptions);
            }
        }
    }
}

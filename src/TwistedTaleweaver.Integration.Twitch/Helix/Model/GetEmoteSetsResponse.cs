// <auto-generated>
/*
 * Twitch API Swagger UI (Unofficial)
 *
 * Unofficial Swagger UI for Twitch API.  All endpoints are generated automatically from the [twitch docs](https://dev.twitch.tv/docs/api/reference) page.  __Features:__  * Swagger UI for all Twitch API endpoints * Schemas for _Request Query Parameters_, _Request Body_, _Response Body_ * Some additional schemas like _Clip_, _ChatBadge_, _Prediction_, _Game_, _Channel_, _Video_ etc. * Response codes and examples * Generated types for TypeScript: [ts-twitch-api](https://github.com/DmitryScaletta/ts-twitch-api)  __Repository:__ [github.com/DmitryScaletta/twitch-api-swagger](https://github.com/DmitryScaletta/twitch-api-swagger)
 *
 * The version of the OpenAPI document: helix
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using TwistedTaleweaver.Integration.Twitch.Helix.Client;

namespace TwistedTaleweaver.Integration.Twitch.Helix.Model
{
    /// <summary>
    /// GetEmoteSetsResponse
    /// </summary>
    public partial class GetEmoteSetsResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetEmoteSetsResponse" /> class.
        /// </summary>
        /// <param name="data">The list of emotes found in the specified emote sets. The list is empty if none of the IDs were found. The list is in the same order as the set IDs specified in the request. Each set contains one or more emoticons.</param>
        /// <param name="template">A templated URL. Use the values from the &#x60;id&#x60;, &#x60;format&#x60;, &#x60;scale&#x60;, and &#x60;theme_mode&#x60; fields to replace the like-named placeholder strings in the templated URL to create a CDN (content delivery network) URL that you use to fetch the emote. For information about what the template looks like and how to use it to fetch emotes, see [Emote CDN URL format](https://dev.twitch.tv/docs/irc/emotes#cdn-template). You should use this template instead of using the URLs in the &#x60;images&#x60; object.</param>
        [JsonConstructor]
        public GetEmoteSetsResponse(List<Emote> data, string template)
        {
            Data = data;
            Template = template;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The list of emotes found in the specified emote sets. The list is empty if none of the IDs were found. The list is in the same order as the set IDs specified in the request. Each set contains one or more emoticons.
        /// </summary>
        /// <value>The list of emotes found in the specified emote sets. The list is empty if none of the IDs were found. The list is in the same order as the set IDs specified in the request. Each set contains one or more emoticons.</value>
        [JsonPropertyName("data")]
        public List<Emote> Data { get; set; }

        /// <summary>
        /// A templated URL. Use the values from the &#x60;id&#x60;, &#x60;format&#x60;, &#x60;scale&#x60;, and &#x60;theme_mode&#x60; fields to replace the like-named placeholder strings in the templated URL to create a CDN (content delivery network) URL that you use to fetch the emote. For information about what the template looks like and how to use it to fetch emotes, see [Emote CDN URL format](https://dev.twitch.tv/docs/irc/emotes#cdn-template). You should use this template instead of using the URLs in the &#x60;images&#x60; object.
        /// </summary>
        /// <value>A templated URL. Use the values from the &#x60;id&#x60;, &#x60;format&#x60;, &#x60;scale&#x60;, and &#x60;theme_mode&#x60; fields to replace the like-named placeholder strings in the templated URL to create a CDN (content delivery network) URL that you use to fetch the emote. For information about what the template looks like and how to use it to fetch emotes, see [Emote CDN URL format](https://dev.twitch.tv/docs/irc/emotes#cdn-template). You should use this template instead of using the URLs in the &#x60;images&#x60; object.</value>
        [JsonPropertyName("template")]
        public string Template { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetEmoteSetsResponse {\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Template: ").Append(Template).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetEmoteSetsResponse" />
    /// </summary>
    public class GetEmoteSetsResponseJsonConverter : JsonConverter<GetEmoteSetsResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetEmoteSetsResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetEmoteSetsResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<Emote>?> data = default;
            Option<string?> template = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "data":
                            data = new Option<List<Emote>?>(JsonSerializer.Deserialize<List<Emote>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "template":
                            template = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!data.IsSet)
                throw new ArgumentException("Property is required for class GetEmoteSetsResponse.", nameof(data));

            if (!template.IsSet)
                throw new ArgumentException("Property is required for class GetEmoteSetsResponse.", nameof(template));

            if (data.IsSet && data.Value == null)
                throw new ArgumentNullException(nameof(data), "Property is not nullable for class GetEmoteSetsResponse.");

            if (template.IsSet && template.Value == null)
                throw new ArgumentNullException(nameof(template), "Property is not nullable for class GetEmoteSetsResponse.");

            return new GetEmoteSetsResponse(data.Value!, template.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="GetEmoteSetsResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getEmoteSetsResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetEmoteSetsResponse getEmoteSetsResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getEmoteSetsResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetEmoteSetsResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getEmoteSetsResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetEmoteSetsResponse getEmoteSetsResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getEmoteSetsResponse.Data == null)
                throw new ArgumentNullException(nameof(getEmoteSetsResponse.Data), "Property is required for class GetEmoteSetsResponse.");

            if (getEmoteSetsResponse.Template == null)
                throw new ArgumentNullException(nameof(getEmoteSetsResponse.Template), "Property is required for class GetEmoteSetsResponse.");

            writer.WritePropertyName("data");
            JsonSerializer.Serialize(writer, getEmoteSetsResponse.Data, jsonSerializerOptions);
            writer.WriteString("template", getEmoteSetsResponse.Template);
        }
    }
}

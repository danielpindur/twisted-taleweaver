// <auto-generated>
/*
 * Twitch API Swagger UI (Unofficial)
 *
 * Unofficial Swagger UI for Twitch API.  All endpoints are generated automatically from the [twitch docs](https://dev.twitch.tv/docs/api/reference) page.  __Features:__  * Swagger UI for all Twitch API endpoints * Schemas for _Request Query Parameters_, _Request Body_, _Response Body_ * Some additional schemas like _Clip_, _ChatBadge_, _Prediction_, _Game_, _Channel_, _Video_ etc. * Response codes and examples * Generated types for TypeScript: [ts-twitch-api](https://github.com/DmitryScaletta/ts-twitch-api)  __Repository:__ [github.com/DmitryScaletta/twitch-api-swagger](https://github.com/DmitryScaletta/twitch-api-swagger)
 *
 * The version of the OpenAPI document: helix
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using TwistedTaleweaver.Integration.Twitch.Helix.Client;

namespace TwistedTaleweaver.Integration.Twitch.Helix.Model
{
    /// <summary>
    /// UserExtensionOverlay
    /// </summary>
    public partial class UserExtensionOverlay : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserExtensionOverlay" /> class.
        /// </summary>
        /// <param name="active">A Boolean value that determines the extension’s activation state. If **false**, the user has not configured an overlay extension.</param>
        /// <param name="id">An ID that identifies the extension.</param>
        /// <param name="varVersion">The extension’s version.</param>
        /// <param name="name">The extension’s name.</param>
        [JsonConstructor]
        public UserExtensionOverlay(bool active, Option<string?> id = default, Option<string?> varVersion = default, Option<string?> name = default)
        {
            Active = active;
            IdOption = id;
            VarVersionOption = varVersion;
            NameOption = name;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// A Boolean value that determines the extension’s activation state. If **false**, the user has not configured an overlay extension.
        /// </summary>
        /// <value>A Boolean value that determines the extension’s activation state. If **false**, the user has not configured an overlay extension.</value>
        [JsonPropertyName("active")]
        public bool Active { get; set; }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// An ID that identifies the extension.
        /// </summary>
        /// <value>An ID that identifies the extension.</value>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of VarVersion
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> VarVersionOption { get; private set; }

        /// <summary>
        /// The extension’s version.
        /// </summary>
        /// <value>The extension’s version.</value>
        [JsonPropertyName("version")]
        public string? VarVersion { get { return this.VarVersionOption; } set { this.VarVersionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// The extension’s name.
        /// </summary>
        /// <value>The extension’s name.</value>
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserExtensionOverlay {\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UserExtensionOverlay" />
    /// </summary>
    public class UserExtensionOverlayJsonConverter : JsonConverter<UserExtensionOverlay>
    {
        /// <summary>
        /// Deserializes json to <see cref="UserExtensionOverlay" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override UserExtensionOverlay Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> active = default;
            Option<string?> id = default;
            Option<string?> varVersion = default;
            Option<string?> name = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "active":
                            active = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "version":
                            varVersion = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!active.IsSet)
                throw new ArgumentException("Property is required for class UserExtensionOverlay.", nameof(active));

            if (active.IsSet && active.Value == null)
                throw new ArgumentNullException(nameof(active), "Property is not nullable for class UserExtensionOverlay.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class UserExtensionOverlay.");

            if (varVersion.IsSet && varVersion.Value == null)
                throw new ArgumentNullException(nameof(varVersion), "Property is not nullable for class UserExtensionOverlay.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class UserExtensionOverlay.");

            return new UserExtensionOverlay(active.Value!.Value!, id, varVersion, name);
        }

        /// <summary>
        /// Serializes a <see cref="UserExtensionOverlay" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="userExtensionOverlay"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, UserExtensionOverlay userExtensionOverlay, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, userExtensionOverlay, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="UserExtensionOverlay" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="userExtensionOverlay"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, UserExtensionOverlay userExtensionOverlay, JsonSerializerOptions jsonSerializerOptions)
        {
            if (userExtensionOverlay.IdOption.IsSet && userExtensionOverlay.Id == null)
                throw new ArgumentNullException(nameof(userExtensionOverlay.Id), "Property is required for class UserExtensionOverlay.");

            if (userExtensionOverlay.VarVersionOption.IsSet && userExtensionOverlay.VarVersion == null)
                throw new ArgumentNullException(nameof(userExtensionOverlay.VarVersion), "Property is required for class UserExtensionOverlay.");

            if (userExtensionOverlay.NameOption.IsSet && userExtensionOverlay.Name == null)
                throw new ArgumentNullException(nameof(userExtensionOverlay.Name), "Property is required for class UserExtensionOverlay.");

            writer.WriteBoolean("active", userExtensionOverlay.Active);

            if (userExtensionOverlay.IdOption.IsSet)
                writer.WriteString("id", userExtensionOverlay.Id);

            if (userExtensionOverlay.VarVersionOption.IsSet)
                writer.WriteString("version", userExtensionOverlay.VarVersion);

            if (userExtensionOverlay.NameOption.IsSet)
                writer.WriteString("name", userExtensionOverlay.Name);
        }
    }
}

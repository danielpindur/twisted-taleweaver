// <auto-generated>
/*
 * Twitch API Swagger UI (Unofficial)
 *
 * Unofficial Swagger UI for Twitch API.  All endpoints are generated automatically from the [twitch docs](https://dev.twitch.tv/docs/api/reference) page.  __Features:__  * Swagger UI for all Twitch API endpoints * Schemas for _Request Query Parameters_, _Request Body_, _Response Body_ * Some additional schemas like _Clip_, _ChatBadge_, _Prediction_, _Game_, _Channel_, _Video_ etc. * Response codes and examples * Generated types for TypeScript: [ts-twitch-api](https://github.com/DmitryScaletta/ts-twitch-api)  __Repository:__ [github.com/DmitryScaletta/twitch-api-swagger](https://github.com/DmitryScaletta/twitch-api-swagger)
 *
 * The version of the OpenAPI document: helix
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using TwistedTaleweaver.Integration.Twitch.Helix.Client;

namespace TwistedTaleweaver.Integration.Twitch.Helix.Model
{
    /// <summary>
    /// CustomReward
    /// </summary>
    public partial class CustomReward : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomReward" /> class.
        /// </summary>
        /// <param name="broadcasterId">The ID that uniquely identifies the broadcaster.</param>
        /// <param name="broadcasterLogin">The broadcaster’s login name.</param>
        /// <param name="broadcasterName">The broadcaster’s display name.</param>
        /// <param name="id">The ID that uniquely identifies this custom reward.</param>
        /// <param name="title">The title of the reward.</param>
        /// <param name="prompt">The prompt shown to the viewer when they redeem the reward if user input is required. See the &#x60;is_user_input_required&#x60; field.</param>
        /// <param name="cost">The cost of the reward in Channel Points.</param>
        /// <param name="image">image</param>
        /// <param name="defaultImage">defaultImage</param>
        /// <param name="backgroundColor">The background color to use for the reward. The color is in Hex format (for example, #00E5CB).</param>
        /// <param name="isEnabled">A Boolean value that determines whether the reward is enabled. Is **true** if enabled; otherwise, **false**. Disabled rewards aren’t shown to the user.</param>
        /// <param name="isUserInputRequired">A Boolean value that determines whether the user must enter information when they redeem the reward. Is **true** if the user is prompted.</param>
        /// <param name="maxPerStreamSetting">maxPerStreamSetting</param>
        /// <param name="maxPerUserPerStreamSetting">maxPerUserPerStreamSetting</param>
        /// <param name="globalCooldownSetting">globalCooldownSetting</param>
        /// <param name="isPaused">A Boolean value that determines whether the reward is currently paused. Is **true** if the reward is paused. Viewers can’t redeem paused rewards.</param>
        /// <param name="isInStock">A Boolean value that determines whether the reward is currently in stock. Is **true** if the reward is in stock. Viewers can’t redeem out of stock rewards.</param>
        /// <param name="shouldRedemptionsSkipRequestQueue">A Boolean value that determines whether redemptions should be set to FULFILLED status immediately when a reward is redeemed. If **false**, status is set to UNFULFILLED and follows the normal request queue process.</param>
        /// <param name="redemptionsRedeemedCurrentStream">The number of redemptions redeemed during the current live stream. The number counts against the &#x60;max_per_stream_setting&#x60; limit. This field is **null** if the broadcaster’s stream isn’t live or _max\\_per\\_stream\\_setting_ isn’t enabled.</param>
        /// <param name="cooldownExpiresAt">The timestamp of when the cooldown period expires. Is **null** if the reward isn’t in a cooldown state. See the &#x60;global_cooldown_setting&#x60; field.</param>
        [JsonConstructor]
        public CustomReward(string broadcasterId, string broadcasterLogin, string broadcasterName, string id, string title, string prompt, long cost, CustomRewardImage image, CustomRewardDefaultImage defaultImage, string backgroundColor, bool isEnabled, bool isUserInputRequired, CustomRewardMaxPerStreamSetting maxPerStreamSetting, CustomRewardMaxPerUserPerStreamSetting maxPerUserPerStreamSetting, CustomRewardGlobalCooldownSetting globalCooldownSetting, bool isPaused, bool isInStock, bool shouldRedemptionsSkipRequestQueue, int? redemptionsRedeemedCurrentStream = default, DateTime? cooldownExpiresAt = default)
        {
            BroadcasterId = broadcasterId;
            BroadcasterLogin = broadcasterLogin;
            BroadcasterName = broadcasterName;
            Id = id;
            Title = title;
            Prompt = prompt;
            Cost = cost;
            Image = image;
            DefaultImage = defaultImage;
            BackgroundColor = backgroundColor;
            IsEnabled = isEnabled;
            IsUserInputRequired = isUserInputRequired;
            MaxPerStreamSetting = maxPerStreamSetting;
            MaxPerUserPerStreamSetting = maxPerUserPerStreamSetting;
            GlobalCooldownSetting = globalCooldownSetting;
            IsPaused = isPaused;
            IsInStock = isInStock;
            ShouldRedemptionsSkipRequestQueue = shouldRedemptionsSkipRequestQueue;
            RedemptionsRedeemedCurrentStream = redemptionsRedeemedCurrentStream;
            CooldownExpiresAt = cooldownExpiresAt;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The ID that uniquely identifies the broadcaster.
        /// </summary>
        /// <value>The ID that uniquely identifies the broadcaster.</value>
        [JsonPropertyName("broadcaster_id")]
        public string BroadcasterId { get; set; }

        /// <summary>
        /// The broadcaster’s login name.
        /// </summary>
        /// <value>The broadcaster’s login name.</value>
        [JsonPropertyName("broadcaster_login")]
        public string BroadcasterLogin { get; set; }

        /// <summary>
        /// The broadcaster’s display name.
        /// </summary>
        /// <value>The broadcaster’s display name.</value>
        [JsonPropertyName("broadcaster_name")]
        public string BroadcasterName { get; set; }

        /// <summary>
        /// The ID that uniquely identifies this custom reward.
        /// </summary>
        /// <value>The ID that uniquely identifies this custom reward.</value>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// The title of the reward.
        /// </summary>
        /// <value>The title of the reward.</value>
        [JsonPropertyName("title")]
        public string Title { get; set; }

        /// <summary>
        /// The prompt shown to the viewer when they redeem the reward if user input is required. See the &#x60;is_user_input_required&#x60; field.
        /// </summary>
        /// <value>The prompt shown to the viewer when they redeem the reward if user input is required. See the &#x60;is_user_input_required&#x60; field.</value>
        [JsonPropertyName("prompt")]
        public string Prompt { get; set; }

        /// <summary>
        /// The cost of the reward in Channel Points.
        /// </summary>
        /// <value>The cost of the reward in Channel Points.</value>
        [JsonPropertyName("cost")]
        public long Cost { get; set; }

        /// <summary>
        /// Gets or Sets Image
        /// </summary>
        [JsonPropertyName("image")]
        public CustomRewardImage Image { get; set; }

        /// <summary>
        /// Gets or Sets DefaultImage
        /// </summary>
        [JsonPropertyName("default_image")]
        public CustomRewardDefaultImage DefaultImage { get; set; }

        /// <summary>
        /// The background color to use for the reward. The color is in Hex format (for example, #00E5CB).
        /// </summary>
        /// <value>The background color to use for the reward. The color is in Hex format (for example, #00E5CB).</value>
        [JsonPropertyName("background_color")]
        public string BackgroundColor { get; set; }

        /// <summary>
        /// A Boolean value that determines whether the reward is enabled. Is **true** if enabled; otherwise, **false**. Disabled rewards aren’t shown to the user.
        /// </summary>
        /// <value>A Boolean value that determines whether the reward is enabled. Is **true** if enabled; otherwise, **false**. Disabled rewards aren’t shown to the user.</value>
        [JsonPropertyName("is_enabled")]
        public bool IsEnabled { get; set; }

        /// <summary>
        /// A Boolean value that determines whether the user must enter information when they redeem the reward. Is **true** if the user is prompted.
        /// </summary>
        /// <value>A Boolean value that determines whether the user must enter information when they redeem the reward. Is **true** if the user is prompted.</value>
        [JsonPropertyName("is_user_input_required")]
        public bool IsUserInputRequired { get; set; }

        /// <summary>
        /// Gets or Sets MaxPerStreamSetting
        /// </summary>
        [JsonPropertyName("max_per_stream_setting")]
        public CustomRewardMaxPerStreamSetting MaxPerStreamSetting { get; set; }

        /// <summary>
        /// Gets or Sets MaxPerUserPerStreamSetting
        /// </summary>
        [JsonPropertyName("max_per_user_per_stream_setting")]
        public CustomRewardMaxPerUserPerStreamSetting MaxPerUserPerStreamSetting { get; set; }

        /// <summary>
        /// Gets or Sets GlobalCooldownSetting
        /// </summary>
        [JsonPropertyName("global_cooldown_setting")]
        public CustomRewardGlobalCooldownSetting GlobalCooldownSetting { get; set; }

        /// <summary>
        /// A Boolean value that determines whether the reward is currently paused. Is **true** if the reward is paused. Viewers can’t redeem paused rewards.
        /// </summary>
        /// <value>A Boolean value that determines whether the reward is currently paused. Is **true** if the reward is paused. Viewers can’t redeem paused rewards.</value>
        [JsonPropertyName("is_paused")]
        public bool IsPaused { get; set; }

        /// <summary>
        /// A Boolean value that determines whether the reward is currently in stock. Is **true** if the reward is in stock. Viewers can’t redeem out of stock rewards.
        /// </summary>
        /// <value>A Boolean value that determines whether the reward is currently in stock. Is **true** if the reward is in stock. Viewers can’t redeem out of stock rewards.</value>
        [JsonPropertyName("is_in_stock")]
        public bool IsInStock { get; set; }

        /// <summary>
        /// A Boolean value that determines whether redemptions should be set to FULFILLED status immediately when a reward is redeemed. If **false**, status is set to UNFULFILLED and follows the normal request queue process.
        /// </summary>
        /// <value>A Boolean value that determines whether redemptions should be set to FULFILLED status immediately when a reward is redeemed. If **false**, status is set to UNFULFILLED and follows the normal request queue process.</value>
        [JsonPropertyName("should_redemptions_skip_request_queue")]
        public bool ShouldRedemptionsSkipRequestQueue { get; set; }

        /// <summary>
        /// The number of redemptions redeemed during the current live stream. The number counts against the &#x60;max_per_stream_setting&#x60; limit. This field is **null** if the broadcaster’s stream isn’t live or _max\\_per\\_stream\\_setting_ isn’t enabled.
        /// </summary>
        /// <value>The number of redemptions redeemed during the current live stream. The number counts against the &#x60;max_per_stream_setting&#x60; limit. This field is **null** if the broadcaster’s stream isn’t live or _max\\_per\\_stream\\_setting_ isn’t enabled.</value>
        [JsonPropertyName("redemptions_redeemed_current_stream")]
        public int? RedemptionsRedeemedCurrentStream { get; set; }

        /// <summary>
        /// The timestamp of when the cooldown period expires. Is **null** if the reward isn’t in a cooldown state. See the &#x60;global_cooldown_setting&#x60; field.
        /// </summary>
        /// <value>The timestamp of when the cooldown period expires. Is **null** if the reward isn’t in a cooldown state. See the &#x60;global_cooldown_setting&#x60; field.</value>
        [JsonPropertyName("cooldown_expires_at")]
        public DateTime? CooldownExpiresAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomReward {\n");
            sb.Append("  BroadcasterId: ").Append(BroadcasterId).Append("\n");
            sb.Append("  BroadcasterLogin: ").Append(BroadcasterLogin).Append("\n");
            sb.Append("  BroadcasterName: ").Append(BroadcasterName).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Prompt: ").Append(Prompt).Append("\n");
            sb.Append("  Cost: ").Append(Cost).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  DefaultImage: ").Append(DefaultImage).Append("\n");
            sb.Append("  BackgroundColor: ").Append(BackgroundColor).Append("\n");
            sb.Append("  IsEnabled: ").Append(IsEnabled).Append("\n");
            sb.Append("  IsUserInputRequired: ").Append(IsUserInputRequired).Append("\n");
            sb.Append("  MaxPerStreamSetting: ").Append(MaxPerStreamSetting).Append("\n");
            sb.Append("  MaxPerUserPerStreamSetting: ").Append(MaxPerUserPerStreamSetting).Append("\n");
            sb.Append("  GlobalCooldownSetting: ").Append(GlobalCooldownSetting).Append("\n");
            sb.Append("  IsPaused: ").Append(IsPaused).Append("\n");
            sb.Append("  IsInStock: ").Append(IsInStock).Append("\n");
            sb.Append("  ShouldRedemptionsSkipRequestQueue: ").Append(ShouldRedemptionsSkipRequestQueue).Append("\n");
            sb.Append("  RedemptionsRedeemedCurrentStream: ").Append(RedemptionsRedeemedCurrentStream).Append("\n");
            sb.Append("  CooldownExpiresAt: ").Append(CooldownExpiresAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CustomReward" />
    /// </summary>
    public class CustomRewardJsonConverter : JsonConverter<CustomReward>
    {
        /// <summary>
        /// The format to use to serialize CooldownExpiresAt
        /// </summary>
        public static string CooldownExpiresAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="CustomReward" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CustomReward Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> broadcasterId = default;
            Option<string?> broadcasterLogin = default;
            Option<string?> broadcasterName = default;
            Option<string?> id = default;
            Option<string?> title = default;
            Option<string?> prompt = default;
            Option<long?> cost = default;
            Option<CustomRewardImage?> image = default;
            Option<CustomRewardDefaultImage?> defaultImage = default;
            Option<string?> backgroundColor = default;
            Option<bool?> isEnabled = default;
            Option<bool?> isUserInputRequired = default;
            Option<CustomRewardMaxPerStreamSetting?> maxPerStreamSetting = default;
            Option<CustomRewardMaxPerUserPerStreamSetting?> maxPerUserPerStreamSetting = default;
            Option<CustomRewardGlobalCooldownSetting?> globalCooldownSetting = default;
            Option<bool?> isPaused = default;
            Option<bool?> isInStock = default;
            Option<bool?> shouldRedemptionsSkipRequestQueue = default;
            Option<int?> redemptionsRedeemedCurrentStream = default;
            Option<DateTime?> cooldownExpiresAt = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "broadcaster_id":
                            broadcasterId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "broadcaster_login":
                            broadcasterLogin = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "broadcaster_name":
                            broadcasterName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "prompt":
                            prompt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "cost":
                            cost = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "image":
                            image = new Option<CustomRewardImage?>(JsonSerializer.Deserialize<CustomRewardImage>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "default_image":
                            defaultImage = new Option<CustomRewardDefaultImage?>(JsonSerializer.Deserialize<CustomRewardDefaultImage>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "background_color":
                            backgroundColor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "is_enabled":
                            isEnabled = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_user_input_required":
                            isUserInputRequired = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "max_per_stream_setting":
                            maxPerStreamSetting = new Option<CustomRewardMaxPerStreamSetting?>(JsonSerializer.Deserialize<CustomRewardMaxPerStreamSetting>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "max_per_user_per_stream_setting":
                            maxPerUserPerStreamSetting = new Option<CustomRewardMaxPerUserPerStreamSetting?>(JsonSerializer.Deserialize<CustomRewardMaxPerUserPerStreamSetting>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "global_cooldown_setting":
                            globalCooldownSetting = new Option<CustomRewardGlobalCooldownSetting?>(JsonSerializer.Deserialize<CustomRewardGlobalCooldownSetting>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "is_paused":
                            isPaused = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_in_stock":
                            isInStock = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "should_redemptions_skip_request_queue":
                            shouldRedemptionsSkipRequestQueue = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "redemptions_redeemed_current_stream":
                            redemptionsRedeemedCurrentStream = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "cooldown_expires_at":
                            cooldownExpiresAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!broadcasterId.IsSet)
                throw new ArgumentException("Property is required for class CustomReward.", nameof(broadcasterId));

            if (!broadcasterLogin.IsSet)
                throw new ArgumentException("Property is required for class CustomReward.", nameof(broadcasterLogin));

            if (!broadcasterName.IsSet)
                throw new ArgumentException("Property is required for class CustomReward.", nameof(broadcasterName));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class CustomReward.", nameof(id));

            if (!title.IsSet)
                throw new ArgumentException("Property is required for class CustomReward.", nameof(title));

            if (!prompt.IsSet)
                throw new ArgumentException("Property is required for class CustomReward.", nameof(prompt));

            if (!cost.IsSet)
                throw new ArgumentException("Property is required for class CustomReward.", nameof(cost));

            if (!image.IsSet)
                throw new ArgumentException("Property is required for class CustomReward.", nameof(image));

            if (!defaultImage.IsSet)
                throw new ArgumentException("Property is required for class CustomReward.", nameof(defaultImage));

            if (!backgroundColor.IsSet)
                throw new ArgumentException("Property is required for class CustomReward.", nameof(backgroundColor));

            if (!isEnabled.IsSet)
                throw new ArgumentException("Property is required for class CustomReward.", nameof(isEnabled));

            if (!isUserInputRequired.IsSet)
                throw new ArgumentException("Property is required for class CustomReward.", nameof(isUserInputRequired));

            if (!maxPerStreamSetting.IsSet)
                throw new ArgumentException("Property is required for class CustomReward.", nameof(maxPerStreamSetting));

            if (!maxPerUserPerStreamSetting.IsSet)
                throw new ArgumentException("Property is required for class CustomReward.", nameof(maxPerUserPerStreamSetting));

            if (!globalCooldownSetting.IsSet)
                throw new ArgumentException("Property is required for class CustomReward.", nameof(globalCooldownSetting));

            if (!isPaused.IsSet)
                throw new ArgumentException("Property is required for class CustomReward.", nameof(isPaused));

            if (!isInStock.IsSet)
                throw new ArgumentException("Property is required for class CustomReward.", nameof(isInStock));

            if (!shouldRedemptionsSkipRequestQueue.IsSet)
                throw new ArgumentException("Property is required for class CustomReward.", nameof(shouldRedemptionsSkipRequestQueue));

            if (!redemptionsRedeemedCurrentStream.IsSet)
                throw new ArgumentException("Property is required for class CustomReward.", nameof(redemptionsRedeemedCurrentStream));

            if (!cooldownExpiresAt.IsSet)
                throw new ArgumentException("Property is required for class CustomReward.", nameof(cooldownExpiresAt));

            if (broadcasterId.IsSet && broadcasterId.Value == null)
                throw new ArgumentNullException(nameof(broadcasterId), "Property is not nullable for class CustomReward.");

            if (broadcasterLogin.IsSet && broadcasterLogin.Value == null)
                throw new ArgumentNullException(nameof(broadcasterLogin), "Property is not nullable for class CustomReward.");

            if (broadcasterName.IsSet && broadcasterName.Value == null)
                throw new ArgumentNullException(nameof(broadcasterName), "Property is not nullable for class CustomReward.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class CustomReward.");

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class CustomReward.");

            if (prompt.IsSet && prompt.Value == null)
                throw new ArgumentNullException(nameof(prompt), "Property is not nullable for class CustomReward.");

            if (cost.IsSet && cost.Value == null)
                throw new ArgumentNullException(nameof(cost), "Property is not nullable for class CustomReward.");

            if (image.IsSet && image.Value == null)
                throw new ArgumentNullException(nameof(image), "Property is not nullable for class CustomReward.");

            if (defaultImage.IsSet && defaultImage.Value == null)
                throw new ArgumentNullException(nameof(defaultImage), "Property is not nullable for class CustomReward.");

            if (backgroundColor.IsSet && backgroundColor.Value == null)
                throw new ArgumentNullException(nameof(backgroundColor), "Property is not nullable for class CustomReward.");

            if (isEnabled.IsSet && isEnabled.Value == null)
                throw new ArgumentNullException(nameof(isEnabled), "Property is not nullable for class CustomReward.");

            if (isUserInputRequired.IsSet && isUserInputRequired.Value == null)
                throw new ArgumentNullException(nameof(isUserInputRequired), "Property is not nullable for class CustomReward.");

            if (maxPerStreamSetting.IsSet && maxPerStreamSetting.Value == null)
                throw new ArgumentNullException(nameof(maxPerStreamSetting), "Property is not nullable for class CustomReward.");

            if (maxPerUserPerStreamSetting.IsSet && maxPerUserPerStreamSetting.Value == null)
                throw new ArgumentNullException(nameof(maxPerUserPerStreamSetting), "Property is not nullable for class CustomReward.");

            if (globalCooldownSetting.IsSet && globalCooldownSetting.Value == null)
                throw new ArgumentNullException(nameof(globalCooldownSetting), "Property is not nullable for class CustomReward.");

            if (isPaused.IsSet && isPaused.Value == null)
                throw new ArgumentNullException(nameof(isPaused), "Property is not nullable for class CustomReward.");

            if (isInStock.IsSet && isInStock.Value == null)
                throw new ArgumentNullException(nameof(isInStock), "Property is not nullable for class CustomReward.");

            if (shouldRedemptionsSkipRequestQueue.IsSet && shouldRedemptionsSkipRequestQueue.Value == null)
                throw new ArgumentNullException(nameof(shouldRedemptionsSkipRequestQueue), "Property is not nullable for class CustomReward.");

            return new CustomReward(broadcasterId.Value!, broadcasterLogin.Value!, broadcasterName.Value!, id.Value!, title.Value!, prompt.Value!, cost.Value!.Value!, image.Value!, defaultImage.Value!, backgroundColor.Value!, isEnabled.Value!.Value!, isUserInputRequired.Value!.Value!, maxPerStreamSetting.Value!, maxPerUserPerStreamSetting.Value!, globalCooldownSetting.Value!, isPaused.Value!.Value!, isInStock.Value!.Value!, shouldRedemptionsSkipRequestQueue.Value!.Value!, redemptionsRedeemedCurrentStream.Value!, cooldownExpiresAt.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="CustomReward" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="customReward"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CustomReward customReward, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, customReward, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CustomReward" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="customReward"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CustomReward customReward, JsonSerializerOptions jsonSerializerOptions)
        {
            if (customReward.BroadcasterId == null)
                throw new ArgumentNullException(nameof(customReward.BroadcasterId), "Property is required for class CustomReward.");

            if (customReward.BroadcasterLogin == null)
                throw new ArgumentNullException(nameof(customReward.BroadcasterLogin), "Property is required for class CustomReward.");

            if (customReward.BroadcasterName == null)
                throw new ArgumentNullException(nameof(customReward.BroadcasterName), "Property is required for class CustomReward.");

            if (customReward.Id == null)
                throw new ArgumentNullException(nameof(customReward.Id), "Property is required for class CustomReward.");

            if (customReward.Title == null)
                throw new ArgumentNullException(nameof(customReward.Title), "Property is required for class CustomReward.");

            if (customReward.Prompt == null)
                throw new ArgumentNullException(nameof(customReward.Prompt), "Property is required for class CustomReward.");

            if (customReward.Image == null)
                throw new ArgumentNullException(nameof(customReward.Image), "Property is required for class CustomReward.");

            if (customReward.DefaultImage == null)
                throw new ArgumentNullException(nameof(customReward.DefaultImage), "Property is required for class CustomReward.");

            if (customReward.BackgroundColor == null)
                throw new ArgumentNullException(nameof(customReward.BackgroundColor), "Property is required for class CustomReward.");

            if (customReward.MaxPerStreamSetting == null)
                throw new ArgumentNullException(nameof(customReward.MaxPerStreamSetting), "Property is required for class CustomReward.");

            if (customReward.MaxPerUserPerStreamSetting == null)
                throw new ArgumentNullException(nameof(customReward.MaxPerUserPerStreamSetting), "Property is required for class CustomReward.");

            if (customReward.GlobalCooldownSetting == null)
                throw new ArgumentNullException(nameof(customReward.GlobalCooldownSetting), "Property is required for class CustomReward.");

            writer.WriteString("broadcaster_id", customReward.BroadcasterId);

            writer.WriteString("broadcaster_login", customReward.BroadcasterLogin);

            writer.WriteString("broadcaster_name", customReward.BroadcasterName);

            writer.WriteString("id", customReward.Id);

            writer.WriteString("title", customReward.Title);

            writer.WriteString("prompt", customReward.Prompt);

            writer.WriteNumber("cost", customReward.Cost);

            writer.WritePropertyName("image");
            JsonSerializer.Serialize(writer, customReward.Image, jsonSerializerOptions);
            writer.WritePropertyName("default_image");
            JsonSerializer.Serialize(writer, customReward.DefaultImage, jsonSerializerOptions);
            writer.WriteString("background_color", customReward.BackgroundColor);

            writer.WriteBoolean("is_enabled", customReward.IsEnabled);

            writer.WriteBoolean("is_user_input_required", customReward.IsUserInputRequired);

            writer.WritePropertyName("max_per_stream_setting");
            JsonSerializer.Serialize(writer, customReward.MaxPerStreamSetting, jsonSerializerOptions);
            writer.WritePropertyName("max_per_user_per_stream_setting");
            JsonSerializer.Serialize(writer, customReward.MaxPerUserPerStreamSetting, jsonSerializerOptions);
            writer.WritePropertyName("global_cooldown_setting");
            JsonSerializer.Serialize(writer, customReward.GlobalCooldownSetting, jsonSerializerOptions);
            writer.WriteBoolean("is_paused", customReward.IsPaused);

            writer.WriteBoolean("is_in_stock", customReward.IsInStock);

            writer.WriteBoolean("should_redemptions_skip_request_queue", customReward.ShouldRedemptionsSkipRequestQueue);

            if (customReward.RedemptionsRedeemedCurrentStream != null)
                writer.WriteNumber("redemptions_redeemed_current_stream", customReward.RedemptionsRedeemedCurrentStream.Value);
            else
                writer.WriteNull("redemptions_redeemed_current_stream");

            if (customReward.CooldownExpiresAt != null)
                writer.WriteString("cooldown_expires_at", customReward.CooldownExpiresAt.Value.ToString(CooldownExpiresAtFormat));
            else
                writer.WriteNull("cooldown_expires_at");
        }
    }
}

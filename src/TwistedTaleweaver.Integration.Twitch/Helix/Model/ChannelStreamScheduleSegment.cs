// <auto-generated>
/*
 * Twitch API Swagger UI (Unofficial)
 *
 * Unofficial Swagger UI for Twitch API.  All endpoints are generated automatically from the [twitch docs](https://dev.twitch.tv/docs/api/reference) page.  __Features:__  * Swagger UI for all Twitch API endpoints * Schemas for _Request Query Parameters_, _Request Body_, _Response Body_ * Some additional schemas like _Clip_, _ChatBadge_, _Prediction_, _Game_, _Channel_, _Video_ etc. * Response codes and examples * Generated types for TypeScript: [ts-twitch-api](https://github.com/DmitryScaletta/ts-twitch-api)  __Repository:__ [github.com/DmitryScaletta/twitch-api-swagger](https://github.com/DmitryScaletta/twitch-api-swagger)
 *
 * The version of the OpenAPI document: helix
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using TwistedTaleweaver.Integration.Twitch.Helix.Client;

namespace TwistedTaleweaver.Integration.Twitch.Helix.Model
{
    /// <summary>
    /// ChannelStreamScheduleSegment
    /// </summary>
    public partial class ChannelStreamScheduleSegment : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelStreamScheduleSegment" /> class.
        /// </summary>
        /// <param name="id">An ID that identifies this broadcast segment.</param>
        /// <param name="startTime">The UTC date and time (in RFC3339 format) of when the broadcast starts.</param>
        /// <param name="endTime">The UTC date and time (in RFC3339 format) of when the broadcast ends.</param>
        /// <param name="title">The broadcast segment’s title.</param>
        /// <param name="category">category</param>
        /// <param name="isRecurring">A Boolean value that determines whether the broadcast is part of a recurring series that streams at the same time each week or is a one-time broadcast. Is **true** if the broadcast is part of a recurring series.</param>
        /// <param name="canceledUntil">Indicates whether the broadcaster canceled this segment of a recurring broadcast. If the broadcaster canceled this segment, this field is set to the same value that’s in the &#x60;end_time&#x60; field; otherwise, it’s set to **null**.</param>
        [JsonConstructor]
        public ChannelStreamScheduleSegment(string id, DateTime startTime, DateTime endTime, string title, ChannelStreamScheduleSegmentCategory category, bool isRecurring, string? canceledUntil = default)
        {
            Id = id;
            StartTime = startTime;
            EndTime = endTime;
            Title = title;
            Category = category;
            IsRecurring = isRecurring;
            CanceledUntil = canceledUntil;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// An ID that identifies this broadcast segment.
        /// </summary>
        /// <value>An ID that identifies this broadcast segment.</value>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// The UTC date and time (in RFC3339 format) of when the broadcast starts.
        /// </summary>
        /// <value>The UTC date and time (in RFC3339 format) of when the broadcast starts.</value>
        [JsonPropertyName("start_time")]
        public DateTime StartTime { get; set; }

        /// <summary>
        /// The UTC date and time (in RFC3339 format) of when the broadcast ends.
        /// </summary>
        /// <value>The UTC date and time (in RFC3339 format) of when the broadcast ends.</value>
        [JsonPropertyName("end_time")]
        public DateTime EndTime { get; set; }

        /// <summary>
        /// The broadcast segment’s title.
        /// </summary>
        /// <value>The broadcast segment’s title.</value>
        [JsonPropertyName("title")]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [JsonPropertyName("category")]
        public ChannelStreamScheduleSegmentCategory Category { get; set; }

        /// <summary>
        /// A Boolean value that determines whether the broadcast is part of a recurring series that streams at the same time each week or is a one-time broadcast. Is **true** if the broadcast is part of a recurring series.
        /// </summary>
        /// <value>A Boolean value that determines whether the broadcast is part of a recurring series that streams at the same time each week or is a one-time broadcast. Is **true** if the broadcast is part of a recurring series.</value>
        [JsonPropertyName("is_recurring")]
        public bool IsRecurring { get; set; }

        /// <summary>
        /// Indicates whether the broadcaster canceled this segment of a recurring broadcast. If the broadcaster canceled this segment, this field is set to the same value that’s in the &#x60;end_time&#x60; field; otherwise, it’s set to **null**.
        /// </summary>
        /// <value>Indicates whether the broadcaster canceled this segment of a recurring broadcast. If the broadcaster canceled this segment, this field is set to the same value that’s in the &#x60;end_time&#x60; field; otherwise, it’s set to **null**.</value>
        [JsonPropertyName("canceled_until")]
        public string? CanceledUntil { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ChannelStreamScheduleSegment {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  IsRecurring: ").Append(IsRecurring).Append("\n");
            sb.Append("  CanceledUntil: ").Append(CanceledUntil).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ChannelStreamScheduleSegment" />
    /// </summary>
    public class ChannelStreamScheduleSegmentJsonConverter : JsonConverter<ChannelStreamScheduleSegment>
    {
        /// <summary>
        /// The format to use to serialize StartTime
        /// </summary>
        public static string StartTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize EndTime
        /// </summary>
        public static string EndTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="ChannelStreamScheduleSegment" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ChannelStreamScheduleSegment Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<DateTime?> startTime = default;
            Option<DateTime?> endTime = default;
            Option<string?> title = default;
            Option<ChannelStreamScheduleSegmentCategory?> category = default;
            Option<bool?> isRecurring = default;
            Option<string?> canceledUntil = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "start_time":
                            startTime = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "end_time":
                            endTime = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "category":
                            category = new Option<ChannelStreamScheduleSegmentCategory?>(JsonSerializer.Deserialize<ChannelStreamScheduleSegmentCategory>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "is_recurring":
                            isRecurring = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "canceled_until":
                            canceledUntil = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class ChannelStreamScheduleSegment.", nameof(id));

            if (!startTime.IsSet)
                throw new ArgumentException("Property is required for class ChannelStreamScheduleSegment.", nameof(startTime));

            if (!endTime.IsSet)
                throw new ArgumentException("Property is required for class ChannelStreamScheduleSegment.", nameof(endTime));

            if (!title.IsSet)
                throw new ArgumentException("Property is required for class ChannelStreamScheduleSegment.", nameof(title));

            if (!category.IsSet)
                throw new ArgumentException("Property is required for class ChannelStreamScheduleSegment.", nameof(category));

            if (!isRecurring.IsSet)
                throw new ArgumentException("Property is required for class ChannelStreamScheduleSegment.", nameof(isRecurring));

            if (!canceledUntil.IsSet)
                throw new ArgumentException("Property is required for class ChannelStreamScheduleSegment.", nameof(canceledUntil));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class ChannelStreamScheduleSegment.");

            if (startTime.IsSet && startTime.Value == null)
                throw new ArgumentNullException(nameof(startTime), "Property is not nullable for class ChannelStreamScheduleSegment.");

            if (endTime.IsSet && endTime.Value == null)
                throw new ArgumentNullException(nameof(endTime), "Property is not nullable for class ChannelStreamScheduleSegment.");

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class ChannelStreamScheduleSegment.");

            if (category.IsSet && category.Value == null)
                throw new ArgumentNullException(nameof(category), "Property is not nullable for class ChannelStreamScheduleSegment.");

            if (isRecurring.IsSet && isRecurring.Value == null)
                throw new ArgumentNullException(nameof(isRecurring), "Property is not nullable for class ChannelStreamScheduleSegment.");

            return new ChannelStreamScheduleSegment(id.Value!, startTime.Value!.Value!, endTime.Value!.Value!, title.Value!, category.Value!, isRecurring.Value!.Value!, canceledUntil.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="ChannelStreamScheduleSegment" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="channelStreamScheduleSegment"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ChannelStreamScheduleSegment channelStreamScheduleSegment, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, channelStreamScheduleSegment, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ChannelStreamScheduleSegment" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="channelStreamScheduleSegment"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ChannelStreamScheduleSegment channelStreamScheduleSegment, JsonSerializerOptions jsonSerializerOptions)
        {
            if (channelStreamScheduleSegment.Id == null)
                throw new ArgumentNullException(nameof(channelStreamScheduleSegment.Id), "Property is required for class ChannelStreamScheduleSegment.");

            if (channelStreamScheduleSegment.Title == null)
                throw new ArgumentNullException(nameof(channelStreamScheduleSegment.Title), "Property is required for class ChannelStreamScheduleSegment.");

            if (channelStreamScheduleSegment.Category == null)
                throw new ArgumentNullException(nameof(channelStreamScheduleSegment.Category), "Property is required for class ChannelStreamScheduleSegment.");

            writer.WriteString("id", channelStreamScheduleSegment.Id);

            writer.WriteString("start_time", channelStreamScheduleSegment.StartTime.ToString(StartTimeFormat));

            writer.WriteString("end_time", channelStreamScheduleSegment.EndTime.ToString(EndTimeFormat));

            writer.WriteString("title", channelStreamScheduleSegment.Title);

            writer.WritePropertyName("category");
            JsonSerializer.Serialize(writer, channelStreamScheduleSegment.Category, jsonSerializerOptions);
            writer.WriteBoolean("is_recurring", channelStreamScheduleSegment.IsRecurring);

            if (channelStreamScheduleSegment.CanceledUntil != null)
                writer.WriteString("canceled_until", channelStreamScheduleSegment.CanceledUntil);
            else
                writer.WriteNull("canceled_until");
        }
    }
}

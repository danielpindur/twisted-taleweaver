// <auto-generated>
/*
 * Twitch API Swagger UI (Unofficial)
 *
 * Unofficial Swagger UI for Twitch API.  All endpoints are generated automatically from the [twitch docs](https://dev.twitch.tv/docs/api/reference) page.  __Features:__  * Swagger UI for all Twitch API endpoints * Schemas for _Request Query Parameters_, _Request Body_, _Response Body_ * Some additional schemas like _Clip_, _ChatBadge_, _Prediction_, _Game_, _Channel_, _Video_ etc. * Response codes and examples * Generated types for TypeScript: [ts-twitch-api](https://github.com/DmitryScaletta/ts-twitch-api)  __Repository:__ [github.com/DmitryScaletta/twitch-api-swagger](https://github.com/DmitryScaletta/twitch-api-swagger)
 *
 * The version of the OpenAPI document: helix
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using TwistedTaleweaver.Integration.Twitch.Helix.Client;

namespace TwistedTaleweaver.Integration.Twitch.Helix.Model
{
    /// <summary>
    /// ResolveUnbanRequestsResponseDataInner
    /// </summary>
    public partial class ResolveUnbanRequestsResponseDataInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResolveUnbanRequestsResponseDataInner" /> class.
        /// </summary>
        /// <param name="id">Unban request ID.</param>
        /// <param name="broadcasterId">User ID of broadcaster whose channel is receiving the unban request.</param>
        /// <param name="broadcasterLogin">The broadcaster’s login name.</param>
        /// <param name="broadcasterName">The broadcaster’s display name.</param>
        /// <param name="moderatorId">User ID of moderator who approved/denied the request.</param>
        /// <param name="moderatorLogin">The moderator’s login name.</param>
        /// <param name="moderatorName">The moderator’s display name.</param>
        /// <param name="userId">User ID of the requestor who is asking for an unban.</param>
        /// <param name="userLogin">The user’s login name.</param>
        /// <param name="userName">The user’s display name.</param>
        /// <param name="text">Text of the request from the requesting user.</param>
        /// <param name="status">Status of the request. One of:       * approved * denied</param>
        /// <param name="createdAt">Timestamp of when the unban request was created.</param>
        /// <param name="resolvedAt">Timestamp of when moderator/broadcaster approved or denied the request.</param>
        /// <param name="resolutionText">Text input by the resolver (moderator) of the unban request.</param>
        [JsonConstructor]
        public ResolveUnbanRequestsResponseDataInner(string id, string broadcasterId, string broadcasterLogin, string broadcasterName, string moderatorId, string moderatorLogin, string moderatorName, string userId, string userLogin, string userName, string text, string status, DateTime createdAt, DateTime resolvedAt, string resolutionText)
        {
            Id = id;
            BroadcasterId = broadcasterId;
            BroadcasterLogin = broadcasterLogin;
            BroadcasterName = broadcasterName;
            ModeratorId = moderatorId;
            ModeratorLogin = moderatorLogin;
            ModeratorName = moderatorName;
            UserId = userId;
            UserLogin = userLogin;
            UserName = userName;
            Text = text;
            Status = status;
            CreatedAt = createdAt;
            ResolvedAt = resolvedAt;
            ResolutionText = resolutionText;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Unban request ID.
        /// </summary>
        /// <value>Unban request ID.</value>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// User ID of broadcaster whose channel is receiving the unban request.
        /// </summary>
        /// <value>User ID of broadcaster whose channel is receiving the unban request.</value>
        [JsonPropertyName("broadcaster_id")]
        public string BroadcasterId { get; set; }

        /// <summary>
        /// The broadcaster’s login name.
        /// </summary>
        /// <value>The broadcaster’s login name.</value>
        [JsonPropertyName("broadcaster_login")]
        public string BroadcasterLogin { get; set; }

        /// <summary>
        /// The broadcaster’s display name.
        /// </summary>
        /// <value>The broadcaster’s display name.</value>
        [JsonPropertyName("broadcaster_name")]
        public string BroadcasterName { get; set; }

        /// <summary>
        /// User ID of moderator who approved/denied the request.
        /// </summary>
        /// <value>User ID of moderator who approved/denied the request.</value>
        [JsonPropertyName("moderator_id")]
        public string ModeratorId { get; set; }

        /// <summary>
        /// The moderator’s login name.
        /// </summary>
        /// <value>The moderator’s login name.</value>
        [JsonPropertyName("moderator_login")]
        public string ModeratorLogin { get; set; }

        /// <summary>
        /// The moderator’s display name.
        /// </summary>
        /// <value>The moderator’s display name.</value>
        [JsonPropertyName("moderator_name")]
        public string ModeratorName { get; set; }

        /// <summary>
        /// User ID of the requestor who is asking for an unban.
        /// </summary>
        /// <value>User ID of the requestor who is asking for an unban.</value>
        [JsonPropertyName("user_id")]
        public string UserId { get; set; }

        /// <summary>
        /// The user’s login name.
        /// </summary>
        /// <value>The user’s login name.</value>
        [JsonPropertyName("user_login")]
        public string UserLogin { get; set; }

        /// <summary>
        /// The user’s display name.
        /// </summary>
        /// <value>The user’s display name.</value>
        [JsonPropertyName("user_name")]
        public string UserName { get; set; }

        /// <summary>
        /// Text of the request from the requesting user.
        /// </summary>
        /// <value>Text of the request from the requesting user.</value>
        [JsonPropertyName("text")]
        public string Text { get; set; }

        /// <summary>
        /// Status of the request. One of:       * approved * denied
        /// </summary>
        /// <value>Status of the request. One of:       * approved * denied</value>
        [JsonPropertyName("status")]
        public string Status { get; set; }

        /// <summary>
        /// Timestamp of when the unban request was created.
        /// </summary>
        /// <value>Timestamp of when the unban request was created.</value>
        [JsonPropertyName("created_at")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Timestamp of when moderator/broadcaster approved or denied the request.
        /// </summary>
        /// <value>Timestamp of when moderator/broadcaster approved or denied the request.</value>
        [JsonPropertyName("resolved_at")]
        public DateTime ResolvedAt { get; set; }

        /// <summary>
        /// Text input by the resolver (moderator) of the unban request.
        /// </summary>
        /// <value>Text input by the resolver (moderator) of the unban request.</value>
        [JsonPropertyName("resolution_text")]
        public string ResolutionText { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ResolveUnbanRequestsResponseDataInner {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  BroadcasterId: ").Append(BroadcasterId).Append("\n");
            sb.Append("  BroadcasterLogin: ").Append(BroadcasterLogin).Append("\n");
            sb.Append("  BroadcasterName: ").Append(BroadcasterName).Append("\n");
            sb.Append("  ModeratorId: ").Append(ModeratorId).Append("\n");
            sb.Append("  ModeratorLogin: ").Append(ModeratorLogin).Append("\n");
            sb.Append("  ModeratorName: ").Append(ModeratorName).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  UserLogin: ").Append(UserLogin).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  ResolvedAt: ").Append(ResolvedAt).Append("\n");
            sb.Append("  ResolutionText: ").Append(ResolutionText).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ResolveUnbanRequestsResponseDataInner" />
    /// </summary>
    public class ResolveUnbanRequestsResponseDataInnerJsonConverter : JsonConverter<ResolveUnbanRequestsResponseDataInner>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize ResolvedAt
        /// </summary>
        public static string ResolvedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="ResolveUnbanRequestsResponseDataInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ResolveUnbanRequestsResponseDataInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> broadcasterId = default;
            Option<string?> broadcasterLogin = default;
            Option<string?> broadcasterName = default;
            Option<string?> moderatorId = default;
            Option<string?> moderatorLogin = default;
            Option<string?> moderatorName = default;
            Option<string?> userId = default;
            Option<string?> userLogin = default;
            Option<string?> userName = default;
            Option<string?> text = default;
            Option<string?> status = default;
            Option<DateTime?> createdAt = default;
            Option<DateTime?> resolvedAt = default;
            Option<string?> resolutionText = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "broadcaster_id":
                            broadcasterId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "broadcaster_login":
                            broadcasterLogin = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "broadcaster_name":
                            broadcasterName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "moderator_id":
                            moderatorId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "moderator_login":
                            moderatorLogin = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "moderator_name":
                            moderatorName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "user_id":
                            userId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "user_login":
                            userLogin = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "user_name":
                            userName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "text":
                            text = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "status":
                            status = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "created_at":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "resolved_at":
                            resolvedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "resolution_text":
                            resolutionText = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class ResolveUnbanRequestsResponseDataInner.", nameof(id));

            if (!broadcasterId.IsSet)
                throw new ArgumentException("Property is required for class ResolveUnbanRequestsResponseDataInner.", nameof(broadcasterId));

            if (!broadcasterLogin.IsSet)
                throw new ArgumentException("Property is required for class ResolveUnbanRequestsResponseDataInner.", nameof(broadcasterLogin));

            if (!broadcasterName.IsSet)
                throw new ArgumentException("Property is required for class ResolveUnbanRequestsResponseDataInner.", nameof(broadcasterName));

            if (!moderatorId.IsSet)
                throw new ArgumentException("Property is required for class ResolveUnbanRequestsResponseDataInner.", nameof(moderatorId));

            if (!moderatorLogin.IsSet)
                throw new ArgumentException("Property is required for class ResolveUnbanRequestsResponseDataInner.", nameof(moderatorLogin));

            if (!moderatorName.IsSet)
                throw new ArgumentException("Property is required for class ResolveUnbanRequestsResponseDataInner.", nameof(moderatorName));

            if (!userId.IsSet)
                throw new ArgumentException("Property is required for class ResolveUnbanRequestsResponseDataInner.", nameof(userId));

            if (!userLogin.IsSet)
                throw new ArgumentException("Property is required for class ResolveUnbanRequestsResponseDataInner.", nameof(userLogin));

            if (!userName.IsSet)
                throw new ArgumentException("Property is required for class ResolveUnbanRequestsResponseDataInner.", nameof(userName));

            if (!text.IsSet)
                throw new ArgumentException("Property is required for class ResolveUnbanRequestsResponseDataInner.", nameof(text));

            if (!status.IsSet)
                throw new ArgumentException("Property is required for class ResolveUnbanRequestsResponseDataInner.", nameof(status));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class ResolveUnbanRequestsResponseDataInner.", nameof(createdAt));

            if (!resolvedAt.IsSet)
                throw new ArgumentException("Property is required for class ResolveUnbanRequestsResponseDataInner.", nameof(resolvedAt));

            if (!resolutionText.IsSet)
                throw new ArgumentException("Property is required for class ResolveUnbanRequestsResponseDataInner.", nameof(resolutionText));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class ResolveUnbanRequestsResponseDataInner.");

            if (broadcasterId.IsSet && broadcasterId.Value == null)
                throw new ArgumentNullException(nameof(broadcasterId), "Property is not nullable for class ResolveUnbanRequestsResponseDataInner.");

            if (broadcasterLogin.IsSet && broadcasterLogin.Value == null)
                throw new ArgumentNullException(nameof(broadcasterLogin), "Property is not nullable for class ResolveUnbanRequestsResponseDataInner.");

            if (broadcasterName.IsSet && broadcasterName.Value == null)
                throw new ArgumentNullException(nameof(broadcasterName), "Property is not nullable for class ResolveUnbanRequestsResponseDataInner.");

            if (moderatorId.IsSet && moderatorId.Value == null)
                throw new ArgumentNullException(nameof(moderatorId), "Property is not nullable for class ResolveUnbanRequestsResponseDataInner.");

            if (moderatorLogin.IsSet && moderatorLogin.Value == null)
                throw new ArgumentNullException(nameof(moderatorLogin), "Property is not nullable for class ResolveUnbanRequestsResponseDataInner.");

            if (moderatorName.IsSet && moderatorName.Value == null)
                throw new ArgumentNullException(nameof(moderatorName), "Property is not nullable for class ResolveUnbanRequestsResponseDataInner.");

            if (userId.IsSet && userId.Value == null)
                throw new ArgumentNullException(nameof(userId), "Property is not nullable for class ResolveUnbanRequestsResponseDataInner.");

            if (userLogin.IsSet && userLogin.Value == null)
                throw new ArgumentNullException(nameof(userLogin), "Property is not nullable for class ResolveUnbanRequestsResponseDataInner.");

            if (userName.IsSet && userName.Value == null)
                throw new ArgumentNullException(nameof(userName), "Property is not nullable for class ResolveUnbanRequestsResponseDataInner.");

            if (text.IsSet && text.Value == null)
                throw new ArgumentNullException(nameof(text), "Property is not nullable for class ResolveUnbanRequestsResponseDataInner.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class ResolveUnbanRequestsResponseDataInner.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class ResolveUnbanRequestsResponseDataInner.");

            if (resolvedAt.IsSet && resolvedAt.Value == null)
                throw new ArgumentNullException(nameof(resolvedAt), "Property is not nullable for class ResolveUnbanRequestsResponseDataInner.");

            if (resolutionText.IsSet && resolutionText.Value == null)
                throw new ArgumentNullException(nameof(resolutionText), "Property is not nullable for class ResolveUnbanRequestsResponseDataInner.");

            return new ResolveUnbanRequestsResponseDataInner(id.Value!, broadcasterId.Value!, broadcasterLogin.Value!, broadcasterName.Value!, moderatorId.Value!, moderatorLogin.Value!, moderatorName.Value!, userId.Value!, userLogin.Value!, userName.Value!, text.Value!, status.Value!, createdAt.Value!.Value!, resolvedAt.Value!.Value!, resolutionText.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="ResolveUnbanRequestsResponseDataInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="resolveUnbanRequestsResponseDataInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ResolveUnbanRequestsResponseDataInner resolveUnbanRequestsResponseDataInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, resolveUnbanRequestsResponseDataInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ResolveUnbanRequestsResponseDataInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="resolveUnbanRequestsResponseDataInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ResolveUnbanRequestsResponseDataInner resolveUnbanRequestsResponseDataInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (resolveUnbanRequestsResponseDataInner.Id == null)
                throw new ArgumentNullException(nameof(resolveUnbanRequestsResponseDataInner.Id), "Property is required for class ResolveUnbanRequestsResponseDataInner.");

            if (resolveUnbanRequestsResponseDataInner.BroadcasterId == null)
                throw new ArgumentNullException(nameof(resolveUnbanRequestsResponseDataInner.BroadcasterId), "Property is required for class ResolveUnbanRequestsResponseDataInner.");

            if (resolveUnbanRequestsResponseDataInner.BroadcasterLogin == null)
                throw new ArgumentNullException(nameof(resolveUnbanRequestsResponseDataInner.BroadcasterLogin), "Property is required for class ResolveUnbanRequestsResponseDataInner.");

            if (resolveUnbanRequestsResponseDataInner.BroadcasterName == null)
                throw new ArgumentNullException(nameof(resolveUnbanRequestsResponseDataInner.BroadcasterName), "Property is required for class ResolveUnbanRequestsResponseDataInner.");

            if (resolveUnbanRequestsResponseDataInner.ModeratorId == null)
                throw new ArgumentNullException(nameof(resolveUnbanRequestsResponseDataInner.ModeratorId), "Property is required for class ResolveUnbanRequestsResponseDataInner.");

            if (resolveUnbanRequestsResponseDataInner.ModeratorLogin == null)
                throw new ArgumentNullException(nameof(resolveUnbanRequestsResponseDataInner.ModeratorLogin), "Property is required for class ResolveUnbanRequestsResponseDataInner.");

            if (resolveUnbanRequestsResponseDataInner.ModeratorName == null)
                throw new ArgumentNullException(nameof(resolveUnbanRequestsResponseDataInner.ModeratorName), "Property is required for class ResolveUnbanRequestsResponseDataInner.");

            if (resolveUnbanRequestsResponseDataInner.UserId == null)
                throw new ArgumentNullException(nameof(resolveUnbanRequestsResponseDataInner.UserId), "Property is required for class ResolveUnbanRequestsResponseDataInner.");

            if (resolveUnbanRequestsResponseDataInner.UserLogin == null)
                throw new ArgumentNullException(nameof(resolveUnbanRequestsResponseDataInner.UserLogin), "Property is required for class ResolveUnbanRequestsResponseDataInner.");

            if (resolveUnbanRequestsResponseDataInner.UserName == null)
                throw new ArgumentNullException(nameof(resolveUnbanRequestsResponseDataInner.UserName), "Property is required for class ResolveUnbanRequestsResponseDataInner.");

            if (resolveUnbanRequestsResponseDataInner.Text == null)
                throw new ArgumentNullException(nameof(resolveUnbanRequestsResponseDataInner.Text), "Property is required for class ResolveUnbanRequestsResponseDataInner.");

            if (resolveUnbanRequestsResponseDataInner.Status == null)
                throw new ArgumentNullException(nameof(resolveUnbanRequestsResponseDataInner.Status), "Property is required for class ResolveUnbanRequestsResponseDataInner.");

            if (resolveUnbanRequestsResponseDataInner.ResolutionText == null)
                throw new ArgumentNullException(nameof(resolveUnbanRequestsResponseDataInner.ResolutionText), "Property is required for class ResolveUnbanRequestsResponseDataInner.");

            writer.WriteString("id", resolveUnbanRequestsResponseDataInner.Id);

            writer.WriteString("broadcaster_id", resolveUnbanRequestsResponseDataInner.BroadcasterId);

            writer.WriteString("broadcaster_login", resolveUnbanRequestsResponseDataInner.BroadcasterLogin);

            writer.WriteString("broadcaster_name", resolveUnbanRequestsResponseDataInner.BroadcasterName);

            writer.WriteString("moderator_id", resolveUnbanRequestsResponseDataInner.ModeratorId);

            writer.WriteString("moderator_login", resolveUnbanRequestsResponseDataInner.ModeratorLogin);

            writer.WriteString("moderator_name", resolveUnbanRequestsResponseDataInner.ModeratorName);

            writer.WriteString("user_id", resolveUnbanRequestsResponseDataInner.UserId);

            writer.WriteString("user_login", resolveUnbanRequestsResponseDataInner.UserLogin);

            writer.WriteString("user_name", resolveUnbanRequestsResponseDataInner.UserName);

            writer.WriteString("text", resolveUnbanRequestsResponseDataInner.Text);

            writer.WriteString("status", resolveUnbanRequestsResponseDataInner.Status);

            writer.WriteString("created_at", resolveUnbanRequestsResponseDataInner.CreatedAt.ToString(CreatedAtFormat));

            writer.WriteString("resolved_at", resolveUnbanRequestsResponseDataInner.ResolvedAt.ToString(ResolvedAtFormat));

            writer.WriteString("resolution_text", resolveUnbanRequestsResponseDataInner.ResolutionText);
        }
    }
}

// <auto-generated>
/*
 * Twitch API Swagger UI (Unofficial)
 *
 * Unofficial Swagger UI for Twitch API.  All endpoints are generated automatically from the [twitch docs](https://dev.twitch.tv/docs/api/reference) page.  __Features:__  * Swagger UI for all Twitch API endpoints * Schemas for _Request Query Parameters_, _Request Body_, _Response Body_ * Some additional schemas like _Clip_, _ChatBadge_, _Prediction_, _Game_, _Channel_, _Video_ etc. * Response codes and examples * Generated types for TypeScript: [ts-twitch-api](https://github.com/DmitryScaletta/ts-twitch-api)  __Repository:__ [github.com/DmitryScaletta/twitch-api-swagger](https://github.com/DmitryScaletta/twitch-api-swagger)
 *
 * The version of the OpenAPI document: helix
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using TwistedTaleweaver.Integration.Twitch.Helix.Client;

namespace TwistedTaleweaver.Integration.Twitch.Helix.Model
{
    /// <summary>
    /// Video
    /// </summary>
    public partial class Video : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Video" /> class.
        /// </summary>
        /// <param name="id">An ID that identifies the video.</param>
        /// <param name="userId">The ID of the broadcaster that owns the video.</param>
        /// <param name="userLogin">The broadcaster&#39;s login name.</param>
        /// <param name="userName">The broadcaster&#39;s display name.</param>
        /// <param name="title">The video&#39;s title.</param>
        /// <param name="description">The video&#39;s description.</param>
        /// <param name="createdAt">The date and time, in UTC, of when the video was created. The timestamp is in RFC3339 format.</param>
        /// <param name="publishedAt">The date and time, in UTC, of when the video was published. The timestamp is in RFC3339 format.</param>
        /// <param name="url">The video&#39;s URL.</param>
        /// <param name="thumbnailUrl">A URL to a thumbnail image of the video. Before using the URL, you must replace the &#x60;%{width}&#x60; and &#x60;%{height}&#x60; placeholders with the width and height of the thumbnail you want returned. Due to current limitations, &#x60;${width}&#x60; must be 320 and &#x60;${height}&#x60; must be 180.</param>
        /// <param name="viewable">The video&#39;s viewable state. Always set to **public**.</param>
        /// <param name="viewCount">The number of times that users have watched the video.</param>
        /// <param name="language">The ISO 639-1 two-letter language code that the video was broadcast in. For example, the language code is DE if the video was broadcast in German. For a list of supported languages, see [Supported Stream Language](https://help.twitch.tv/s/article/languages-on-twitch#streamlang). The language value is \&quot;other\&quot; if the video was broadcast in a language not in the list of supported languages.</param>
        /// <param name="type">The video&#39;s type. Possible values are:      * archive — An on-demand video (VOD) of one of the broadcaster&#39;s past streams. * highlight — A highlight reel of one of the broadcaster&#39;s past streams. See [Creating Highlights](https://help.twitch.tv/s/article/creating-highlights-and-stream-markers). * upload — A video that the broadcaster uploaded to their video library. See Upload under [Video Producer](https://help.twitch.tv/s/article/video-on-demand?language&#x3D;en%5FUS#videoproducer).</param>
        /// <param name="duration">The video&#39;s length in ISO 8601 duration format. For example, 3m21s represents 3 minutes, 21 seconds.</param>
        /// <param name="streamId">The ID of the stream that the video originated from if the video&#39;s type is \&quot;archive;\&quot; otherwise, **null**.</param>
        /// <param name="mutedSegments">The segments that Twitch Audio Recognition muted; otherwise, **null**.</param>
        [JsonConstructor]
        public Video(string id, string userId, string userLogin, string userName, string title, string description, DateTime createdAt, DateTime publishedAt, string url, string thumbnailUrl, string viewable, int viewCount, string language, TypeEnum type, string duration, string? streamId = default, List<VideoMutedSegmentsInner>? mutedSegments = default)
        {
            Id = id;
            UserId = userId;
            UserLogin = userLogin;
            UserName = userName;
            Title = title;
            Description = description;
            CreatedAt = createdAt;
            PublishedAt = publishedAt;
            Url = url;
            ThumbnailUrl = thumbnailUrl;
            Viewable = viewable;
            ViewCount = viewCount;
            Language = language;
            Type = type;
            Duration = duration;
            StreamId = streamId;
            MutedSegments = mutedSegments;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The video&#39;s type. Possible values are:      * archive — An on-demand video (VOD) of one of the broadcaster&#39;s past streams. * highlight — A highlight reel of one of the broadcaster&#39;s past streams. See [Creating Highlights](https://help.twitch.tv/s/article/creating-highlights-and-stream-markers). * upload — A video that the broadcaster uploaded to their video library. See Upload under [Video Producer](https://help.twitch.tv/s/article/video-on-demand?language&#x3D;en%5FUS#videoproducer).
        /// </summary>
        /// <value>The video&#39;s type. Possible values are:      * archive — An on-demand video (VOD) of one of the broadcaster&#39;s past streams. * highlight — A highlight reel of one of the broadcaster&#39;s past streams. See [Creating Highlights](https://help.twitch.tv/s/article/creating-highlights-and-stream-markers). * upload — A video that the broadcaster uploaded to their video library. See Upload under [Video Producer](https://help.twitch.tv/s/article/video-on-demand?language&#x3D;en%5FUS#videoproducer).</value>
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Archive for value: archive
            /// </summary>
            Archive = 1,

            /// <summary>
            /// Enum Highlight for value: highlight
            /// </summary>
            Highlight = 2,

            /// <summary>
            /// Enum Upload for value: upload
            /// </summary>
            Upload = 3
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TypeEnum TypeEnumFromString(string value)
        {
            if (value.Equals("archive"))
                return TypeEnum.Archive;

            if (value.Equals("highlight"))
                return TypeEnum.Highlight;

            if (value.Equals("upload"))
                return TypeEnum.Upload;

            throw new NotImplementedException($"Could not convert value to type TypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TypeEnum? TypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("archive"))
                return TypeEnum.Archive;

            if (value.Equals("highlight"))
                return TypeEnum.Highlight;

            if (value.Equals("upload"))
                return TypeEnum.Upload;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TypeEnumToJsonValue(TypeEnum value)
        {
            if (value == TypeEnum.Archive)
                return "archive";

            if (value == TypeEnum.Highlight)
                return "highlight";

            if (value == TypeEnum.Upload)
                return "upload";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// The video&#39;s type. Possible values are:      * archive — An on-demand video (VOD) of one of the broadcaster&#39;s past streams. * highlight — A highlight reel of one of the broadcaster&#39;s past streams. See [Creating Highlights](https://help.twitch.tv/s/article/creating-highlights-and-stream-markers). * upload — A video that the broadcaster uploaded to their video library. See Upload under [Video Producer](https://help.twitch.tv/s/article/video-on-demand?language&#x3D;en%5FUS#videoproducer).
        /// </summary>
        /// <value>The video&#39;s type. Possible values are:      * archive — An on-demand video (VOD) of one of the broadcaster&#39;s past streams. * highlight — A highlight reel of one of the broadcaster&#39;s past streams. See [Creating Highlights](https://help.twitch.tv/s/article/creating-highlights-and-stream-markers). * upload — A video that the broadcaster uploaded to their video library. See Upload under [Video Producer](https://help.twitch.tv/s/article/video-on-demand?language&#x3D;en%5FUS#videoproducer).</value>
        [JsonPropertyName("type")]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// An ID that identifies the video.
        /// </summary>
        /// <value>An ID that identifies the video.</value>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// The ID of the broadcaster that owns the video.
        /// </summary>
        /// <value>The ID of the broadcaster that owns the video.</value>
        [JsonPropertyName("user_id")]
        public string UserId { get; set; }

        /// <summary>
        /// The broadcaster&#39;s login name.
        /// </summary>
        /// <value>The broadcaster&#39;s login name.</value>
        [JsonPropertyName("user_login")]
        public string UserLogin { get; set; }

        /// <summary>
        /// The broadcaster&#39;s display name.
        /// </summary>
        /// <value>The broadcaster&#39;s display name.</value>
        [JsonPropertyName("user_name")]
        public string UserName { get; set; }

        /// <summary>
        /// The video&#39;s title.
        /// </summary>
        /// <value>The video&#39;s title.</value>
        [JsonPropertyName("title")]
        public string Title { get; set; }

        /// <summary>
        /// The video&#39;s description.
        /// </summary>
        /// <value>The video&#39;s description.</value>
        [JsonPropertyName("description")]
        public string Description { get; set; }

        /// <summary>
        /// The date and time, in UTC, of when the video was created. The timestamp is in RFC3339 format.
        /// </summary>
        /// <value>The date and time, in UTC, of when the video was created. The timestamp is in RFC3339 format.</value>
        [JsonPropertyName("created_at")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// The date and time, in UTC, of when the video was published. The timestamp is in RFC3339 format.
        /// </summary>
        /// <value>The date and time, in UTC, of when the video was published. The timestamp is in RFC3339 format.</value>
        [JsonPropertyName("published_at")]
        public DateTime PublishedAt { get; set; }

        /// <summary>
        /// The video&#39;s URL.
        /// </summary>
        /// <value>The video&#39;s URL.</value>
        [JsonPropertyName("url")]
        public string Url { get; set; }

        /// <summary>
        /// A URL to a thumbnail image of the video. Before using the URL, you must replace the &#x60;%{width}&#x60; and &#x60;%{height}&#x60; placeholders with the width and height of the thumbnail you want returned. Due to current limitations, &#x60;${width}&#x60; must be 320 and &#x60;${height}&#x60; must be 180.
        /// </summary>
        /// <value>A URL to a thumbnail image of the video. Before using the URL, you must replace the &#x60;%{width}&#x60; and &#x60;%{height}&#x60; placeholders with the width and height of the thumbnail you want returned. Due to current limitations, &#x60;${width}&#x60; must be 320 and &#x60;${height}&#x60; must be 180.</value>
        [JsonPropertyName("thumbnail_url")]
        public string ThumbnailUrl { get; set; }

        /// <summary>
        /// The video&#39;s viewable state. Always set to **public**.
        /// </summary>
        /// <value>The video&#39;s viewable state. Always set to **public**.</value>
        [JsonPropertyName("viewable")]
        public string Viewable { get; set; }

        /// <summary>
        /// The number of times that users have watched the video.
        /// </summary>
        /// <value>The number of times that users have watched the video.</value>
        [JsonPropertyName("view_count")]
        public int ViewCount { get; set; }

        /// <summary>
        /// The ISO 639-1 two-letter language code that the video was broadcast in. For example, the language code is DE if the video was broadcast in German. For a list of supported languages, see [Supported Stream Language](https://help.twitch.tv/s/article/languages-on-twitch#streamlang). The language value is \&quot;other\&quot; if the video was broadcast in a language not in the list of supported languages.
        /// </summary>
        /// <value>The ISO 639-1 two-letter language code that the video was broadcast in. For example, the language code is DE if the video was broadcast in German. For a list of supported languages, see [Supported Stream Language](https://help.twitch.tv/s/article/languages-on-twitch#streamlang). The language value is \&quot;other\&quot; if the video was broadcast in a language not in the list of supported languages.</value>
        [JsonPropertyName("language")]
        public string Language { get; set; }

        /// <summary>
        /// The video&#39;s length in ISO 8601 duration format. For example, 3m21s represents 3 minutes, 21 seconds.
        /// </summary>
        /// <value>The video&#39;s length in ISO 8601 duration format. For example, 3m21s represents 3 minutes, 21 seconds.</value>
        [JsonPropertyName("duration")]
        public string Duration { get; set; }

        /// <summary>
        /// The ID of the stream that the video originated from if the video&#39;s type is \&quot;archive;\&quot; otherwise, **null**.
        /// </summary>
        /// <value>The ID of the stream that the video originated from if the video&#39;s type is \&quot;archive;\&quot; otherwise, **null**.</value>
        [JsonPropertyName("stream_id")]
        public string? StreamId { get; set; }

        /// <summary>
        /// The segments that Twitch Audio Recognition muted; otherwise, **null**.
        /// </summary>
        /// <value>The segments that Twitch Audio Recognition muted; otherwise, **null**.</value>
        [JsonPropertyName("muted_segments")]
        public List<VideoMutedSegmentsInner>? MutedSegments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Video {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  UserLogin: ").Append(UserLogin).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  PublishedAt: ").Append(PublishedAt).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  ThumbnailUrl: ").Append(ThumbnailUrl).Append("\n");
            sb.Append("  Viewable: ").Append(Viewable).Append("\n");
            sb.Append("  ViewCount: ").Append(ViewCount).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  StreamId: ").Append(StreamId).Append("\n");
            sb.Append("  MutedSegments: ").Append(MutedSegments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Video" />
    /// </summary>
    public class VideoJsonConverter : JsonConverter<Video>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize PublishedAt
        /// </summary>
        public static string PublishedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="Video" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Video Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> userId = default;
            Option<string?> userLogin = default;
            Option<string?> userName = default;
            Option<string?> title = default;
            Option<string?> description = default;
            Option<DateTime?> createdAt = default;
            Option<DateTime?> publishedAt = default;
            Option<string?> url = default;
            Option<string?> thumbnailUrl = default;
            Option<string?> viewable = default;
            Option<int?> viewCount = default;
            Option<string?> language = default;
            Option<Video.TypeEnum?> type = default;
            Option<string?> duration = default;
            Option<string?> streamId = default;
            Option<List<VideoMutedSegmentsInner>?> mutedSegments = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "user_id":
                            userId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "user_login":
                            userLogin = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "user_name":
                            userName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "created_at":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "published_at":
                            publishedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "url":
                            url = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "thumbnail_url":
                            thumbnailUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "viewable":
                            viewable = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "view_count":
                            viewCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "language":
                            language = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<Video.TypeEnum?>(Video.TypeEnumFromStringOrDefault(typeRawValue));
                            break;
                        case "duration":
                            duration = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "stream_id":
                            streamId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "muted_segments":
                            mutedSegments = new Option<List<VideoMutedSegmentsInner>?>(JsonSerializer.Deserialize<List<VideoMutedSegmentsInner>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class Video.", nameof(id));

            if (!userId.IsSet)
                throw new ArgumentException("Property is required for class Video.", nameof(userId));

            if (!userLogin.IsSet)
                throw new ArgumentException("Property is required for class Video.", nameof(userLogin));

            if (!userName.IsSet)
                throw new ArgumentException("Property is required for class Video.", nameof(userName));

            if (!title.IsSet)
                throw new ArgumentException("Property is required for class Video.", nameof(title));

            if (!description.IsSet)
                throw new ArgumentException("Property is required for class Video.", nameof(description));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class Video.", nameof(createdAt));

            if (!publishedAt.IsSet)
                throw new ArgumentException("Property is required for class Video.", nameof(publishedAt));

            if (!url.IsSet)
                throw new ArgumentException("Property is required for class Video.", nameof(url));

            if (!thumbnailUrl.IsSet)
                throw new ArgumentException("Property is required for class Video.", nameof(thumbnailUrl));

            if (!viewable.IsSet)
                throw new ArgumentException("Property is required for class Video.", nameof(viewable));

            if (!viewCount.IsSet)
                throw new ArgumentException("Property is required for class Video.", nameof(viewCount));

            if (!language.IsSet)
                throw new ArgumentException("Property is required for class Video.", nameof(language));

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class Video.", nameof(type));

            if (!duration.IsSet)
                throw new ArgumentException("Property is required for class Video.", nameof(duration));

            if (!streamId.IsSet)
                throw new ArgumentException("Property is required for class Video.", nameof(streamId));

            if (!mutedSegments.IsSet)
                throw new ArgumentException("Property is required for class Video.", nameof(mutedSegments));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class Video.");

            if (userId.IsSet && userId.Value == null)
                throw new ArgumentNullException(nameof(userId), "Property is not nullable for class Video.");

            if (userLogin.IsSet && userLogin.Value == null)
                throw new ArgumentNullException(nameof(userLogin), "Property is not nullable for class Video.");

            if (userName.IsSet && userName.Value == null)
                throw new ArgumentNullException(nameof(userName), "Property is not nullable for class Video.");

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class Video.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class Video.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class Video.");

            if (publishedAt.IsSet && publishedAt.Value == null)
                throw new ArgumentNullException(nameof(publishedAt), "Property is not nullable for class Video.");

            if (url.IsSet && url.Value == null)
                throw new ArgumentNullException(nameof(url), "Property is not nullable for class Video.");

            if (thumbnailUrl.IsSet && thumbnailUrl.Value == null)
                throw new ArgumentNullException(nameof(thumbnailUrl), "Property is not nullable for class Video.");

            if (viewable.IsSet && viewable.Value == null)
                throw new ArgumentNullException(nameof(viewable), "Property is not nullable for class Video.");

            if (viewCount.IsSet && viewCount.Value == null)
                throw new ArgumentNullException(nameof(viewCount), "Property is not nullable for class Video.");

            if (language.IsSet && language.Value == null)
                throw new ArgumentNullException(nameof(language), "Property is not nullable for class Video.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class Video.");

            if (duration.IsSet && duration.Value == null)
                throw new ArgumentNullException(nameof(duration), "Property is not nullable for class Video.");

            return new Video(id.Value!, userId.Value!, userLogin.Value!, userName.Value!, title.Value!, description.Value!, createdAt.Value!.Value!, publishedAt.Value!.Value!, url.Value!, thumbnailUrl.Value!, viewable.Value!, viewCount.Value!.Value!, language.Value!, type.Value!.Value!, duration.Value!, streamId.Value!, mutedSegments.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="Video" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="video"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Video video, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, video, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Video" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="video"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Video video, JsonSerializerOptions jsonSerializerOptions)
        {
            if (video.Id == null)
                throw new ArgumentNullException(nameof(video.Id), "Property is required for class Video.");

            if (video.UserId == null)
                throw new ArgumentNullException(nameof(video.UserId), "Property is required for class Video.");

            if (video.UserLogin == null)
                throw new ArgumentNullException(nameof(video.UserLogin), "Property is required for class Video.");

            if (video.UserName == null)
                throw new ArgumentNullException(nameof(video.UserName), "Property is required for class Video.");

            if (video.Title == null)
                throw new ArgumentNullException(nameof(video.Title), "Property is required for class Video.");

            if (video.Description == null)
                throw new ArgumentNullException(nameof(video.Description), "Property is required for class Video.");

            if (video.Url == null)
                throw new ArgumentNullException(nameof(video.Url), "Property is required for class Video.");

            if (video.ThumbnailUrl == null)
                throw new ArgumentNullException(nameof(video.ThumbnailUrl), "Property is required for class Video.");

            if (video.Viewable == null)
                throw new ArgumentNullException(nameof(video.Viewable), "Property is required for class Video.");

            if (video.Language == null)
                throw new ArgumentNullException(nameof(video.Language), "Property is required for class Video.");

            if (video.Duration == null)
                throw new ArgumentNullException(nameof(video.Duration), "Property is required for class Video.");

            writer.WriteString("id", video.Id);

            writer.WriteString("user_id", video.UserId);

            writer.WriteString("user_login", video.UserLogin);

            writer.WriteString("user_name", video.UserName);

            writer.WriteString("title", video.Title);

            writer.WriteString("description", video.Description);

            writer.WriteString("created_at", video.CreatedAt.ToString(CreatedAtFormat));

            writer.WriteString("published_at", video.PublishedAt.ToString(PublishedAtFormat));

            writer.WriteString("url", video.Url);

            writer.WriteString("thumbnail_url", video.ThumbnailUrl);

            writer.WriteString("viewable", video.Viewable);

            writer.WriteNumber("view_count", video.ViewCount);

            writer.WriteString("language", video.Language);

            var typeRawValue = Video.TypeEnumToJsonValue(video.Type);
            writer.WriteString("type", typeRawValue);
            writer.WriteString("duration", video.Duration);

            if (video.StreamId != null)
                writer.WriteString("stream_id", video.StreamId);
            else
                writer.WriteNull("stream_id");

            if (video.MutedSegments != null)
            {
                writer.WritePropertyName("muted_segments");
                JsonSerializer.Serialize(writer, video.MutedSegments, jsonSerializerOptions);
            }
            else
                writer.WriteNull("muted_segments");
        }
    }
}

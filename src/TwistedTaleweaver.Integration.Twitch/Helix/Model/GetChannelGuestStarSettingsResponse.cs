// <auto-generated>
/*
 * Twitch API Swagger UI (Unofficial)
 *
 * Unofficial Swagger UI for Twitch API.  All endpoints are generated automatically from the [twitch docs](https://dev.twitch.tv/docs/api/reference) page.  __Features:__  * Swagger UI for all Twitch API endpoints * Schemas for _Request Query Parameters_, _Request Body_, _Response Body_ * Some additional schemas like _Clip_, _ChatBadge_, _Prediction_, _Game_, _Channel_, _Video_ etc. * Response codes and examples * Generated types for TypeScript: [ts-twitch-api](https://github.com/DmitryScaletta/ts-twitch-api)  __Repository:__ [github.com/DmitryScaletta/twitch-api-swagger](https://github.com/DmitryScaletta/twitch-api-swagger)
 *
 * The version of the OpenAPI document: helix
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using TwistedTaleweaver.Integration.Twitch.Helix.Client;

namespace TwistedTaleweaver.Integration.Twitch.Helix.Model
{
    /// <summary>
    /// GetChannelGuestStarSettingsResponse
    /// </summary>
    public partial class GetChannelGuestStarSettingsResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetChannelGuestStarSettingsResponse" /> class.
        /// </summary>
        /// <param name="isModeratorSendLiveEnabled">Flag determining if Guest Star moderators have access to control whether a guest is live once assigned to a slot.</param>
        /// <param name="slotCount">Number of slots the Guest Star call interface will allow the host to add to a call. Required to be between 1 and 6.</param>
        /// <param name="isBrowserSourceAudioEnabled">Flag determining if Browser Sources subscribed to sessions on this channel should output audio</param>
        /// <param name="groupLayout">This setting determines how the guests within a session should be laid out within the browser source. Can be one of the following values:       * &#x60;TILED_LAYOUT&#x60;: All live guests are tiled within the browser source with the same size. * &#x60;SCREENSHARE_LAYOUT&#x60;: All live guests are tiled within the browser source with the same size. If there is an active screen share, it is sized larger than the other guests.</param>
        /// <param name="browserSourceToken">View only token to generate browser source URLs</param>
        [JsonConstructor]
        public GetChannelGuestStarSettingsResponse(bool isModeratorSendLiveEnabled, int slotCount, bool isBrowserSourceAudioEnabled, GroupLayoutEnum groupLayout, string browserSourceToken)
        {
            IsModeratorSendLiveEnabled = isModeratorSendLiveEnabled;
            SlotCount = slotCount;
            IsBrowserSourceAudioEnabled = isBrowserSourceAudioEnabled;
            GroupLayout = groupLayout;
            BrowserSourceToken = browserSourceToken;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// This setting determines how the guests within a session should be laid out within the browser source. Can be one of the following values:       * &#x60;TILED_LAYOUT&#x60;: All live guests are tiled within the browser source with the same size. * &#x60;SCREENSHARE_LAYOUT&#x60;: All live guests are tiled within the browser source with the same size. If there is an active screen share, it is sized larger than the other guests.
        /// </summary>
        /// <value>This setting determines how the guests within a session should be laid out within the browser source. Can be one of the following values:       * &#x60;TILED_LAYOUT&#x60;: All live guests are tiled within the browser source with the same size. * &#x60;SCREENSHARE_LAYOUT&#x60;: All live guests are tiled within the browser source with the same size. If there is an active screen share, it is sized larger than the other guests.</value>
        public enum GroupLayoutEnum
        {
            /// <summary>
            /// Enum TILEDLAYOUT for value: TILED_LAYOUT
            /// </summary>
            TILEDLAYOUT = 1,

            /// <summary>
            /// Enum SCREENSHARELAYOUT for value: SCREENSHARE_LAYOUT
            /// </summary>
            SCREENSHARELAYOUT = 2
        }

        /// <summary>
        /// Returns a <see cref="GroupLayoutEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static GroupLayoutEnum GroupLayoutEnumFromString(string value)
        {
            if (value.Equals("TILED_LAYOUT"))
                return GroupLayoutEnum.TILEDLAYOUT;

            if (value.Equals("SCREENSHARE_LAYOUT"))
                return GroupLayoutEnum.SCREENSHARELAYOUT;

            throw new NotImplementedException($"Could not convert value to type GroupLayoutEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="GroupLayoutEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static GroupLayoutEnum? GroupLayoutEnumFromStringOrDefault(string value)
        {
            if (value.Equals("TILED_LAYOUT"))
                return GroupLayoutEnum.TILEDLAYOUT;

            if (value.Equals("SCREENSHARE_LAYOUT"))
                return GroupLayoutEnum.SCREENSHARELAYOUT;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="GroupLayoutEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string GroupLayoutEnumToJsonValue(GroupLayoutEnum value)
        {
            if (value == GroupLayoutEnum.TILEDLAYOUT)
                return "TILED_LAYOUT";

            if (value == GroupLayoutEnum.SCREENSHARELAYOUT)
                return "SCREENSHARE_LAYOUT";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// This setting determines how the guests within a session should be laid out within the browser source. Can be one of the following values:       * &#x60;TILED_LAYOUT&#x60;: All live guests are tiled within the browser source with the same size. * &#x60;SCREENSHARE_LAYOUT&#x60;: All live guests are tiled within the browser source with the same size. If there is an active screen share, it is sized larger than the other guests.
        /// </summary>
        /// <value>This setting determines how the guests within a session should be laid out within the browser source. Can be one of the following values:       * &#x60;TILED_LAYOUT&#x60;: All live guests are tiled within the browser source with the same size. * &#x60;SCREENSHARE_LAYOUT&#x60;: All live guests are tiled within the browser source with the same size. If there is an active screen share, it is sized larger than the other guests.</value>
        [JsonPropertyName("group_layout")]
        public GroupLayoutEnum GroupLayout { get; set; }

        /// <summary>
        /// Flag determining if Guest Star moderators have access to control whether a guest is live once assigned to a slot.
        /// </summary>
        /// <value>Flag determining if Guest Star moderators have access to control whether a guest is live once assigned to a slot.</value>
        [JsonPropertyName("is_moderator_send_live_enabled")]
        public bool IsModeratorSendLiveEnabled { get; set; }

        /// <summary>
        /// Number of slots the Guest Star call interface will allow the host to add to a call. Required to be between 1 and 6.
        /// </summary>
        /// <value>Number of slots the Guest Star call interface will allow the host to add to a call. Required to be between 1 and 6.</value>
        [JsonPropertyName("slot_count")]
        public int SlotCount { get; set; }

        /// <summary>
        /// Flag determining if Browser Sources subscribed to sessions on this channel should output audio
        /// </summary>
        /// <value>Flag determining if Browser Sources subscribed to sessions on this channel should output audio</value>
        [JsonPropertyName("is_browser_source_audio_enabled")]
        public bool IsBrowserSourceAudioEnabled { get; set; }

        /// <summary>
        /// View only token to generate browser source URLs
        /// </summary>
        /// <value>View only token to generate browser source URLs</value>
        [JsonPropertyName("browser_source_token")]
        public string BrowserSourceToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetChannelGuestStarSettingsResponse {\n");
            sb.Append("  IsModeratorSendLiveEnabled: ").Append(IsModeratorSendLiveEnabled).Append("\n");
            sb.Append("  SlotCount: ").Append(SlotCount).Append("\n");
            sb.Append("  IsBrowserSourceAudioEnabled: ").Append(IsBrowserSourceAudioEnabled).Append("\n");
            sb.Append("  GroupLayout: ").Append(GroupLayout).Append("\n");
            sb.Append("  BrowserSourceToken: ").Append(BrowserSourceToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetChannelGuestStarSettingsResponse" />
    /// </summary>
    public class GetChannelGuestStarSettingsResponseJsonConverter : JsonConverter<GetChannelGuestStarSettingsResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetChannelGuestStarSettingsResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetChannelGuestStarSettingsResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> isModeratorSendLiveEnabled = default;
            Option<int?> slotCount = default;
            Option<bool?> isBrowserSourceAudioEnabled = default;
            Option<GetChannelGuestStarSettingsResponse.GroupLayoutEnum?> groupLayout = default;
            Option<string?> browserSourceToken = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "is_moderator_send_live_enabled":
                            isModeratorSendLiveEnabled = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "slot_count":
                            slotCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "is_browser_source_audio_enabled":
                            isBrowserSourceAudioEnabled = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "group_layout":
                            string? groupLayoutRawValue = utf8JsonReader.GetString();
                            if (groupLayoutRawValue != null)
                                groupLayout = new Option<GetChannelGuestStarSettingsResponse.GroupLayoutEnum?>(GetChannelGuestStarSettingsResponse.GroupLayoutEnumFromStringOrDefault(groupLayoutRawValue));
                            break;
                        case "browser_source_token":
                            browserSourceToken = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!isModeratorSendLiveEnabled.IsSet)
                throw new ArgumentException("Property is required for class GetChannelGuestStarSettingsResponse.", nameof(isModeratorSendLiveEnabled));

            if (!slotCount.IsSet)
                throw new ArgumentException("Property is required for class GetChannelGuestStarSettingsResponse.", nameof(slotCount));

            if (!isBrowserSourceAudioEnabled.IsSet)
                throw new ArgumentException("Property is required for class GetChannelGuestStarSettingsResponse.", nameof(isBrowserSourceAudioEnabled));

            if (!groupLayout.IsSet)
                throw new ArgumentException("Property is required for class GetChannelGuestStarSettingsResponse.", nameof(groupLayout));

            if (!browserSourceToken.IsSet)
                throw new ArgumentException("Property is required for class GetChannelGuestStarSettingsResponse.", nameof(browserSourceToken));

            if (isModeratorSendLiveEnabled.IsSet && isModeratorSendLiveEnabled.Value == null)
                throw new ArgumentNullException(nameof(isModeratorSendLiveEnabled), "Property is not nullable for class GetChannelGuestStarSettingsResponse.");

            if (slotCount.IsSet && slotCount.Value == null)
                throw new ArgumentNullException(nameof(slotCount), "Property is not nullable for class GetChannelGuestStarSettingsResponse.");

            if (isBrowserSourceAudioEnabled.IsSet && isBrowserSourceAudioEnabled.Value == null)
                throw new ArgumentNullException(nameof(isBrowserSourceAudioEnabled), "Property is not nullable for class GetChannelGuestStarSettingsResponse.");

            if (groupLayout.IsSet && groupLayout.Value == null)
                throw new ArgumentNullException(nameof(groupLayout), "Property is not nullable for class GetChannelGuestStarSettingsResponse.");

            if (browserSourceToken.IsSet && browserSourceToken.Value == null)
                throw new ArgumentNullException(nameof(browserSourceToken), "Property is not nullable for class GetChannelGuestStarSettingsResponse.");

            return new GetChannelGuestStarSettingsResponse(isModeratorSendLiveEnabled.Value!.Value!, slotCount.Value!.Value!, isBrowserSourceAudioEnabled.Value!.Value!, groupLayout.Value!.Value!, browserSourceToken.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="GetChannelGuestStarSettingsResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getChannelGuestStarSettingsResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetChannelGuestStarSettingsResponse getChannelGuestStarSettingsResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getChannelGuestStarSettingsResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetChannelGuestStarSettingsResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getChannelGuestStarSettingsResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetChannelGuestStarSettingsResponse getChannelGuestStarSettingsResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getChannelGuestStarSettingsResponse.BrowserSourceToken == null)
                throw new ArgumentNullException(nameof(getChannelGuestStarSettingsResponse.BrowserSourceToken), "Property is required for class GetChannelGuestStarSettingsResponse.");

            writer.WriteBoolean("is_moderator_send_live_enabled", getChannelGuestStarSettingsResponse.IsModeratorSendLiveEnabled);

            writer.WriteNumber("slot_count", getChannelGuestStarSettingsResponse.SlotCount);

            writer.WriteBoolean("is_browser_source_audio_enabled", getChannelGuestStarSettingsResponse.IsBrowserSourceAudioEnabled);

            var groupLayoutRawValue = GetChannelGuestStarSettingsResponse.GroupLayoutEnumToJsonValue(getChannelGuestStarSettingsResponse.GroupLayout);
            writer.WriteString("group_layout", groupLayoutRawValue);
            writer.WriteString("browser_source_token", getChannelGuestStarSettingsResponse.BrowserSourceToken);
        }
    }
}

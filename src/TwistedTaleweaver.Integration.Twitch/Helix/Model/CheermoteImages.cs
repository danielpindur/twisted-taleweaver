// <auto-generated>
/*
 * Twitch API Swagger UI (Unofficial)
 *
 * Unofficial Swagger UI for Twitch API.  All endpoints are generated automatically from the [twitch docs](https://dev.twitch.tv/docs/api/reference) page.  __Features:__  * Swagger UI for all Twitch API endpoints * Schemas for _Request Query Parameters_, _Request Body_, _Response Body_ * Some additional schemas like _Clip_, _ChatBadge_, _Prediction_, _Game_, _Channel_, _Video_ etc. * Response codes and examples * Generated types for TypeScript: [ts-twitch-api](https://github.com/DmitryScaletta/ts-twitch-api)  __Repository:__ [github.com/DmitryScaletta/twitch-api-swagger](https://github.com/DmitryScaletta/twitch-api-swagger)
 *
 * The version of the OpenAPI document: helix
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using TwistedTaleweaver.Integration.Twitch.Helix.Client;

namespace TwistedTaleweaver.Integration.Twitch.Helix.Model
{
    /// <summary>
    /// CheermoteImages
    /// </summary>
    public partial class CheermoteImages : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CheermoteImages" /> class.
        /// </summary>
        /// <param name="light">light</param>
        /// <param name="dark">dark</param>
        [JsonConstructor]
        public CheermoteImages(Option<CheermoteImageTheme?> light = default, Option<CheermoteImageTheme?> dark = default)
        {
            LightOption = light;
            DarkOption = dark;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Light
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<CheermoteImageTheme?> LightOption { get; private set; }

        /// <summary>
        /// Gets or Sets Light
        /// </summary>
        [JsonPropertyName("light")]
        public CheermoteImageTheme? Light { get { return this.LightOption; } set { this.LightOption = new(value); } }

        /// <summary>
        /// Used to track the state of Dark
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<CheermoteImageTheme?> DarkOption { get; private set; }

        /// <summary>
        /// Gets or Sets Dark
        /// </summary>
        [JsonPropertyName("dark")]
        public CheermoteImageTheme? Dark { get { return this.DarkOption; } set { this.DarkOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CheermoteImages {\n");
            sb.Append("  Light: ").Append(Light).Append("\n");
            sb.Append("  Dark: ").Append(Dark).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CheermoteImages" />
    /// </summary>
    public class CheermoteImagesJsonConverter : JsonConverter<CheermoteImages>
    {
        /// <summary>
        /// Deserializes json to <see cref="CheermoteImages" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CheermoteImages Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<CheermoteImageTheme?> light = default;
            Option<CheermoteImageTheme?> dark = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "light":
                            light = new Option<CheermoteImageTheme?>(JsonSerializer.Deserialize<CheermoteImageTheme>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "dark":
                            dark = new Option<CheermoteImageTheme?>(JsonSerializer.Deserialize<CheermoteImageTheme>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (light.IsSet && light.Value == null)
                throw new ArgumentNullException(nameof(light), "Property is not nullable for class CheermoteImages.");

            if (dark.IsSet && dark.Value == null)
                throw new ArgumentNullException(nameof(dark), "Property is not nullable for class CheermoteImages.");

            return new CheermoteImages(light, dark);
        }

        /// <summary>
        /// Serializes a <see cref="CheermoteImages" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="cheermoteImages"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CheermoteImages cheermoteImages, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, cheermoteImages, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CheermoteImages" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="cheermoteImages"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CheermoteImages cheermoteImages, JsonSerializerOptions jsonSerializerOptions)
        {
            if (cheermoteImages.LightOption.IsSet && cheermoteImages.Light == null)
                throw new ArgumentNullException(nameof(cheermoteImages.Light), "Property is required for class CheermoteImages.");

            if (cheermoteImages.DarkOption.IsSet && cheermoteImages.Dark == null)
                throw new ArgumentNullException(nameof(cheermoteImages.Dark), "Property is required for class CheermoteImages.");

            if (cheermoteImages.LightOption.IsSet)
            {
                writer.WritePropertyName("light");
                JsonSerializer.Serialize(writer, cheermoteImages.Light, jsonSerializerOptions);
            }
            if (cheermoteImages.DarkOption.IsSet)
            {
                writer.WritePropertyName("dark");
                JsonSerializer.Serialize(writer, cheermoteImages.Dark, jsonSerializerOptions);
            }
        }
    }
}

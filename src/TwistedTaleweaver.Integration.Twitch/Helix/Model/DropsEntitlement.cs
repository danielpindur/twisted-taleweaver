// <auto-generated>
/*
 * Twitch API Swagger UI (Unofficial)
 *
 * Unofficial Swagger UI for Twitch API.  All endpoints are generated automatically from the [twitch docs](https://dev.twitch.tv/docs/api/reference) page.  __Features:__  * Swagger UI for all Twitch API endpoints * Schemas for _Request Query Parameters_, _Request Body_, _Response Body_ * Some additional schemas like _Clip_, _ChatBadge_, _Prediction_, _Game_, _Channel_, _Video_ etc. * Response codes and examples * Generated types for TypeScript: [ts-twitch-api](https://github.com/DmitryScaletta/ts-twitch-api)  __Repository:__ [github.com/DmitryScaletta/twitch-api-swagger](https://github.com/DmitryScaletta/twitch-api-swagger)
 *
 * The version of the OpenAPI document: helix
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using TwistedTaleweaver.Integration.Twitch.Helix.Client;

namespace TwistedTaleweaver.Integration.Twitch.Helix.Model
{
    /// <summary>
    /// DropsEntitlement
    /// </summary>
    public partial class DropsEntitlement : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DropsEntitlement" /> class.
        /// </summary>
        /// <param name="id">An ID that identifies the entitlement.</param>
        /// <param name="benefitId">An ID that identifies the benefit (reward).</param>
        /// <param name="timestamp">The UTC date and time (in RFC3339 format) of when the entitlement was granted.</param>
        /// <param name="userId">An ID that identifies the user who was granted the entitlement.</param>
        /// <param name="gameId">An ID that identifies the game the user was playing when the reward was entitled.</param>
        /// <param name="fulfillmentStatus">The entitlement’s fulfillment status. Possible values are:       * CLAIMED * FULFILLED</param>
        /// <param name="lastUpdated">The UTC date and time (in RFC3339 format) of when the entitlement was last updated.</param>
        [JsonConstructor]
        public DropsEntitlement(string id, string benefitId, DateTime timestamp, string userId, string gameId, FulfillmentStatusEnum fulfillmentStatus, DateTime lastUpdated)
        {
            Id = id;
            BenefitId = benefitId;
            Timestamp = timestamp;
            UserId = userId;
            GameId = gameId;
            FulfillmentStatus = fulfillmentStatus;
            LastUpdated = lastUpdated;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The entitlement’s fulfillment status. Possible values are:       * CLAIMED * FULFILLED
        /// </summary>
        /// <value>The entitlement’s fulfillment status. Possible values are:       * CLAIMED * FULFILLED</value>
        public enum FulfillmentStatusEnum
        {
            /// <summary>
            /// Enum CLAIMED for value: CLAIMED
            /// </summary>
            CLAIMED = 1,

            /// <summary>
            /// Enum FULFILLED for value: FULFILLED
            /// </summary>
            FULFILLED = 2
        }

        /// <summary>
        /// Returns a <see cref="FulfillmentStatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static FulfillmentStatusEnum FulfillmentStatusEnumFromString(string value)
        {
            if (value.Equals("CLAIMED"))
                return FulfillmentStatusEnum.CLAIMED;

            if (value.Equals("FULFILLED"))
                return FulfillmentStatusEnum.FULFILLED;

            throw new NotImplementedException($"Could not convert value to type FulfillmentStatusEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="FulfillmentStatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static FulfillmentStatusEnum? FulfillmentStatusEnumFromStringOrDefault(string value)
        {
            if (value.Equals("CLAIMED"))
                return FulfillmentStatusEnum.CLAIMED;

            if (value.Equals("FULFILLED"))
                return FulfillmentStatusEnum.FULFILLED;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="FulfillmentStatusEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string FulfillmentStatusEnumToJsonValue(FulfillmentStatusEnum value)
        {
            if (value == FulfillmentStatusEnum.CLAIMED)
                return "CLAIMED";

            if (value == FulfillmentStatusEnum.FULFILLED)
                return "FULFILLED";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// The entitlement’s fulfillment status. Possible values are:       * CLAIMED * FULFILLED
        /// </summary>
        /// <value>The entitlement’s fulfillment status. Possible values are:       * CLAIMED * FULFILLED</value>
        [JsonPropertyName("fulfillment_status")]
        public FulfillmentStatusEnum FulfillmentStatus { get; set; }

        /// <summary>
        /// An ID that identifies the entitlement.
        /// </summary>
        /// <value>An ID that identifies the entitlement.</value>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// An ID that identifies the benefit (reward).
        /// </summary>
        /// <value>An ID that identifies the benefit (reward).</value>
        [JsonPropertyName("benefit_id")]
        public string BenefitId { get; set; }

        /// <summary>
        /// The UTC date and time (in RFC3339 format) of when the entitlement was granted.
        /// </summary>
        /// <value>The UTC date and time (in RFC3339 format) of when the entitlement was granted.</value>
        [JsonPropertyName("timestamp")]
        public DateTime Timestamp { get; set; }

        /// <summary>
        /// An ID that identifies the user who was granted the entitlement.
        /// </summary>
        /// <value>An ID that identifies the user who was granted the entitlement.</value>
        [JsonPropertyName("user_id")]
        public string UserId { get; set; }

        /// <summary>
        /// An ID that identifies the game the user was playing when the reward was entitled.
        /// </summary>
        /// <value>An ID that identifies the game the user was playing when the reward was entitled.</value>
        [JsonPropertyName("game_id")]
        public string GameId { get; set; }

        /// <summary>
        /// The UTC date and time (in RFC3339 format) of when the entitlement was last updated.
        /// </summary>
        /// <value>The UTC date and time (in RFC3339 format) of when the entitlement was last updated.</value>
        [JsonPropertyName("last_updated")]
        public DateTime LastUpdated { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DropsEntitlement {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  BenefitId: ").Append(BenefitId).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  GameId: ").Append(GameId).Append("\n");
            sb.Append("  FulfillmentStatus: ").Append(FulfillmentStatus).Append("\n");
            sb.Append("  LastUpdated: ").Append(LastUpdated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DropsEntitlement" />
    /// </summary>
    public class DropsEntitlementJsonConverter : JsonConverter<DropsEntitlement>
    {
        /// <summary>
        /// The format to use to serialize Timestamp
        /// </summary>
        public static string TimestampFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize LastUpdated
        /// </summary>
        public static string LastUpdatedFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="DropsEntitlement" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DropsEntitlement Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> benefitId = default;
            Option<DateTime?> timestamp = default;
            Option<string?> userId = default;
            Option<string?> gameId = default;
            Option<DropsEntitlement.FulfillmentStatusEnum?> fulfillmentStatus = default;
            Option<DateTime?> lastUpdated = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "benefit_id":
                            benefitId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "timestamp":
                            timestamp = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "user_id":
                            userId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "game_id":
                            gameId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "fulfillment_status":
                            string? fulfillmentStatusRawValue = utf8JsonReader.GetString();
                            if (fulfillmentStatusRawValue != null)
                                fulfillmentStatus = new Option<DropsEntitlement.FulfillmentStatusEnum?>(DropsEntitlement.FulfillmentStatusEnumFromStringOrDefault(fulfillmentStatusRawValue));
                            break;
                        case "last_updated":
                            lastUpdated = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class DropsEntitlement.", nameof(id));

            if (!benefitId.IsSet)
                throw new ArgumentException("Property is required for class DropsEntitlement.", nameof(benefitId));

            if (!timestamp.IsSet)
                throw new ArgumentException("Property is required for class DropsEntitlement.", nameof(timestamp));

            if (!userId.IsSet)
                throw new ArgumentException("Property is required for class DropsEntitlement.", nameof(userId));

            if (!gameId.IsSet)
                throw new ArgumentException("Property is required for class DropsEntitlement.", nameof(gameId));

            if (!fulfillmentStatus.IsSet)
                throw new ArgumentException("Property is required for class DropsEntitlement.", nameof(fulfillmentStatus));

            if (!lastUpdated.IsSet)
                throw new ArgumentException("Property is required for class DropsEntitlement.", nameof(lastUpdated));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class DropsEntitlement.");

            if (benefitId.IsSet && benefitId.Value == null)
                throw new ArgumentNullException(nameof(benefitId), "Property is not nullable for class DropsEntitlement.");

            if (timestamp.IsSet && timestamp.Value == null)
                throw new ArgumentNullException(nameof(timestamp), "Property is not nullable for class DropsEntitlement.");

            if (userId.IsSet && userId.Value == null)
                throw new ArgumentNullException(nameof(userId), "Property is not nullable for class DropsEntitlement.");

            if (gameId.IsSet && gameId.Value == null)
                throw new ArgumentNullException(nameof(gameId), "Property is not nullable for class DropsEntitlement.");

            if (fulfillmentStatus.IsSet && fulfillmentStatus.Value == null)
                throw new ArgumentNullException(nameof(fulfillmentStatus), "Property is not nullable for class DropsEntitlement.");

            if (lastUpdated.IsSet && lastUpdated.Value == null)
                throw new ArgumentNullException(nameof(lastUpdated), "Property is not nullable for class DropsEntitlement.");

            return new DropsEntitlement(id.Value!, benefitId.Value!, timestamp.Value!.Value!, userId.Value!, gameId.Value!, fulfillmentStatus.Value!.Value!, lastUpdated.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="DropsEntitlement" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dropsEntitlement"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DropsEntitlement dropsEntitlement, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dropsEntitlement, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DropsEntitlement" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dropsEntitlement"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DropsEntitlement dropsEntitlement, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dropsEntitlement.Id == null)
                throw new ArgumentNullException(nameof(dropsEntitlement.Id), "Property is required for class DropsEntitlement.");

            if (dropsEntitlement.BenefitId == null)
                throw new ArgumentNullException(nameof(dropsEntitlement.BenefitId), "Property is required for class DropsEntitlement.");

            if (dropsEntitlement.UserId == null)
                throw new ArgumentNullException(nameof(dropsEntitlement.UserId), "Property is required for class DropsEntitlement.");

            if (dropsEntitlement.GameId == null)
                throw new ArgumentNullException(nameof(dropsEntitlement.GameId), "Property is required for class DropsEntitlement.");

            writer.WriteString("id", dropsEntitlement.Id);

            writer.WriteString("benefit_id", dropsEntitlement.BenefitId);

            writer.WriteString("timestamp", dropsEntitlement.Timestamp.ToString(TimestampFormat));

            writer.WriteString("user_id", dropsEntitlement.UserId);

            writer.WriteString("game_id", dropsEntitlement.GameId);

            var fulfillmentStatusRawValue = DropsEntitlement.FulfillmentStatusEnumToJsonValue(dropsEntitlement.FulfillmentStatus);
            writer.WriteString("fulfillment_status", fulfillmentStatusRawValue);
            writer.WriteString("last_updated", dropsEntitlement.LastUpdated.ToString(LastUpdatedFormat));
        }
    }
}

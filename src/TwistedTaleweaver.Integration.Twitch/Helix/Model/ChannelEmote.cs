// <auto-generated>
/*
 * Twitch API Swagger UI (Unofficial)
 *
 * Unofficial Swagger UI for Twitch API.  All endpoints are generated automatically from the [twitch docs](https://dev.twitch.tv/docs/api/reference) page.  __Features:__  * Swagger UI for all Twitch API endpoints * Schemas for _Request Query Parameters_, _Request Body_, _Response Body_ * Some additional schemas like _Clip_, _ChatBadge_, _Prediction_, _Game_, _Channel_, _Video_ etc. * Response codes and examples * Generated types for TypeScript: [ts-twitch-api](https://github.com/DmitryScaletta/ts-twitch-api)  __Repository:__ [github.com/DmitryScaletta/twitch-api-swagger](https://github.com/DmitryScaletta/twitch-api-swagger)
 *
 * The version of the OpenAPI document: helix
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using TwistedTaleweaver.Integration.Twitch.Helix.Client;

namespace TwistedTaleweaver.Integration.Twitch.Helix.Model
{
    /// <summary>
    /// ChannelEmote
    /// </summary>
    public partial class ChannelEmote : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelEmote" /> class.
        /// </summary>
        /// <param name="id">An ID that identifies this emote.</param>
        /// <param name="name">The name of the emote. This is the name that viewers type in the chat window to get the emote to appear.</param>
        /// <param name="images">images</param>
        /// <param name="tier">The subscriber tier at which the emote is unlocked. This field contains the tier information only if &#x60;emote_type&#x60; is set to &#x60;subscriptions&#x60;, otherwise, it&#39;s an empty string.</param>
        /// <param name="emoteType">The type of emote. The possible values are:      * bitstier — A custom Bits tier emote. * follower — A custom follower emote. * subscriptions — A custom subscriber emote.</param>
        /// <param name="emoteSetId">An ID that identifies the emote set that the emote belongs to.</param>
        /// <param name="format">The formats that the emote is available in. For example, if the emote is available only as a static PNG, the array contains only &#x60;static&#x60;. But if the emote is available as a static PNG and an animated GIF, the array contains &#x60;static&#x60; and &#x60;animated&#x60;. The possible formats are:      * animated — An animated GIF is available for this emote. * static — A static PNG file is available for this emote.</param>
        /// <param name="scale">The sizes that the emote is available in. For example, if the emote is available in small and medium sizes, the array contains 1.0 and 2.0\\. Possible sizes are:      * 1.0 — A small version (28px x 28px) is available. * 2.0 — A medium version (56px x 56px) is available. * 3.0 — A large version (112px x 112px) is available.</param>
        /// <param name="themeMode">The background themes that the emote is available in. Possible themes are:      * dark * light</param>
        [JsonConstructor]
        public ChannelEmote(string id, string name, ChannelEmoteImages images, string tier, EmoteTypeEnum emoteType, string emoteSetId, List<ChannelEmote.FormatEnum> format, List<ChannelEmote.ScaleEnum> scale, List<ChannelEmote.ThemeModeEnum> themeMode)
        {
            Id = id;
            Name = name;
            Images = images;
            Tier = tier;
            EmoteType = emoteType;
            EmoteSetId = emoteSetId;
            Format = format;
            Scale = scale;
            ThemeMode = themeMode;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The type of emote. The possible values are:      * bitstier — A custom Bits tier emote. * follower — A custom follower emote. * subscriptions — A custom subscriber emote.
        /// </summary>
        /// <value>The type of emote. The possible values are:      * bitstier — A custom Bits tier emote. * follower — A custom follower emote. * subscriptions — A custom subscriber emote.</value>
        public enum EmoteTypeEnum
        {
            /// <summary>
            /// Enum Bitstier for value: bitstier
            /// </summary>
            Bitstier = 1,

            /// <summary>
            /// Enum Follower for value: follower
            /// </summary>
            Follower = 2,

            /// <summary>
            /// Enum Subscriptions for value: subscriptions
            /// </summary>
            Subscriptions = 3
        }

        /// <summary>
        /// Returns a <see cref="EmoteTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static EmoteTypeEnum EmoteTypeEnumFromString(string value)
        {
            if (value.Equals("bitstier"))
                return EmoteTypeEnum.Bitstier;

            if (value.Equals("follower"))
                return EmoteTypeEnum.Follower;

            if (value.Equals("subscriptions"))
                return EmoteTypeEnum.Subscriptions;

            throw new NotImplementedException($"Could not convert value to type EmoteTypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="EmoteTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static EmoteTypeEnum? EmoteTypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("bitstier"))
                return EmoteTypeEnum.Bitstier;

            if (value.Equals("follower"))
                return EmoteTypeEnum.Follower;

            if (value.Equals("subscriptions"))
                return EmoteTypeEnum.Subscriptions;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="EmoteTypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string EmoteTypeEnumToJsonValue(EmoteTypeEnum value)
        {
            if (value == EmoteTypeEnum.Bitstier)
                return "bitstier";

            if (value == EmoteTypeEnum.Follower)
                return "follower";

            if (value == EmoteTypeEnum.Subscriptions)
                return "subscriptions";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// The type of emote. The possible values are:      * bitstier — A custom Bits tier emote. * follower — A custom follower emote. * subscriptions — A custom subscriber emote.
        /// </summary>
        /// <value>The type of emote. The possible values are:      * bitstier — A custom Bits tier emote. * follower — A custom follower emote. * subscriptions — A custom subscriber emote.</value>
        [JsonPropertyName("emote_type")]
        public EmoteTypeEnum EmoteType { get; set; }

        /// <summary>
        /// Defines Format
        /// </summary>
        public enum FormatEnum
        {
            /// <summary>
            /// Enum Animated for value: animated
            /// </summary>
            Animated = 1,

            /// <summary>
            /// Enum Static for value: static
            /// </summary>
            Static = 2
        }

        /// <summary>
        /// Returns a <see cref="FormatEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static FormatEnum FormatEnumFromString(string value)
        {
            if (value.Equals("animated"))
                return FormatEnum.Animated;

            if (value.Equals("static"))
                return FormatEnum.Static;

            throw new NotImplementedException($"Could not convert value to type FormatEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="FormatEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static FormatEnum? FormatEnumFromStringOrDefault(string value)
        {
            if (value.Equals("animated"))
                return FormatEnum.Animated;

            if (value.Equals("static"))
                return FormatEnum.Static;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="FormatEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string FormatEnumToJsonValue(FormatEnum? value)
        {
            if (value == FormatEnum.Animated)
                return "animated";

            if (value == FormatEnum.Static)
                return "static";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Defines Scale
        /// </summary>
        public enum ScaleEnum
        {
            /// <summary>
            /// Enum _10 for value: 1.0
            /// </summary>
            _10 = 1,

            /// <summary>
            /// Enum _20 for value: 2.0
            /// </summary>
            _20 = 2,

            /// <summary>
            /// Enum _30 for value: 3.0
            /// </summary>
            _30 = 3
        }

        /// <summary>
        /// Returns a <see cref="ScaleEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ScaleEnum ScaleEnumFromString(string value)
        {
            if (value.Equals("1.0"))
                return ScaleEnum._10;

            if (value.Equals("2.0"))
                return ScaleEnum._20;

            if (value.Equals("3.0"))
                return ScaleEnum._30;

            throw new NotImplementedException($"Could not convert value to type ScaleEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ScaleEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ScaleEnum? ScaleEnumFromStringOrDefault(string value)
        {
            if (value.Equals("1.0"))
                return ScaleEnum._10;

            if (value.Equals("2.0"))
                return ScaleEnum._20;

            if (value.Equals("3.0"))
                return ScaleEnum._30;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ScaleEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ScaleEnumToJsonValue(ScaleEnum? value)
        {
            if (value == ScaleEnum._10)
                return "1.0";

            if (value == ScaleEnum._20)
                return "2.0";

            if (value == ScaleEnum._30)
                return "3.0";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Defines ThemeMode
        /// </summary>
        public enum ThemeModeEnum
        {
            /// <summary>
            /// Enum Dark for value: dark
            /// </summary>
            Dark = 1,

            /// <summary>
            /// Enum Light for value: light
            /// </summary>
            Light = 2
        }

        /// <summary>
        /// Returns a <see cref="ThemeModeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ThemeModeEnum ThemeModeEnumFromString(string value)
        {
            if (value.Equals("dark"))
                return ThemeModeEnum.Dark;

            if (value.Equals("light"))
                return ThemeModeEnum.Light;

            throw new NotImplementedException($"Could not convert value to type ThemeModeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ThemeModeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ThemeModeEnum? ThemeModeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("dark"))
                return ThemeModeEnum.Dark;

            if (value.Equals("light"))
                return ThemeModeEnum.Light;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ThemeModeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ThemeModeEnumToJsonValue(ThemeModeEnum? value)
        {
            if (value == ThemeModeEnum.Dark)
                return "dark";

            if (value == ThemeModeEnum.Light)
                return "light";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// An ID that identifies this emote.
        /// </summary>
        /// <value>An ID that identifies this emote.</value>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// The name of the emote. This is the name that viewers type in the chat window to get the emote to appear.
        /// </summary>
        /// <value>The name of the emote. This is the name that viewers type in the chat window to get the emote to appear.</value>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Images
        /// </summary>
        [JsonPropertyName("images")]
        public ChannelEmoteImages Images { get; set; }

        /// <summary>
        /// The subscriber tier at which the emote is unlocked. This field contains the tier information only if &#x60;emote_type&#x60; is set to &#x60;subscriptions&#x60;, otherwise, it&#39;s an empty string.
        /// </summary>
        /// <value>The subscriber tier at which the emote is unlocked. This field contains the tier information only if &#x60;emote_type&#x60; is set to &#x60;subscriptions&#x60;, otherwise, it&#39;s an empty string.</value>
        [JsonPropertyName("tier")]
        public string Tier { get; set; }

        /// <summary>
        /// An ID that identifies the emote set that the emote belongs to.
        /// </summary>
        /// <value>An ID that identifies the emote set that the emote belongs to.</value>
        [JsonPropertyName("emote_set_id")]
        public string EmoteSetId { get; set; }

        /// <summary>
        /// The formats that the emote is available in. For example, if the emote is available only as a static PNG, the array contains only &#x60;static&#x60;. But if the emote is available as a static PNG and an animated GIF, the array contains &#x60;static&#x60; and &#x60;animated&#x60;. The possible formats are:      * animated — An animated GIF is available for this emote. * static — A static PNG file is available for this emote.
        /// </summary>
        /// <value>The formats that the emote is available in. For example, if the emote is available only as a static PNG, the array contains only &#x60;static&#x60;. But if the emote is available as a static PNG and an animated GIF, the array contains &#x60;static&#x60; and &#x60;animated&#x60;. The possible formats are:      * animated — An animated GIF is available for this emote. * static — A static PNG file is available for this emote.</value>
        [JsonPropertyName("format")]
        public List<ChannelEmote.FormatEnum> Format { get; set; }

        /// <summary>
        /// The sizes that the emote is available in. For example, if the emote is available in small and medium sizes, the array contains 1.0 and 2.0\\. Possible sizes are:      * 1.0 — A small version (28px x 28px) is available. * 2.0 — A medium version (56px x 56px) is available. * 3.0 — A large version (112px x 112px) is available.
        /// </summary>
        /// <value>The sizes that the emote is available in. For example, if the emote is available in small and medium sizes, the array contains 1.0 and 2.0\\. Possible sizes are:      * 1.0 — A small version (28px x 28px) is available. * 2.0 — A medium version (56px x 56px) is available. * 3.0 — A large version (112px x 112px) is available.</value>
        [JsonPropertyName("scale")]
        public List<ChannelEmote.ScaleEnum> Scale { get; set; }

        /// <summary>
        /// The background themes that the emote is available in. Possible themes are:      * dark * light
        /// </summary>
        /// <value>The background themes that the emote is available in. Possible themes are:      * dark * light</value>
        [JsonPropertyName("theme_mode")]
        public List<ChannelEmote.ThemeModeEnum> ThemeMode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ChannelEmote {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Images: ").Append(Images).Append("\n");
            sb.Append("  Tier: ").Append(Tier).Append("\n");
            sb.Append("  EmoteType: ").Append(EmoteType).Append("\n");
            sb.Append("  EmoteSetId: ").Append(EmoteSetId).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  Scale: ").Append(Scale).Append("\n");
            sb.Append("  ThemeMode: ").Append(ThemeMode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ChannelEmote" />
    /// </summary>
    public class ChannelEmoteJsonConverter : JsonConverter<ChannelEmote>
    {
        /// <summary>
        /// Deserializes json to <see cref="ChannelEmote" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ChannelEmote Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> name = default;
            Option<ChannelEmoteImages?> images = default;
            Option<string?> tier = default;
            Option<ChannelEmote.EmoteTypeEnum?> emoteType = default;
            Option<string?> emoteSetId = default;
            Option<List<ChannelEmote.FormatEnum>?> format = default;
            Option<List<ChannelEmote.ScaleEnum>?> scale = default;
            Option<List<ChannelEmote.ThemeModeEnum>?> themeMode = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "images":
                            images = new Option<ChannelEmoteImages?>(JsonSerializer.Deserialize<ChannelEmoteImages>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "tier":
                            tier = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "emote_type":
                            string? emoteTypeRawValue = utf8JsonReader.GetString();
                            if (emoteTypeRawValue != null)
                                emoteType = new Option<ChannelEmote.EmoteTypeEnum?>(ChannelEmote.EmoteTypeEnumFromStringOrDefault(emoteTypeRawValue));
                            break;
                        case "emote_set_id":
                            emoteSetId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "format":
                            format = new Option<List<ChannelEmote.FormatEnum>?>(JsonSerializer.Deserialize<List<ChannelEmote.FormatEnum>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "scale":
                            scale = new Option<List<ChannelEmote.ScaleEnum>?>(JsonSerializer.Deserialize<List<ChannelEmote.ScaleEnum>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "theme_mode":
                            themeMode = new Option<List<ChannelEmote.ThemeModeEnum>?>(JsonSerializer.Deserialize<List<ChannelEmote.ThemeModeEnum>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class ChannelEmote.", nameof(id));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class ChannelEmote.", nameof(name));

            if (!images.IsSet)
                throw new ArgumentException("Property is required for class ChannelEmote.", nameof(images));

            if (!tier.IsSet)
                throw new ArgumentException("Property is required for class ChannelEmote.", nameof(tier));

            if (!emoteType.IsSet)
                throw new ArgumentException("Property is required for class ChannelEmote.", nameof(emoteType));

            if (!emoteSetId.IsSet)
                throw new ArgumentException("Property is required for class ChannelEmote.", nameof(emoteSetId));

            if (!format.IsSet)
                throw new ArgumentException("Property is required for class ChannelEmote.", nameof(format));

            if (!scale.IsSet)
                throw new ArgumentException("Property is required for class ChannelEmote.", nameof(scale));

            if (!themeMode.IsSet)
                throw new ArgumentException("Property is required for class ChannelEmote.", nameof(themeMode));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class ChannelEmote.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class ChannelEmote.");

            if (images.IsSet && images.Value == null)
                throw new ArgumentNullException(nameof(images), "Property is not nullable for class ChannelEmote.");

            if (tier.IsSet && tier.Value == null)
                throw new ArgumentNullException(nameof(tier), "Property is not nullable for class ChannelEmote.");

            if (emoteType.IsSet && emoteType.Value == null)
                throw new ArgumentNullException(nameof(emoteType), "Property is not nullable for class ChannelEmote.");

            if (emoteSetId.IsSet && emoteSetId.Value == null)
                throw new ArgumentNullException(nameof(emoteSetId), "Property is not nullable for class ChannelEmote.");

            if (format.IsSet && format.Value == null)
                throw new ArgumentNullException(nameof(format), "Property is not nullable for class ChannelEmote.");

            if (scale.IsSet && scale.Value == null)
                throw new ArgumentNullException(nameof(scale), "Property is not nullable for class ChannelEmote.");

            if (themeMode.IsSet && themeMode.Value == null)
                throw new ArgumentNullException(nameof(themeMode), "Property is not nullable for class ChannelEmote.");

            return new ChannelEmote(id.Value!, name.Value!, images.Value!, tier.Value!, emoteType.Value!.Value!, emoteSetId.Value!, format.Value!, scale.Value!, themeMode.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="ChannelEmote" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="channelEmote"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ChannelEmote channelEmote, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, channelEmote, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ChannelEmote" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="channelEmote"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ChannelEmote channelEmote, JsonSerializerOptions jsonSerializerOptions)
        {
            if (channelEmote.Id == null)
                throw new ArgumentNullException(nameof(channelEmote.Id), "Property is required for class ChannelEmote.");

            if (channelEmote.Name == null)
                throw new ArgumentNullException(nameof(channelEmote.Name), "Property is required for class ChannelEmote.");

            if (channelEmote.Images == null)
                throw new ArgumentNullException(nameof(channelEmote.Images), "Property is required for class ChannelEmote.");

            if (channelEmote.Tier == null)
                throw new ArgumentNullException(nameof(channelEmote.Tier), "Property is required for class ChannelEmote.");

            if (channelEmote.EmoteSetId == null)
                throw new ArgumentNullException(nameof(channelEmote.EmoteSetId), "Property is required for class ChannelEmote.");

            if (channelEmote.Format == null)
                throw new ArgumentNullException(nameof(channelEmote.Format), "Property is required for class ChannelEmote.");

            if (channelEmote.Scale == null)
                throw new ArgumentNullException(nameof(channelEmote.Scale), "Property is required for class ChannelEmote.");

            if (channelEmote.ThemeMode == null)
                throw new ArgumentNullException(nameof(channelEmote.ThemeMode), "Property is required for class ChannelEmote.");

            writer.WriteString("id", channelEmote.Id);

            writer.WriteString("name", channelEmote.Name);

            writer.WritePropertyName("images");
            JsonSerializer.Serialize(writer, channelEmote.Images, jsonSerializerOptions);
            writer.WriteString("tier", channelEmote.Tier);

            var emoteTypeRawValue = ChannelEmote.EmoteTypeEnumToJsonValue(channelEmote.EmoteType);
            writer.WriteString("emote_type", emoteTypeRawValue);
            writer.WriteString("emote_set_id", channelEmote.EmoteSetId);

            writer.WritePropertyName("format");
            JsonSerializer.Serialize(writer, channelEmote.Format, jsonSerializerOptions);
            writer.WritePropertyName("scale");
            JsonSerializer.Serialize(writer, channelEmote.Scale, jsonSerializerOptions);
            writer.WritePropertyName("theme_mode");
            JsonSerializer.Serialize(writer, channelEmote.ThemeMode, jsonSerializerOptions);
        }
    }
}

// <auto-generated>
/*
 * Twitch API Swagger UI (Unofficial)
 *
 * Unofficial Swagger UI for Twitch API.  All endpoints are generated automatically from the [twitch docs](https://dev.twitch.tv/docs/api/reference) page.  __Features:__  * Swagger UI for all Twitch API endpoints * Schemas for _Request Query Parameters_, _Request Body_, _Response Body_ * Some additional schemas like _Clip_, _ChatBadge_, _Prediction_, _Game_, _Channel_, _Video_ etc. * Response codes and examples * Generated types for TypeScript: [ts-twitch-api](https://github.com/DmitryScaletta/ts-twitch-api)  __Repository:__ [github.com/DmitryScaletta/twitch-api-swagger](https://github.com/DmitryScaletta/twitch-api-swagger)
 *
 * The version of the OpenAPI document: helix
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using TwistedTaleweaver.Integration.Twitch.Helix.Client;

namespace TwistedTaleweaver.Integration.Twitch.Helix.Model
{
    /// <summary>
    /// PredictionOutcome
    /// </summary>
    public partial class PredictionOutcome : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PredictionOutcome" /> class.
        /// </summary>
        /// <param name="id">An ID that identifies this outcome.</param>
        /// <param name="title">The outcome’s text.</param>
        /// <param name="users">The number of unique viewers that chose this outcome.</param>
        /// <param name="channelPoints">The number of Channel Points spent by viewers on this outcome.</param>
        /// <param name="color">The color that visually identifies this outcome in the UX. Possible values are:      * BLUE * PINK    If the number of outcomes is two, the color is BLUE for the first outcome and PINK for the second outcome. If there are more than two outcomes, the color is BLUE for all outcomes.</param>
        /// <param name="topPredictors">A list of viewers who were the top predictors; otherwise, **null** if none.</param>
        [JsonConstructor]
        public PredictionOutcome(string id, string title, int users, int channelPoints, ColorEnum color, List<PredictionOutcomeTopPredictorsInner>? topPredictors = default)
        {
            Id = id;
            Title = title;
            Users = users;
            ChannelPoints = channelPoints;
            Color = color;
            TopPredictors = topPredictors;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The color that visually identifies this outcome in the UX. Possible values are:      * BLUE * PINK    If the number of outcomes is two, the color is BLUE for the first outcome and PINK for the second outcome. If there are more than two outcomes, the color is BLUE for all outcomes.
        /// </summary>
        /// <value>The color that visually identifies this outcome in the UX. Possible values are:      * BLUE * PINK    If the number of outcomes is two, the color is BLUE for the first outcome and PINK for the second outcome. If there are more than two outcomes, the color is BLUE for all outcomes.</value>
        public enum ColorEnum
        {
            /// <summary>
            /// Enum BLUE for value: BLUE
            /// </summary>
            BLUE = 1,

            /// <summary>
            /// Enum PINK for value: PINK
            /// </summary>
            PINK = 2
        }

        /// <summary>
        /// Returns a <see cref="ColorEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ColorEnum ColorEnumFromString(string value)
        {
            if (value.Equals("BLUE"))
                return ColorEnum.BLUE;

            if (value.Equals("PINK"))
                return ColorEnum.PINK;

            throw new NotImplementedException($"Could not convert value to type ColorEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ColorEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ColorEnum? ColorEnumFromStringOrDefault(string value)
        {
            if (value.Equals("BLUE"))
                return ColorEnum.BLUE;

            if (value.Equals("PINK"))
                return ColorEnum.PINK;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ColorEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ColorEnumToJsonValue(ColorEnum value)
        {
            if (value == ColorEnum.BLUE)
                return "BLUE";

            if (value == ColorEnum.PINK)
                return "PINK";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// The color that visually identifies this outcome in the UX. Possible values are:      * BLUE * PINK    If the number of outcomes is two, the color is BLUE for the first outcome and PINK for the second outcome. If there are more than two outcomes, the color is BLUE for all outcomes.
        /// </summary>
        /// <value>The color that visually identifies this outcome in the UX. Possible values are:      * BLUE * PINK    If the number of outcomes is two, the color is BLUE for the first outcome and PINK for the second outcome. If there are more than two outcomes, the color is BLUE for all outcomes.</value>
        [JsonPropertyName("color")]
        public ColorEnum Color { get; set; }

        /// <summary>
        /// An ID that identifies this outcome.
        /// </summary>
        /// <value>An ID that identifies this outcome.</value>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// The outcome’s text.
        /// </summary>
        /// <value>The outcome’s text.</value>
        [JsonPropertyName("title")]
        public string Title { get; set; }

        /// <summary>
        /// The number of unique viewers that chose this outcome.
        /// </summary>
        /// <value>The number of unique viewers that chose this outcome.</value>
        [JsonPropertyName("users")]
        public int Users { get; set; }

        /// <summary>
        /// The number of Channel Points spent by viewers on this outcome.
        /// </summary>
        /// <value>The number of Channel Points spent by viewers on this outcome.</value>
        [JsonPropertyName("channel_points")]
        public int ChannelPoints { get; set; }

        /// <summary>
        /// A list of viewers who were the top predictors; otherwise, **null** if none.
        /// </summary>
        /// <value>A list of viewers who were the top predictors; otherwise, **null** if none.</value>
        [JsonPropertyName("top_predictors")]
        public List<PredictionOutcomeTopPredictorsInner>? TopPredictors { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PredictionOutcome {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Users: ").Append(Users).Append("\n");
            sb.Append("  ChannelPoints: ").Append(ChannelPoints).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  TopPredictors: ").Append(TopPredictors).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PredictionOutcome" />
    /// </summary>
    public class PredictionOutcomeJsonConverter : JsonConverter<PredictionOutcome>
    {
        /// <summary>
        /// Deserializes json to <see cref="PredictionOutcome" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PredictionOutcome Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> title = default;
            Option<int?> users = default;
            Option<int?> channelPoints = default;
            Option<PredictionOutcome.ColorEnum?> color = default;
            Option<List<PredictionOutcomeTopPredictorsInner>?> topPredictors = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "users":
                            users = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "channel_points":
                            channelPoints = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "color":
                            string? colorRawValue = utf8JsonReader.GetString();
                            if (colorRawValue != null)
                                color = new Option<PredictionOutcome.ColorEnum?>(PredictionOutcome.ColorEnumFromStringOrDefault(colorRawValue));
                            break;
                        case "top_predictors":
                            topPredictors = new Option<List<PredictionOutcomeTopPredictorsInner>?>(JsonSerializer.Deserialize<List<PredictionOutcomeTopPredictorsInner>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class PredictionOutcome.", nameof(id));

            if (!title.IsSet)
                throw new ArgumentException("Property is required for class PredictionOutcome.", nameof(title));

            if (!users.IsSet)
                throw new ArgumentException("Property is required for class PredictionOutcome.", nameof(users));

            if (!channelPoints.IsSet)
                throw new ArgumentException("Property is required for class PredictionOutcome.", nameof(channelPoints));

            if (!color.IsSet)
                throw new ArgumentException("Property is required for class PredictionOutcome.", nameof(color));

            if (!topPredictors.IsSet)
                throw new ArgumentException("Property is required for class PredictionOutcome.", nameof(topPredictors));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class PredictionOutcome.");

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class PredictionOutcome.");

            if (users.IsSet && users.Value == null)
                throw new ArgumentNullException(nameof(users), "Property is not nullable for class PredictionOutcome.");

            if (channelPoints.IsSet && channelPoints.Value == null)
                throw new ArgumentNullException(nameof(channelPoints), "Property is not nullable for class PredictionOutcome.");

            if (color.IsSet && color.Value == null)
                throw new ArgumentNullException(nameof(color), "Property is not nullable for class PredictionOutcome.");

            return new PredictionOutcome(id.Value!, title.Value!, users.Value!.Value!, channelPoints.Value!.Value!, color.Value!.Value!, topPredictors.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="PredictionOutcome" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="predictionOutcome"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PredictionOutcome predictionOutcome, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, predictionOutcome, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PredictionOutcome" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="predictionOutcome"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PredictionOutcome predictionOutcome, JsonSerializerOptions jsonSerializerOptions)
        {
            if (predictionOutcome.Id == null)
                throw new ArgumentNullException(nameof(predictionOutcome.Id), "Property is required for class PredictionOutcome.");

            if (predictionOutcome.Title == null)
                throw new ArgumentNullException(nameof(predictionOutcome.Title), "Property is required for class PredictionOutcome.");

            writer.WriteString("id", predictionOutcome.Id);

            writer.WriteString("title", predictionOutcome.Title);

            writer.WriteNumber("users", predictionOutcome.Users);

            writer.WriteNumber("channel_points", predictionOutcome.ChannelPoints);

            var colorRawValue = PredictionOutcome.ColorEnumToJsonValue(predictionOutcome.Color);
            writer.WriteString("color", colorRawValue);
            if (predictionOutcome.TopPredictors != null)
            {
                writer.WritePropertyName("top_predictors");
                JsonSerializer.Serialize(writer, predictionOutcome.TopPredictors, jsonSerializerOptions);
            }
            else
                writer.WriteNull("top_predictors");
        }
    }
}

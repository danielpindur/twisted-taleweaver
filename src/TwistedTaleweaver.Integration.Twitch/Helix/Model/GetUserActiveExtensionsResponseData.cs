// <auto-generated>
/*
 * Twitch API Swagger UI (Unofficial)
 *
 * Unofficial Swagger UI for Twitch API.  All endpoints are generated automatically from the [twitch docs](https://dev.twitch.tv/docs/api/reference) page.  __Features:__  * Swagger UI for all Twitch API endpoints * Schemas for _Request Query Parameters_, _Request Body_, _Response Body_ * Some additional schemas like _Clip_, _ChatBadge_, _Prediction_, _Game_, _Channel_, _Video_ etc. * Response codes and examples * Generated types for TypeScript: [ts-twitch-api](https://github.com/DmitryScaletta/ts-twitch-api)  __Repository:__ [github.com/DmitryScaletta/twitch-api-swagger](https://github.com/DmitryScaletta/twitch-api-swagger)
 *
 * The version of the OpenAPI document: helix
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using TwistedTaleweaver.Integration.Twitch.Helix.Client;

namespace TwistedTaleweaver.Integration.Twitch.Helix.Model
{
    /// <summary>
    /// The active extensions that the broadcaster has installed.
    /// </summary>
    public partial class GetUserActiveExtensionsResponseData : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetUserActiveExtensionsResponseData" /> class.
        /// </summary>
        /// <param name="panel">A dictionary that contains the data for a panel extension. The dictionary’s key is a sequential number beginning with 1\\. The following fields contain the panel’s data for each key.</param>
        /// <param name="overlay">A dictionary that contains the data for a video-overlay extension. The dictionary’s key is a sequential number beginning with 1\\. The following fields contain the overlay’s data for each key.</param>
        /// <param name="component">A dictionary that contains the data for a video-component extension. The dictionary’s key is a sequential number beginning with 1\\. The following fields contain the component’s data for each key.</param>
        [JsonConstructor]
        public GetUserActiveExtensionsResponseData(Option<Dictionary<string, UserExtensionPanel>?> panel = default, Option<Dictionary<string, UserExtensionOverlay>?> overlay = default, Option<Dictionary<string, UserExtensionComponent>?> component = default)
        {
            PanelOption = panel;
            OverlayOption = overlay;
            ComponentOption = component;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Panel
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, UserExtensionPanel>?> PanelOption { get; private set; }

        /// <summary>
        /// A dictionary that contains the data for a panel extension. The dictionary’s key is a sequential number beginning with 1\\. The following fields contain the panel’s data for each key.
        /// </summary>
        /// <value>A dictionary that contains the data for a panel extension. The dictionary’s key is a sequential number beginning with 1\\. The following fields contain the panel’s data for each key.</value>
        [JsonPropertyName("panel")]
        public Dictionary<string, UserExtensionPanel>? Panel { get { return this.PanelOption; } set { this.PanelOption = new(value); } }

        /// <summary>
        /// Used to track the state of Overlay
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, UserExtensionOverlay>?> OverlayOption { get; private set; }

        /// <summary>
        /// A dictionary that contains the data for a video-overlay extension. The dictionary’s key is a sequential number beginning with 1\\. The following fields contain the overlay’s data for each key.
        /// </summary>
        /// <value>A dictionary that contains the data for a video-overlay extension. The dictionary’s key is a sequential number beginning with 1\\. The following fields contain the overlay’s data for each key.</value>
        [JsonPropertyName("overlay")]
        public Dictionary<string, UserExtensionOverlay>? Overlay { get { return this.OverlayOption; } set { this.OverlayOption = new(value); } }

        /// <summary>
        /// Used to track the state of Component
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, UserExtensionComponent>?> ComponentOption { get; private set; }

        /// <summary>
        /// A dictionary that contains the data for a video-component extension. The dictionary’s key is a sequential number beginning with 1\\. The following fields contain the component’s data for each key.
        /// </summary>
        /// <value>A dictionary that contains the data for a video-component extension. The dictionary’s key is a sequential number beginning with 1\\. The following fields contain the component’s data for each key.</value>
        [JsonPropertyName("component")]
        public Dictionary<string, UserExtensionComponent>? Component { get { return this.ComponentOption; } set { this.ComponentOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetUserActiveExtensionsResponseData {\n");
            sb.Append("  Panel: ").Append(Panel).Append("\n");
            sb.Append("  Overlay: ").Append(Overlay).Append("\n");
            sb.Append("  Component: ").Append(Component).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetUserActiveExtensionsResponseData" />
    /// </summary>
    public class GetUserActiveExtensionsResponseDataJsonConverter : JsonConverter<GetUserActiveExtensionsResponseData>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetUserActiveExtensionsResponseData" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetUserActiveExtensionsResponseData Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Dictionary<string, UserExtensionPanel>?> panel = default;
            Option<Dictionary<string, UserExtensionOverlay>?> overlay = default;
            Option<Dictionary<string, UserExtensionComponent>?> component = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "panel":
                            panel = new Option<Dictionary<string, UserExtensionPanel>?>(JsonSerializer.Deserialize<Dictionary<string, UserExtensionPanel>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "overlay":
                            overlay = new Option<Dictionary<string, UserExtensionOverlay>?>(JsonSerializer.Deserialize<Dictionary<string, UserExtensionOverlay>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "component":
                            component = new Option<Dictionary<string, UserExtensionComponent>?>(JsonSerializer.Deserialize<Dictionary<string, UserExtensionComponent>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (panel.IsSet && panel.Value == null)
                throw new ArgumentNullException(nameof(panel), "Property is not nullable for class GetUserActiveExtensionsResponseData.");

            if (overlay.IsSet && overlay.Value == null)
                throw new ArgumentNullException(nameof(overlay), "Property is not nullable for class GetUserActiveExtensionsResponseData.");

            if (component.IsSet && component.Value == null)
                throw new ArgumentNullException(nameof(component), "Property is not nullable for class GetUserActiveExtensionsResponseData.");

            return new GetUserActiveExtensionsResponseData(panel, overlay, component);
        }

        /// <summary>
        /// Serializes a <see cref="GetUserActiveExtensionsResponseData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getUserActiveExtensionsResponseData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetUserActiveExtensionsResponseData getUserActiveExtensionsResponseData, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getUserActiveExtensionsResponseData, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetUserActiveExtensionsResponseData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getUserActiveExtensionsResponseData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetUserActiveExtensionsResponseData getUserActiveExtensionsResponseData, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getUserActiveExtensionsResponseData.PanelOption.IsSet && getUserActiveExtensionsResponseData.Panel == null)
                throw new ArgumentNullException(nameof(getUserActiveExtensionsResponseData.Panel), "Property is required for class GetUserActiveExtensionsResponseData.");

            if (getUserActiveExtensionsResponseData.OverlayOption.IsSet && getUserActiveExtensionsResponseData.Overlay == null)
                throw new ArgumentNullException(nameof(getUserActiveExtensionsResponseData.Overlay), "Property is required for class GetUserActiveExtensionsResponseData.");

            if (getUserActiveExtensionsResponseData.ComponentOption.IsSet && getUserActiveExtensionsResponseData.Component == null)
                throw new ArgumentNullException(nameof(getUserActiveExtensionsResponseData.Component), "Property is required for class GetUserActiveExtensionsResponseData.");

            if (getUserActiveExtensionsResponseData.PanelOption.IsSet)
            {
                writer.WritePropertyName("panel");
                JsonSerializer.Serialize(writer, getUserActiveExtensionsResponseData.Panel, jsonSerializerOptions);
            }
            if (getUserActiveExtensionsResponseData.OverlayOption.IsSet)
            {
                writer.WritePropertyName("overlay");
                JsonSerializer.Serialize(writer, getUserActiveExtensionsResponseData.Overlay, jsonSerializerOptions);
            }
            if (getUserActiveExtensionsResponseData.ComponentOption.IsSet)
            {
                writer.WritePropertyName("component");
                JsonSerializer.Serialize(writer, getUserActiveExtensionsResponseData.Component, jsonSerializerOptions);
            }
        }
    }
}

// <auto-generated>
/*
 * Twitch API Swagger UI (Unofficial)
 *
 * Unofficial Swagger UI for Twitch API.  All endpoints are generated automatically from the [twitch docs](https://dev.twitch.tv/docs/api/reference) page.  __Features:__  * Swagger UI for all Twitch API endpoints * Schemas for _Request Query Parameters_, _Request Body_, _Response Body_ * Some additional schemas like _Clip_, _ChatBadge_, _Prediction_, _Game_, _Channel_, _Video_ etc. * Response codes and examples * Generated types for TypeScript: [ts-twitch-api](https://github.com/DmitryScaletta/ts-twitch-api)  __Repository:__ [github.com/DmitryScaletta/twitch-api-swagger](https://github.com/DmitryScaletta/twitch-api-swagger)
 *
 * The version of the OpenAPI document: helix
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using TwistedTaleweaver.Integration.Twitch.Helix.Client;

namespace TwistedTaleweaver.Integration.Twitch.Helix.Model
{
    /// <summary>
    /// UserExtension
    /// </summary>
    public partial class UserExtension : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserExtension" /> class.
        /// </summary>
        /// <param name="id">An ID that identifies the extension.</param>
        /// <param name="varVersion">The extension&#39;s version.</param>
        /// <param name="name">The extension&#39;s name.</param>
        /// <param name="canActivate">A Boolean value that determines whether the extension is configured and can be activated. Is **true** if the extension is configured and can be activated.</param>
        /// <param name="type">The extension types that you can activate for this extension. Possible values are:      * component * mobile * overlay * panel</param>
        [JsonConstructor]
        public UserExtension(string id, string varVersion, string name, bool canActivate, List<UserExtension.TypeEnum> type)
        {
            Id = id;
            VarVersion = varVersion;
            Name = name;
            CanActivate = canActivate;
            Type = type;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines Type
        /// </summary>
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Component for value: component
            /// </summary>
            Component = 1,

            /// <summary>
            /// Enum Mobile for value: mobile
            /// </summary>
            Mobile = 2,

            /// <summary>
            /// Enum Overlay for value: overlay
            /// </summary>
            Overlay = 3,

            /// <summary>
            /// Enum Panel for value: panel
            /// </summary>
            Panel = 4
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TypeEnum TypeEnumFromString(string value)
        {
            if (value.Equals("component"))
                return TypeEnum.Component;

            if (value.Equals("mobile"))
                return TypeEnum.Mobile;

            if (value.Equals("overlay"))
                return TypeEnum.Overlay;

            if (value.Equals("panel"))
                return TypeEnum.Panel;

            throw new NotImplementedException($"Could not convert value to type TypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TypeEnum? TypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("component"))
                return TypeEnum.Component;

            if (value.Equals("mobile"))
                return TypeEnum.Mobile;

            if (value.Equals("overlay"))
                return TypeEnum.Overlay;

            if (value.Equals("panel"))
                return TypeEnum.Panel;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TypeEnumToJsonValue(TypeEnum? value)
        {
            if (value == TypeEnum.Component)
                return "component";

            if (value == TypeEnum.Mobile)
                return "mobile";

            if (value == TypeEnum.Overlay)
                return "overlay";

            if (value == TypeEnum.Panel)
                return "panel";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// An ID that identifies the extension.
        /// </summary>
        /// <value>An ID that identifies the extension.</value>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// The extension&#39;s version.
        /// </summary>
        /// <value>The extension&#39;s version.</value>
        [JsonPropertyName("version")]
        public string VarVersion { get; set; }

        /// <summary>
        /// The extension&#39;s name.
        /// </summary>
        /// <value>The extension&#39;s name.</value>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// A Boolean value that determines whether the extension is configured and can be activated. Is **true** if the extension is configured and can be activated.
        /// </summary>
        /// <value>A Boolean value that determines whether the extension is configured and can be activated. Is **true** if the extension is configured and can be activated.</value>
        [JsonPropertyName("can_activate")]
        public bool CanActivate { get; set; }

        /// <summary>
        /// The extension types that you can activate for this extension. Possible values are:      * component * mobile * overlay * panel
        /// </summary>
        /// <value>The extension types that you can activate for this extension. Possible values are:      * component * mobile * overlay * panel</value>
        [JsonPropertyName("type")]
        public List<UserExtension.TypeEnum> Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserExtension {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CanActivate: ").Append(CanActivate).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UserExtension" />
    /// </summary>
    public class UserExtensionJsonConverter : JsonConverter<UserExtension>
    {
        /// <summary>
        /// Deserializes json to <see cref="UserExtension" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override UserExtension Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> varVersion = default;
            Option<string?> name = default;
            Option<bool?> canActivate = default;
            Option<List<UserExtension.TypeEnum>?> type = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "version":
                            varVersion = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "can_activate":
                            canActivate = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "type":
                            type = new Option<List<UserExtension.TypeEnum>?>(JsonSerializer.Deserialize<List<UserExtension.TypeEnum>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class UserExtension.", nameof(id));

            if (!varVersion.IsSet)
                throw new ArgumentException("Property is required for class UserExtension.", nameof(varVersion));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class UserExtension.", nameof(name));

            if (!canActivate.IsSet)
                throw new ArgumentException("Property is required for class UserExtension.", nameof(canActivate));

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class UserExtension.", nameof(type));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class UserExtension.");

            if (varVersion.IsSet && varVersion.Value == null)
                throw new ArgumentNullException(nameof(varVersion), "Property is not nullable for class UserExtension.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class UserExtension.");

            if (canActivate.IsSet && canActivate.Value == null)
                throw new ArgumentNullException(nameof(canActivate), "Property is not nullable for class UserExtension.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class UserExtension.");

            return new UserExtension(id.Value!, varVersion.Value!, name.Value!, canActivate.Value!.Value!, type.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="UserExtension" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="userExtension"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, UserExtension userExtension, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, userExtension, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="UserExtension" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="userExtension"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, UserExtension userExtension, JsonSerializerOptions jsonSerializerOptions)
        {
            if (userExtension.Id == null)
                throw new ArgumentNullException(nameof(userExtension.Id), "Property is required for class UserExtension.");

            if (userExtension.VarVersion == null)
                throw new ArgumentNullException(nameof(userExtension.VarVersion), "Property is required for class UserExtension.");

            if (userExtension.Name == null)
                throw new ArgumentNullException(nameof(userExtension.Name), "Property is required for class UserExtension.");

            if (userExtension.Type == null)
                throw new ArgumentNullException(nameof(userExtension.Type), "Property is required for class UserExtension.");

            writer.WriteString("id", userExtension.Id);

            writer.WriteString("version", userExtension.VarVersion);

            writer.WriteString("name", userExtension.Name);

            writer.WriteBoolean("can_activate", userExtension.CanActivate);

            writer.WritePropertyName("type");
            JsonSerializer.Serialize(writer, userExtension.Type, jsonSerializerOptions);
        }
    }
}

// <auto-generated>
/*
 * Twitch API Swagger UI (Unofficial)
 *
 * Unofficial Swagger UI for Twitch API.  All endpoints are generated automatically from the [twitch docs](https://dev.twitch.tv/docs/api/reference) page.  __Features:__  * Swagger UI for all Twitch API endpoints * Schemas for _Request Query Parameters_, _Request Body_, _Response Body_ * Some additional schemas like _Clip_, _ChatBadge_, _Prediction_, _Game_, _Channel_, _Video_ etc. * Response codes and examples * Generated types for TypeScript: [ts-twitch-api](https://github.com/DmitryScaletta/ts-twitch-api)  __Repository:__ [github.com/DmitryScaletta/twitch-api-swagger](https://github.com/DmitryScaletta/twitch-api-swagger)
 *
 * The version of the OpenAPI document: helix
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using TwistedTaleweaver.Integration.Twitch.Helix.Client;

namespace TwistedTaleweaver.Integration.Twitch.Helix.Model
{
    /// <summary>
    /// A dictionary that contains URLs to different sizes of the default icon. The dictionary’s key identifies the icon’s size (for example, 24x24), and the dictionary’s value contains the URL to the icon.
    /// </summary>
    public partial class ExtensionIconUrls : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExtensionIconUrls" /> class.
        /// </summary>
        /// <param name="var100x100">var100x100</param>
        /// <param name="var24x24">var24x24</param>
        /// <param name="var300x200">var300x200</param>
        [JsonConstructor]
        public ExtensionIconUrls(Option<string?> var100x100 = default, Option<string?> var24x24 = default, Option<string?> var300x200 = default)
        {
            Var100x100Option = var100x100;
            Var24x24Option = var24x24;
            Var300x200Option = var300x200;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Var100x100
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> Var100x100Option { get; private set; }

        /// <summary>
        /// Gets or Sets Var100x100
        /// </summary>
        [JsonPropertyName("100x100")]
        public string? Var100x100 { get { return this.Var100x100Option; } set { this.Var100x100Option = new(value); } }

        /// <summary>
        /// Used to track the state of Var24x24
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> Var24x24Option { get; private set; }

        /// <summary>
        /// Gets or Sets Var24x24
        /// </summary>
        [JsonPropertyName("24x24")]
        public string? Var24x24 { get { return this.Var24x24Option; } set { this.Var24x24Option = new(value); } }

        /// <summary>
        /// Used to track the state of Var300x200
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> Var300x200Option { get; private set; }

        /// <summary>
        /// Gets or Sets Var300x200
        /// </summary>
        [JsonPropertyName("300x200")]
        public string? Var300x200 { get { return this.Var300x200Option; } set { this.Var300x200Option = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ExtensionIconUrls {\n");
            sb.Append("  Var100x100: ").Append(Var100x100).Append("\n");
            sb.Append("  Var24x24: ").Append(Var24x24).Append("\n");
            sb.Append("  Var300x200: ").Append(Var300x200).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ExtensionIconUrls" />
    /// </summary>
    public class ExtensionIconUrlsJsonConverter : JsonConverter<ExtensionIconUrls>
    {
        /// <summary>
        /// Deserializes json to <see cref="ExtensionIconUrls" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ExtensionIconUrls Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> var100x100 = default;
            Option<string?> var24x24 = default;
            Option<string?> var300x200 = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "100x100":
                            var100x100 = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "24x24":
                            var24x24 = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "300x200":
                            var300x200 = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (var100x100.IsSet && var100x100.Value == null)
                throw new ArgumentNullException(nameof(var100x100), "Property is not nullable for class ExtensionIconUrls.");

            if (var24x24.IsSet && var24x24.Value == null)
                throw new ArgumentNullException(nameof(var24x24), "Property is not nullable for class ExtensionIconUrls.");

            if (var300x200.IsSet && var300x200.Value == null)
                throw new ArgumentNullException(nameof(var300x200), "Property is not nullable for class ExtensionIconUrls.");

            return new ExtensionIconUrls(var100x100, var24x24, var300x200);
        }

        /// <summary>
        /// Serializes a <see cref="ExtensionIconUrls" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="extensionIconUrls"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ExtensionIconUrls extensionIconUrls, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, extensionIconUrls, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ExtensionIconUrls" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="extensionIconUrls"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ExtensionIconUrls extensionIconUrls, JsonSerializerOptions jsonSerializerOptions)
        {
            if (extensionIconUrls.Var100x100Option.IsSet && extensionIconUrls.Var100x100 == null)
                throw new ArgumentNullException(nameof(extensionIconUrls.Var100x100), "Property is required for class ExtensionIconUrls.");

            if (extensionIconUrls.Var24x24Option.IsSet && extensionIconUrls.Var24x24 == null)
                throw new ArgumentNullException(nameof(extensionIconUrls.Var24x24), "Property is required for class ExtensionIconUrls.");

            if (extensionIconUrls.Var300x200Option.IsSet && extensionIconUrls.Var300x200 == null)
                throw new ArgumentNullException(nameof(extensionIconUrls.Var300x200), "Property is required for class ExtensionIconUrls.");

            if (extensionIconUrls.Var100x100Option.IsSet)
                writer.WriteString("100x100", extensionIconUrls.Var100x100);

            if (extensionIconUrls.Var24x24Option.IsSet)
                writer.WriteString("24x24", extensionIconUrls.Var24x24);

            if (extensionIconUrls.Var300x200Option.IsSet)
                writer.WriteString("300x200", extensionIconUrls.Var300x200);
        }
    }
}

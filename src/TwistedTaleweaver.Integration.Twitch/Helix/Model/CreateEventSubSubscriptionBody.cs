// <auto-generated>
/*
 * Twitch API Swagger UI (Unofficial)
 *
 * Unofficial Swagger UI for Twitch API.  All endpoints are generated automatically from the [twitch docs](https://dev.twitch.tv/docs/api/reference) page.  __Features:__  * Swagger UI for all Twitch API endpoints * Schemas for _Request Query Parameters_, _Request Body_, _Response Body_ * Some additional schemas like _Clip_, _ChatBadge_, _Prediction_, _Game_, _Channel_, _Video_ etc. * Response codes and examples * Generated types for TypeScript: [ts-twitch-api](https://github.com/DmitryScaletta/ts-twitch-api)  __Repository:__ [github.com/DmitryScaletta/twitch-api-swagger](https://github.com/DmitryScaletta/twitch-api-swagger)
 *
 * The version of the OpenAPI document: helix
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using TwistedTaleweaver.Integration.Twitch.Helix.Client;

namespace TwistedTaleweaver.Integration.Twitch.Helix.Model
{
    /// <summary>
    /// CreateEventSubSubscriptionBody
    /// </summary>
    public partial class CreateEventSubSubscriptionBody : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateEventSubSubscriptionBody" /> class.
        /// </summary>
        /// <param name="type">The type of subscription to create. For a list of subscriptions that you can create, see [Subscription Types](https://dev.twitch.tv/docs/eventsub/eventsub-subscription-types#subscription-types). Set this field to the value in the **Name** column of the Subscription Types table.</param>
        /// <param name="varVersion">The version number that identifies the definition of the subscription type that you want the response to use.</param>
        /// <param name="condition">A JSON object that contains the parameter values that are specific to the specified subscription type. For the object’s required and optional fields, see the subscription type’s documentation.</param>
        /// <param name="transport">transport</param>
        [JsonConstructor]
        public CreateEventSubSubscriptionBody(TypeEnum type, string varVersion, Object condition, CreateEventSubSubscriptionBodyTransport transport)
        {
            Type = type;
            VarVersion = varVersion;
            Condition = condition;
            Transport = transport;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The type of subscription to create. For a list of subscriptions that you can create, see [Subscription Types](https://dev.twitch.tv/docs/eventsub/eventsub-subscription-types#subscription-types). Set this field to the value in the **Name** column of the Subscription Types table.
        /// </summary>
        /// <value>The type of subscription to create. For a list of subscriptions that you can create, see [Subscription Types](https://dev.twitch.tv/docs/eventsub/eventsub-subscription-types#subscription-types). Set this field to the value in the **Name** column of the Subscription Types table.</value>
        public enum TypeEnum
        {
            /// <summary>
            /// Enum AutomodMessageHold for value: automod.message.hold
            /// </summary>
            AutomodMessageHold = 1,

            /// <summary>
            /// Enum AutomodMessageUpdate for value: automod.message.update
            /// </summary>
            AutomodMessageUpdate = 2,

            /// <summary>
            /// Enum AutomodSettingsUpdate for value: automod.settings.update
            /// </summary>
            AutomodSettingsUpdate = 3,

            /// <summary>
            /// Enum AutomodTermsUpdate for value: automod.terms.update
            /// </summary>
            AutomodTermsUpdate = 4,

            /// <summary>
            /// Enum ChannelBitsUse for value: channel.bits.use
            /// </summary>
            ChannelBitsUse = 5,

            /// <summary>
            /// Enum ChannelUpdate for value: channel.update
            /// </summary>
            ChannelUpdate = 6,

            /// <summary>
            /// Enum ChannelFollow for value: channel.follow
            /// </summary>
            ChannelFollow = 7,

            /// <summary>
            /// Enum ChannelAdBreakBegin for value: channel.ad_break.begin
            /// </summary>
            ChannelAdBreakBegin = 8,

            /// <summary>
            /// Enum ChannelChatClear for value: channel.chat.clear
            /// </summary>
            ChannelChatClear = 9,

            /// <summary>
            /// Enum ChannelChatClearUserMessages for value: channel.chat.clear_user_messages
            /// </summary>
            ChannelChatClearUserMessages = 10,

            /// <summary>
            /// Enum ChannelChatMessage for value: channel.chat.message
            /// </summary>
            ChannelChatMessage = 11,

            /// <summary>
            /// Enum ChannelChatMessageDelete for value: channel.chat.message_delete
            /// </summary>
            ChannelChatMessageDelete = 12,

            /// <summary>
            /// Enum ChannelChatNotification for value: channel.chat.notification
            /// </summary>
            ChannelChatNotification = 13,

            /// <summary>
            /// Enum ChannelChatSettingsUpdate for value: channel.chat_settings.update
            /// </summary>
            ChannelChatSettingsUpdate = 14,

            /// <summary>
            /// Enum ChannelChatUserMessageHold for value: channel.chat.user_message_hold
            /// </summary>
            ChannelChatUserMessageHold = 15,

            /// <summary>
            /// Enum ChannelChatUserMessageUpdate for value: channel.chat.user_message_update
            /// </summary>
            ChannelChatUserMessageUpdate = 16,

            /// <summary>
            /// Enum ChannelSharedChatBegin for value: channel.shared_chat.begin
            /// </summary>
            ChannelSharedChatBegin = 17,

            /// <summary>
            /// Enum ChannelSharedChatUpdate for value: channel.shared_chat.update
            /// </summary>
            ChannelSharedChatUpdate = 18,

            /// <summary>
            /// Enum ChannelSharedChatEnd for value: channel.shared_chat.end
            /// </summary>
            ChannelSharedChatEnd = 19,

            /// <summary>
            /// Enum ChannelSubscribe for value: channel.subscribe
            /// </summary>
            ChannelSubscribe = 20,

            /// <summary>
            /// Enum ChannelSubscriptionEnd for value: channel.subscription.end
            /// </summary>
            ChannelSubscriptionEnd = 21,

            /// <summary>
            /// Enum ChannelSubscriptionGift for value: channel.subscription.gift
            /// </summary>
            ChannelSubscriptionGift = 22,

            /// <summary>
            /// Enum ChannelSubscriptionMessage for value: channel.subscription.message
            /// </summary>
            ChannelSubscriptionMessage = 23,

            /// <summary>
            /// Enum ChannelCheer for value: channel.cheer
            /// </summary>
            ChannelCheer = 24,

            /// <summary>
            /// Enum ChannelRaid for value: channel.raid
            /// </summary>
            ChannelRaid = 25,

            /// <summary>
            /// Enum ChannelBan for value: channel.ban
            /// </summary>
            ChannelBan = 26,

            /// <summary>
            /// Enum ChannelUnban for value: channel.unban
            /// </summary>
            ChannelUnban = 27,

            /// <summary>
            /// Enum ChannelUnbanRequestCreate for value: channel.unban_request.create
            /// </summary>
            ChannelUnbanRequestCreate = 28,

            /// <summary>
            /// Enum ChannelUnbanRequestResolve for value: channel.unban_request.resolve
            /// </summary>
            ChannelUnbanRequestResolve = 29,

            /// <summary>
            /// Enum ChannelModerate for value: channel.moderate
            /// </summary>
            ChannelModerate = 30,

            /// <summary>
            /// Enum ChannelModeratorAdd for value: channel.moderator.add
            /// </summary>
            ChannelModeratorAdd = 31,

            /// <summary>
            /// Enum ChannelModeratorRemove for value: channel.moderator.remove
            /// </summary>
            ChannelModeratorRemove = 32,

            /// <summary>
            /// Enum ChannelGuestStarSessionBegin for value: channel.guest_star_session.begin
            /// </summary>
            ChannelGuestStarSessionBegin = 33,

            /// <summary>
            /// Enum ChannelGuestStarSessionEnd for value: channel.guest_star_session.end
            /// </summary>
            ChannelGuestStarSessionEnd = 34,

            /// <summary>
            /// Enum ChannelGuestStarGuestUpdate for value: channel.guest_star_guest.update
            /// </summary>
            ChannelGuestStarGuestUpdate = 35,

            /// <summary>
            /// Enum ChannelGuestStarSettingsUpdate for value: channel.guest_star_settings.update
            /// </summary>
            ChannelGuestStarSettingsUpdate = 36,

            /// <summary>
            /// Enum ChannelChannelPointsAutomaticRewardRedemptionAdd for value: channel.channel_points_automatic_reward_redemption.add
            /// </summary>
            ChannelChannelPointsAutomaticRewardRedemptionAdd = 37,

            /// <summary>
            /// Enum ChannelChannelPointsCustomRewardAdd for value: channel.channel_points_custom_reward.add
            /// </summary>
            ChannelChannelPointsCustomRewardAdd = 38,

            /// <summary>
            /// Enum ChannelChannelPointsCustomRewardUpdate for value: channel.channel_points_custom_reward.update
            /// </summary>
            ChannelChannelPointsCustomRewardUpdate = 39,

            /// <summary>
            /// Enum ChannelChannelPointsCustomRewardRemove for value: channel.channel_points_custom_reward.remove
            /// </summary>
            ChannelChannelPointsCustomRewardRemove = 40,

            /// <summary>
            /// Enum ChannelChannelPointsCustomRewardRedemptionAdd for value: channel.channel_points_custom_reward_redemption.add
            /// </summary>
            ChannelChannelPointsCustomRewardRedemptionAdd = 41,

            /// <summary>
            /// Enum ChannelChannelPointsCustomRewardRedemptionUpdate for value: channel.channel_points_custom_reward_redemption.update
            /// </summary>
            ChannelChannelPointsCustomRewardRedemptionUpdate = 42,

            /// <summary>
            /// Enum ChannelPollBegin for value: channel.poll.begin
            /// </summary>
            ChannelPollBegin = 43,

            /// <summary>
            /// Enum ChannelPollProgress for value: channel.poll.progress
            /// </summary>
            ChannelPollProgress = 44,

            /// <summary>
            /// Enum ChannelPollEnd for value: channel.poll.end
            /// </summary>
            ChannelPollEnd = 45,

            /// <summary>
            /// Enum ChannelPredictionBegin for value: channel.prediction.begin
            /// </summary>
            ChannelPredictionBegin = 46,

            /// <summary>
            /// Enum ChannelPredictionProgress for value: channel.prediction.progress
            /// </summary>
            ChannelPredictionProgress = 47,

            /// <summary>
            /// Enum ChannelPredictionLock for value: channel.prediction.lock
            /// </summary>
            ChannelPredictionLock = 48,

            /// <summary>
            /// Enum ChannelPredictionEnd for value: channel.prediction.end
            /// </summary>
            ChannelPredictionEnd = 49,

            /// <summary>
            /// Enum ChannelSuspiciousUserMessage for value: channel.suspicious_user.message
            /// </summary>
            ChannelSuspiciousUserMessage = 50,

            /// <summary>
            /// Enum ChannelSuspiciousUserUpdate for value: channel.suspicious_user.update
            /// </summary>
            ChannelSuspiciousUserUpdate = 51,

            /// <summary>
            /// Enum ChannelVipAdd for value: channel.vip.add
            /// </summary>
            ChannelVipAdd = 52,

            /// <summary>
            /// Enum ChannelVipRemove for value: channel.vip.remove
            /// </summary>
            ChannelVipRemove = 53,

            /// <summary>
            /// Enum ChannelWarningAcknowledge for value: channel.warning.acknowledge
            /// </summary>
            ChannelWarningAcknowledge = 54,

            /// <summary>
            /// Enum ChannelWarningSend for value: channel.warning.send
            /// </summary>
            ChannelWarningSend = 55,

            /// <summary>
            /// Enum ChannelCharityCampaignDonate for value: channel.charity_campaign.donate
            /// </summary>
            ChannelCharityCampaignDonate = 56,

            /// <summary>
            /// Enum ChannelCharityCampaignStart for value: channel.charity_campaign.start
            /// </summary>
            ChannelCharityCampaignStart = 57,

            /// <summary>
            /// Enum ChannelCharityCampaignProgress for value: channel.charity_campaign.progress
            /// </summary>
            ChannelCharityCampaignProgress = 58,

            /// <summary>
            /// Enum ChannelCharityCampaignStop for value: channel.charity_campaign.stop
            /// </summary>
            ChannelCharityCampaignStop = 59,

            /// <summary>
            /// Enum ConduitShardDisabled for value: conduit.shard.disabled
            /// </summary>
            ConduitShardDisabled = 60,

            /// <summary>
            /// Enum DropEntitlementGrant for value: drop.entitlement.grant
            /// </summary>
            DropEntitlementGrant = 61,

            /// <summary>
            /// Enum ExtensionBitsTransactionCreate for value: extension.bits_transaction.create
            /// </summary>
            ExtensionBitsTransactionCreate = 62,

            /// <summary>
            /// Enum ChannelGoalBegin for value: channel.goal.begin
            /// </summary>
            ChannelGoalBegin = 63,

            /// <summary>
            /// Enum ChannelGoalProgress for value: channel.goal.progress
            /// </summary>
            ChannelGoalProgress = 64,

            /// <summary>
            /// Enum ChannelGoalEnd for value: channel.goal.end
            /// </summary>
            ChannelGoalEnd = 65,

            /// <summary>
            /// Enum ChannelHypeTrainBegin for value: channel.hype_train.begin
            /// </summary>
            ChannelHypeTrainBegin = 66,

            /// <summary>
            /// Enum ChannelHypeTrainProgress for value: channel.hype_train.progress
            /// </summary>
            ChannelHypeTrainProgress = 67,

            /// <summary>
            /// Enum ChannelHypeTrainEnd for value: channel.hype_train.end
            /// </summary>
            ChannelHypeTrainEnd = 68,

            /// <summary>
            /// Enum ChannelShieldModeBegin for value: channel.shield_mode.begin
            /// </summary>
            ChannelShieldModeBegin = 69,

            /// <summary>
            /// Enum ChannelShieldModeEnd for value: channel.shield_mode.end
            /// </summary>
            ChannelShieldModeEnd = 70,

            /// <summary>
            /// Enum ChannelShoutoutCreate for value: channel.shoutout.create
            /// </summary>
            ChannelShoutoutCreate = 71,

            /// <summary>
            /// Enum ChannelShoutoutReceive for value: channel.shoutout.receive
            /// </summary>
            ChannelShoutoutReceive = 72,

            /// <summary>
            /// Enum StreamOnline for value: stream.online
            /// </summary>
            StreamOnline = 73,

            /// <summary>
            /// Enum StreamOffline for value: stream.offline
            /// </summary>
            StreamOffline = 74,

            /// <summary>
            /// Enum UserAuthorizationGrant for value: user.authorization.grant
            /// </summary>
            UserAuthorizationGrant = 75,

            /// <summary>
            /// Enum UserAuthorizationRevoke for value: user.authorization.revoke
            /// </summary>
            UserAuthorizationRevoke = 76,

            /// <summary>
            /// Enum UserUpdate for value: user.update
            /// </summary>
            UserUpdate = 77,

            /// <summary>
            /// Enum UserWhisperMessage for value: user.whisper.message
            /// </summary>
            UserWhisperMessage = 78
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TypeEnum TypeEnumFromString(string value)
        {
            if (value.Equals("automod.message.hold"))
                return TypeEnum.AutomodMessageHold;

            if (value.Equals("automod.message.update"))
                return TypeEnum.AutomodMessageUpdate;

            if (value.Equals("automod.settings.update"))
                return TypeEnum.AutomodSettingsUpdate;

            if (value.Equals("automod.terms.update"))
                return TypeEnum.AutomodTermsUpdate;

            if (value.Equals("channel.bits.use"))
                return TypeEnum.ChannelBitsUse;

            if (value.Equals("channel.update"))
                return TypeEnum.ChannelUpdate;

            if (value.Equals("channel.follow"))
                return TypeEnum.ChannelFollow;

            if (value.Equals("channel.ad_break.begin"))
                return TypeEnum.ChannelAdBreakBegin;

            if (value.Equals("channel.chat.clear"))
                return TypeEnum.ChannelChatClear;

            if (value.Equals("channel.chat.clear_user_messages"))
                return TypeEnum.ChannelChatClearUserMessages;

            if (value.Equals("channel.chat.message"))
                return TypeEnum.ChannelChatMessage;

            if (value.Equals("channel.chat.message_delete"))
                return TypeEnum.ChannelChatMessageDelete;

            if (value.Equals("channel.chat.notification"))
                return TypeEnum.ChannelChatNotification;

            if (value.Equals("channel.chat_settings.update"))
                return TypeEnum.ChannelChatSettingsUpdate;

            if (value.Equals("channel.chat.user_message_hold"))
                return TypeEnum.ChannelChatUserMessageHold;

            if (value.Equals("channel.chat.user_message_update"))
                return TypeEnum.ChannelChatUserMessageUpdate;

            if (value.Equals("channel.shared_chat.begin"))
                return TypeEnum.ChannelSharedChatBegin;

            if (value.Equals("channel.shared_chat.update"))
                return TypeEnum.ChannelSharedChatUpdate;

            if (value.Equals("channel.shared_chat.end"))
                return TypeEnum.ChannelSharedChatEnd;

            if (value.Equals("channel.subscribe"))
                return TypeEnum.ChannelSubscribe;

            if (value.Equals("channel.subscription.end"))
                return TypeEnum.ChannelSubscriptionEnd;

            if (value.Equals("channel.subscription.gift"))
                return TypeEnum.ChannelSubscriptionGift;

            if (value.Equals("channel.subscription.message"))
                return TypeEnum.ChannelSubscriptionMessage;

            if (value.Equals("channel.cheer"))
                return TypeEnum.ChannelCheer;

            if (value.Equals("channel.raid"))
                return TypeEnum.ChannelRaid;

            if (value.Equals("channel.ban"))
                return TypeEnum.ChannelBan;

            if (value.Equals("channel.unban"))
                return TypeEnum.ChannelUnban;

            if (value.Equals("channel.unban_request.create"))
                return TypeEnum.ChannelUnbanRequestCreate;

            if (value.Equals("channel.unban_request.resolve"))
                return TypeEnum.ChannelUnbanRequestResolve;

            if (value.Equals("channel.moderate"))
                return TypeEnum.ChannelModerate;

            if (value.Equals("channel.moderator.add"))
                return TypeEnum.ChannelModeratorAdd;

            if (value.Equals("channel.moderator.remove"))
                return TypeEnum.ChannelModeratorRemove;

            if (value.Equals("channel.guest_star_session.begin"))
                return TypeEnum.ChannelGuestStarSessionBegin;

            if (value.Equals("channel.guest_star_session.end"))
                return TypeEnum.ChannelGuestStarSessionEnd;

            if (value.Equals("channel.guest_star_guest.update"))
                return TypeEnum.ChannelGuestStarGuestUpdate;

            if (value.Equals("channel.guest_star_settings.update"))
                return TypeEnum.ChannelGuestStarSettingsUpdate;

            if (value.Equals("channel.channel_points_automatic_reward_redemption.add"))
                return TypeEnum.ChannelChannelPointsAutomaticRewardRedemptionAdd;

            if (value.Equals("channel.channel_points_custom_reward.add"))
                return TypeEnum.ChannelChannelPointsCustomRewardAdd;

            if (value.Equals("channel.channel_points_custom_reward.update"))
                return TypeEnum.ChannelChannelPointsCustomRewardUpdate;

            if (value.Equals("channel.channel_points_custom_reward.remove"))
                return TypeEnum.ChannelChannelPointsCustomRewardRemove;

            if (value.Equals("channel.channel_points_custom_reward_redemption.add"))
                return TypeEnum.ChannelChannelPointsCustomRewardRedemptionAdd;

            if (value.Equals("channel.channel_points_custom_reward_redemption.update"))
                return TypeEnum.ChannelChannelPointsCustomRewardRedemptionUpdate;

            if (value.Equals("channel.poll.begin"))
                return TypeEnum.ChannelPollBegin;

            if (value.Equals("channel.poll.progress"))
                return TypeEnum.ChannelPollProgress;

            if (value.Equals("channel.poll.end"))
                return TypeEnum.ChannelPollEnd;

            if (value.Equals("channel.prediction.begin"))
                return TypeEnum.ChannelPredictionBegin;

            if (value.Equals("channel.prediction.progress"))
                return TypeEnum.ChannelPredictionProgress;

            if (value.Equals("channel.prediction.lock"))
                return TypeEnum.ChannelPredictionLock;

            if (value.Equals("channel.prediction.end"))
                return TypeEnum.ChannelPredictionEnd;

            if (value.Equals("channel.suspicious_user.message"))
                return TypeEnum.ChannelSuspiciousUserMessage;

            if (value.Equals("channel.suspicious_user.update"))
                return TypeEnum.ChannelSuspiciousUserUpdate;

            if (value.Equals("channel.vip.add"))
                return TypeEnum.ChannelVipAdd;

            if (value.Equals("channel.vip.remove"))
                return TypeEnum.ChannelVipRemove;

            if (value.Equals("channel.warning.acknowledge"))
                return TypeEnum.ChannelWarningAcknowledge;

            if (value.Equals("channel.warning.send"))
                return TypeEnum.ChannelWarningSend;

            if (value.Equals("channel.charity_campaign.donate"))
                return TypeEnum.ChannelCharityCampaignDonate;

            if (value.Equals("channel.charity_campaign.start"))
                return TypeEnum.ChannelCharityCampaignStart;

            if (value.Equals("channel.charity_campaign.progress"))
                return TypeEnum.ChannelCharityCampaignProgress;

            if (value.Equals("channel.charity_campaign.stop"))
                return TypeEnum.ChannelCharityCampaignStop;

            if (value.Equals("conduit.shard.disabled"))
                return TypeEnum.ConduitShardDisabled;

            if (value.Equals("drop.entitlement.grant"))
                return TypeEnum.DropEntitlementGrant;

            if (value.Equals("extension.bits_transaction.create"))
                return TypeEnum.ExtensionBitsTransactionCreate;

            if (value.Equals("channel.goal.begin"))
                return TypeEnum.ChannelGoalBegin;

            if (value.Equals("channel.goal.progress"))
                return TypeEnum.ChannelGoalProgress;

            if (value.Equals("channel.goal.end"))
                return TypeEnum.ChannelGoalEnd;

            if (value.Equals("channel.hype_train.begin"))
                return TypeEnum.ChannelHypeTrainBegin;

            if (value.Equals("channel.hype_train.progress"))
                return TypeEnum.ChannelHypeTrainProgress;

            if (value.Equals("channel.hype_train.end"))
                return TypeEnum.ChannelHypeTrainEnd;

            if (value.Equals("channel.shield_mode.begin"))
                return TypeEnum.ChannelShieldModeBegin;

            if (value.Equals("channel.shield_mode.end"))
                return TypeEnum.ChannelShieldModeEnd;

            if (value.Equals("channel.shoutout.create"))
                return TypeEnum.ChannelShoutoutCreate;

            if (value.Equals("channel.shoutout.receive"))
                return TypeEnum.ChannelShoutoutReceive;

            if (value.Equals("stream.online"))
                return TypeEnum.StreamOnline;

            if (value.Equals("stream.offline"))
                return TypeEnum.StreamOffline;

            if (value.Equals("user.authorization.grant"))
                return TypeEnum.UserAuthorizationGrant;

            if (value.Equals("user.authorization.revoke"))
                return TypeEnum.UserAuthorizationRevoke;

            if (value.Equals("user.update"))
                return TypeEnum.UserUpdate;

            if (value.Equals("user.whisper.message"))
                return TypeEnum.UserWhisperMessage;

            throw new NotImplementedException($"Could not convert value to type TypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TypeEnum? TypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("automod.message.hold"))
                return TypeEnum.AutomodMessageHold;

            if (value.Equals("automod.message.update"))
                return TypeEnum.AutomodMessageUpdate;

            if (value.Equals("automod.settings.update"))
                return TypeEnum.AutomodSettingsUpdate;

            if (value.Equals("automod.terms.update"))
                return TypeEnum.AutomodTermsUpdate;

            if (value.Equals("channel.bits.use"))
                return TypeEnum.ChannelBitsUse;

            if (value.Equals("channel.update"))
                return TypeEnum.ChannelUpdate;

            if (value.Equals("channel.follow"))
                return TypeEnum.ChannelFollow;

            if (value.Equals("channel.ad_break.begin"))
                return TypeEnum.ChannelAdBreakBegin;

            if (value.Equals("channel.chat.clear"))
                return TypeEnum.ChannelChatClear;

            if (value.Equals("channel.chat.clear_user_messages"))
                return TypeEnum.ChannelChatClearUserMessages;

            if (value.Equals("channel.chat.message"))
                return TypeEnum.ChannelChatMessage;

            if (value.Equals("channel.chat.message_delete"))
                return TypeEnum.ChannelChatMessageDelete;

            if (value.Equals("channel.chat.notification"))
                return TypeEnum.ChannelChatNotification;

            if (value.Equals("channel.chat_settings.update"))
                return TypeEnum.ChannelChatSettingsUpdate;

            if (value.Equals("channel.chat.user_message_hold"))
                return TypeEnum.ChannelChatUserMessageHold;

            if (value.Equals("channel.chat.user_message_update"))
                return TypeEnum.ChannelChatUserMessageUpdate;

            if (value.Equals("channel.shared_chat.begin"))
                return TypeEnum.ChannelSharedChatBegin;

            if (value.Equals("channel.shared_chat.update"))
                return TypeEnum.ChannelSharedChatUpdate;

            if (value.Equals("channel.shared_chat.end"))
                return TypeEnum.ChannelSharedChatEnd;

            if (value.Equals("channel.subscribe"))
                return TypeEnum.ChannelSubscribe;

            if (value.Equals("channel.subscription.end"))
                return TypeEnum.ChannelSubscriptionEnd;

            if (value.Equals("channel.subscription.gift"))
                return TypeEnum.ChannelSubscriptionGift;

            if (value.Equals("channel.subscription.message"))
                return TypeEnum.ChannelSubscriptionMessage;

            if (value.Equals("channel.cheer"))
                return TypeEnum.ChannelCheer;

            if (value.Equals("channel.raid"))
                return TypeEnum.ChannelRaid;

            if (value.Equals("channel.ban"))
                return TypeEnum.ChannelBan;

            if (value.Equals("channel.unban"))
                return TypeEnum.ChannelUnban;

            if (value.Equals("channel.unban_request.create"))
                return TypeEnum.ChannelUnbanRequestCreate;

            if (value.Equals("channel.unban_request.resolve"))
                return TypeEnum.ChannelUnbanRequestResolve;

            if (value.Equals("channel.moderate"))
                return TypeEnum.ChannelModerate;

            if (value.Equals("channel.moderator.add"))
                return TypeEnum.ChannelModeratorAdd;

            if (value.Equals("channel.moderator.remove"))
                return TypeEnum.ChannelModeratorRemove;

            if (value.Equals("channel.guest_star_session.begin"))
                return TypeEnum.ChannelGuestStarSessionBegin;

            if (value.Equals("channel.guest_star_session.end"))
                return TypeEnum.ChannelGuestStarSessionEnd;

            if (value.Equals("channel.guest_star_guest.update"))
                return TypeEnum.ChannelGuestStarGuestUpdate;

            if (value.Equals("channel.guest_star_settings.update"))
                return TypeEnum.ChannelGuestStarSettingsUpdate;

            if (value.Equals("channel.channel_points_automatic_reward_redemption.add"))
                return TypeEnum.ChannelChannelPointsAutomaticRewardRedemptionAdd;

            if (value.Equals("channel.channel_points_custom_reward.add"))
                return TypeEnum.ChannelChannelPointsCustomRewardAdd;

            if (value.Equals("channel.channel_points_custom_reward.update"))
                return TypeEnum.ChannelChannelPointsCustomRewardUpdate;

            if (value.Equals("channel.channel_points_custom_reward.remove"))
                return TypeEnum.ChannelChannelPointsCustomRewardRemove;

            if (value.Equals("channel.channel_points_custom_reward_redemption.add"))
                return TypeEnum.ChannelChannelPointsCustomRewardRedemptionAdd;

            if (value.Equals("channel.channel_points_custom_reward_redemption.update"))
                return TypeEnum.ChannelChannelPointsCustomRewardRedemptionUpdate;

            if (value.Equals("channel.poll.begin"))
                return TypeEnum.ChannelPollBegin;

            if (value.Equals("channel.poll.progress"))
                return TypeEnum.ChannelPollProgress;

            if (value.Equals("channel.poll.end"))
                return TypeEnum.ChannelPollEnd;

            if (value.Equals("channel.prediction.begin"))
                return TypeEnum.ChannelPredictionBegin;

            if (value.Equals("channel.prediction.progress"))
                return TypeEnum.ChannelPredictionProgress;

            if (value.Equals("channel.prediction.lock"))
                return TypeEnum.ChannelPredictionLock;

            if (value.Equals("channel.prediction.end"))
                return TypeEnum.ChannelPredictionEnd;

            if (value.Equals("channel.suspicious_user.message"))
                return TypeEnum.ChannelSuspiciousUserMessage;

            if (value.Equals("channel.suspicious_user.update"))
                return TypeEnum.ChannelSuspiciousUserUpdate;

            if (value.Equals("channel.vip.add"))
                return TypeEnum.ChannelVipAdd;

            if (value.Equals("channel.vip.remove"))
                return TypeEnum.ChannelVipRemove;

            if (value.Equals("channel.warning.acknowledge"))
                return TypeEnum.ChannelWarningAcknowledge;

            if (value.Equals("channel.warning.send"))
                return TypeEnum.ChannelWarningSend;

            if (value.Equals("channel.charity_campaign.donate"))
                return TypeEnum.ChannelCharityCampaignDonate;

            if (value.Equals("channel.charity_campaign.start"))
                return TypeEnum.ChannelCharityCampaignStart;

            if (value.Equals("channel.charity_campaign.progress"))
                return TypeEnum.ChannelCharityCampaignProgress;

            if (value.Equals("channel.charity_campaign.stop"))
                return TypeEnum.ChannelCharityCampaignStop;

            if (value.Equals("conduit.shard.disabled"))
                return TypeEnum.ConduitShardDisabled;

            if (value.Equals("drop.entitlement.grant"))
                return TypeEnum.DropEntitlementGrant;

            if (value.Equals("extension.bits_transaction.create"))
                return TypeEnum.ExtensionBitsTransactionCreate;

            if (value.Equals("channel.goal.begin"))
                return TypeEnum.ChannelGoalBegin;

            if (value.Equals("channel.goal.progress"))
                return TypeEnum.ChannelGoalProgress;

            if (value.Equals("channel.goal.end"))
                return TypeEnum.ChannelGoalEnd;

            if (value.Equals("channel.hype_train.begin"))
                return TypeEnum.ChannelHypeTrainBegin;

            if (value.Equals("channel.hype_train.progress"))
                return TypeEnum.ChannelHypeTrainProgress;

            if (value.Equals("channel.hype_train.end"))
                return TypeEnum.ChannelHypeTrainEnd;

            if (value.Equals("channel.shield_mode.begin"))
                return TypeEnum.ChannelShieldModeBegin;

            if (value.Equals("channel.shield_mode.end"))
                return TypeEnum.ChannelShieldModeEnd;

            if (value.Equals("channel.shoutout.create"))
                return TypeEnum.ChannelShoutoutCreate;

            if (value.Equals("channel.shoutout.receive"))
                return TypeEnum.ChannelShoutoutReceive;

            if (value.Equals("stream.online"))
                return TypeEnum.StreamOnline;

            if (value.Equals("stream.offline"))
                return TypeEnum.StreamOffline;

            if (value.Equals("user.authorization.grant"))
                return TypeEnum.UserAuthorizationGrant;

            if (value.Equals("user.authorization.revoke"))
                return TypeEnum.UserAuthorizationRevoke;

            if (value.Equals("user.update"))
                return TypeEnum.UserUpdate;

            if (value.Equals("user.whisper.message"))
                return TypeEnum.UserWhisperMessage;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TypeEnumToJsonValue(TypeEnum value)
        {
            if (value == TypeEnum.AutomodMessageHold)
                return "automod.message.hold";

            if (value == TypeEnum.AutomodMessageUpdate)
                return "automod.message.update";

            if (value == TypeEnum.AutomodSettingsUpdate)
                return "automod.settings.update";

            if (value == TypeEnum.AutomodTermsUpdate)
                return "automod.terms.update";

            if (value == TypeEnum.ChannelBitsUse)
                return "channel.bits.use";

            if (value == TypeEnum.ChannelUpdate)
                return "channel.update";

            if (value == TypeEnum.ChannelFollow)
                return "channel.follow";

            if (value == TypeEnum.ChannelAdBreakBegin)
                return "channel.ad_break.begin";

            if (value == TypeEnum.ChannelChatClear)
                return "channel.chat.clear";

            if (value == TypeEnum.ChannelChatClearUserMessages)
                return "channel.chat.clear_user_messages";

            if (value == TypeEnum.ChannelChatMessage)
                return "channel.chat.message";

            if (value == TypeEnum.ChannelChatMessageDelete)
                return "channel.chat.message_delete";

            if (value == TypeEnum.ChannelChatNotification)
                return "channel.chat.notification";

            if (value == TypeEnum.ChannelChatSettingsUpdate)
                return "channel.chat_settings.update";

            if (value == TypeEnum.ChannelChatUserMessageHold)
                return "channel.chat.user_message_hold";

            if (value == TypeEnum.ChannelChatUserMessageUpdate)
                return "channel.chat.user_message_update";

            if (value == TypeEnum.ChannelSharedChatBegin)
                return "channel.shared_chat.begin";

            if (value == TypeEnum.ChannelSharedChatUpdate)
                return "channel.shared_chat.update";

            if (value == TypeEnum.ChannelSharedChatEnd)
                return "channel.shared_chat.end";

            if (value == TypeEnum.ChannelSubscribe)
                return "channel.subscribe";

            if (value == TypeEnum.ChannelSubscriptionEnd)
                return "channel.subscription.end";

            if (value == TypeEnum.ChannelSubscriptionGift)
                return "channel.subscription.gift";

            if (value == TypeEnum.ChannelSubscriptionMessage)
                return "channel.subscription.message";

            if (value == TypeEnum.ChannelCheer)
                return "channel.cheer";

            if (value == TypeEnum.ChannelRaid)
                return "channel.raid";

            if (value == TypeEnum.ChannelBan)
                return "channel.ban";

            if (value == TypeEnum.ChannelUnban)
                return "channel.unban";

            if (value == TypeEnum.ChannelUnbanRequestCreate)
                return "channel.unban_request.create";

            if (value == TypeEnum.ChannelUnbanRequestResolve)
                return "channel.unban_request.resolve";

            if (value == TypeEnum.ChannelModerate)
                return "channel.moderate";

            if (value == TypeEnum.ChannelModeratorAdd)
                return "channel.moderator.add";

            if (value == TypeEnum.ChannelModeratorRemove)
                return "channel.moderator.remove";

            if (value == TypeEnum.ChannelGuestStarSessionBegin)
                return "channel.guest_star_session.begin";

            if (value == TypeEnum.ChannelGuestStarSessionEnd)
                return "channel.guest_star_session.end";

            if (value == TypeEnum.ChannelGuestStarGuestUpdate)
                return "channel.guest_star_guest.update";

            if (value == TypeEnum.ChannelGuestStarSettingsUpdate)
                return "channel.guest_star_settings.update";

            if (value == TypeEnum.ChannelChannelPointsAutomaticRewardRedemptionAdd)
                return "channel.channel_points_automatic_reward_redemption.add";

            if (value == TypeEnum.ChannelChannelPointsCustomRewardAdd)
                return "channel.channel_points_custom_reward.add";

            if (value == TypeEnum.ChannelChannelPointsCustomRewardUpdate)
                return "channel.channel_points_custom_reward.update";

            if (value == TypeEnum.ChannelChannelPointsCustomRewardRemove)
                return "channel.channel_points_custom_reward.remove";

            if (value == TypeEnum.ChannelChannelPointsCustomRewardRedemptionAdd)
                return "channel.channel_points_custom_reward_redemption.add";

            if (value == TypeEnum.ChannelChannelPointsCustomRewardRedemptionUpdate)
                return "channel.channel_points_custom_reward_redemption.update";

            if (value == TypeEnum.ChannelPollBegin)
                return "channel.poll.begin";

            if (value == TypeEnum.ChannelPollProgress)
                return "channel.poll.progress";

            if (value == TypeEnum.ChannelPollEnd)
                return "channel.poll.end";

            if (value == TypeEnum.ChannelPredictionBegin)
                return "channel.prediction.begin";

            if (value == TypeEnum.ChannelPredictionProgress)
                return "channel.prediction.progress";

            if (value == TypeEnum.ChannelPredictionLock)
                return "channel.prediction.lock";

            if (value == TypeEnum.ChannelPredictionEnd)
                return "channel.prediction.end";

            if (value == TypeEnum.ChannelSuspiciousUserMessage)
                return "channel.suspicious_user.message";

            if (value == TypeEnum.ChannelSuspiciousUserUpdate)
                return "channel.suspicious_user.update";

            if (value == TypeEnum.ChannelVipAdd)
                return "channel.vip.add";

            if (value == TypeEnum.ChannelVipRemove)
                return "channel.vip.remove";

            if (value == TypeEnum.ChannelWarningAcknowledge)
                return "channel.warning.acknowledge";

            if (value == TypeEnum.ChannelWarningSend)
                return "channel.warning.send";

            if (value == TypeEnum.ChannelCharityCampaignDonate)
                return "channel.charity_campaign.donate";

            if (value == TypeEnum.ChannelCharityCampaignStart)
                return "channel.charity_campaign.start";

            if (value == TypeEnum.ChannelCharityCampaignProgress)
                return "channel.charity_campaign.progress";

            if (value == TypeEnum.ChannelCharityCampaignStop)
                return "channel.charity_campaign.stop";

            if (value == TypeEnum.ConduitShardDisabled)
                return "conduit.shard.disabled";

            if (value == TypeEnum.DropEntitlementGrant)
                return "drop.entitlement.grant";

            if (value == TypeEnum.ExtensionBitsTransactionCreate)
                return "extension.bits_transaction.create";

            if (value == TypeEnum.ChannelGoalBegin)
                return "channel.goal.begin";

            if (value == TypeEnum.ChannelGoalProgress)
                return "channel.goal.progress";

            if (value == TypeEnum.ChannelGoalEnd)
                return "channel.goal.end";

            if (value == TypeEnum.ChannelHypeTrainBegin)
                return "channel.hype_train.begin";

            if (value == TypeEnum.ChannelHypeTrainProgress)
                return "channel.hype_train.progress";

            if (value == TypeEnum.ChannelHypeTrainEnd)
                return "channel.hype_train.end";

            if (value == TypeEnum.ChannelShieldModeBegin)
                return "channel.shield_mode.begin";

            if (value == TypeEnum.ChannelShieldModeEnd)
                return "channel.shield_mode.end";

            if (value == TypeEnum.ChannelShoutoutCreate)
                return "channel.shoutout.create";

            if (value == TypeEnum.ChannelShoutoutReceive)
                return "channel.shoutout.receive";

            if (value == TypeEnum.StreamOnline)
                return "stream.online";

            if (value == TypeEnum.StreamOffline)
                return "stream.offline";

            if (value == TypeEnum.UserAuthorizationGrant)
                return "user.authorization.grant";

            if (value == TypeEnum.UserAuthorizationRevoke)
                return "user.authorization.revoke";

            if (value == TypeEnum.UserUpdate)
                return "user.update";

            if (value == TypeEnum.UserWhisperMessage)
                return "user.whisper.message";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// The type of subscription to create. For a list of subscriptions that you can create, see [Subscription Types](https://dev.twitch.tv/docs/eventsub/eventsub-subscription-types#subscription-types). Set this field to the value in the **Name** column of the Subscription Types table.
        /// </summary>
        /// <value>The type of subscription to create. For a list of subscriptions that you can create, see [Subscription Types](https://dev.twitch.tv/docs/eventsub/eventsub-subscription-types#subscription-types). Set this field to the value in the **Name** column of the Subscription Types table.</value>
        [JsonPropertyName("type")]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// The version number that identifies the definition of the subscription type that you want the response to use.
        /// </summary>
        /// <value>The version number that identifies the definition of the subscription type that you want the response to use.</value>
        [JsonPropertyName("version")]
        public string VarVersion { get; set; }

        /// <summary>
        /// A JSON object that contains the parameter values that are specific to the specified subscription type. For the object’s required and optional fields, see the subscription type’s documentation.
        /// </summary>
        /// <value>A JSON object that contains the parameter values that are specific to the specified subscription type. For the object’s required and optional fields, see the subscription type’s documentation.</value>
        [JsonPropertyName("condition")]
        public Object Condition { get; set; }

        /// <summary>
        /// Gets or Sets Transport
        /// </summary>
        [JsonPropertyName("transport")]
        public CreateEventSubSubscriptionBodyTransport Transport { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateEventSubSubscriptionBody {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  Condition: ").Append(Condition).Append("\n");
            sb.Append("  Transport: ").Append(Transport).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateEventSubSubscriptionBody" />
    /// </summary>
    public class CreateEventSubSubscriptionBodyJsonConverter : JsonConverter<CreateEventSubSubscriptionBody>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreateEventSubSubscriptionBody" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateEventSubSubscriptionBody Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<CreateEventSubSubscriptionBody.TypeEnum?> type = default;
            Option<string?> varVersion = default;
            Option<Object?> condition = default;
            Option<CreateEventSubSubscriptionBodyTransport?> transport = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<CreateEventSubSubscriptionBody.TypeEnum?>(CreateEventSubSubscriptionBody.TypeEnumFromStringOrDefault(typeRawValue));
                            break;
                        case "version":
                            varVersion = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "condition":
                            condition = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "transport":
                            transport = new Option<CreateEventSubSubscriptionBodyTransport?>(JsonSerializer.Deserialize<CreateEventSubSubscriptionBodyTransport>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class CreateEventSubSubscriptionBody.", nameof(type));

            if (!varVersion.IsSet)
                throw new ArgumentException("Property is required for class CreateEventSubSubscriptionBody.", nameof(varVersion));

            if (!condition.IsSet)
                throw new ArgumentException("Property is required for class CreateEventSubSubscriptionBody.", nameof(condition));

            if (!transport.IsSet)
                throw new ArgumentException("Property is required for class CreateEventSubSubscriptionBody.", nameof(transport));

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class CreateEventSubSubscriptionBody.");

            if (varVersion.IsSet && varVersion.Value == null)
                throw new ArgumentNullException(nameof(varVersion), "Property is not nullable for class CreateEventSubSubscriptionBody.");

            if (condition.IsSet && condition.Value == null)
                throw new ArgumentNullException(nameof(condition), "Property is not nullable for class CreateEventSubSubscriptionBody.");

            if (transport.IsSet && transport.Value == null)
                throw new ArgumentNullException(nameof(transport), "Property is not nullable for class CreateEventSubSubscriptionBody.");

            return new CreateEventSubSubscriptionBody(type.Value!.Value!, varVersion.Value!, condition.Value!, transport.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="CreateEventSubSubscriptionBody" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createEventSubSubscriptionBody"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateEventSubSubscriptionBody createEventSubSubscriptionBody, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createEventSubSubscriptionBody, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateEventSubSubscriptionBody" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createEventSubSubscriptionBody"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CreateEventSubSubscriptionBody createEventSubSubscriptionBody, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createEventSubSubscriptionBody.VarVersion == null)
                throw new ArgumentNullException(nameof(createEventSubSubscriptionBody.VarVersion), "Property is required for class CreateEventSubSubscriptionBody.");

            if (createEventSubSubscriptionBody.Condition == null)
                throw new ArgumentNullException(nameof(createEventSubSubscriptionBody.Condition), "Property is required for class CreateEventSubSubscriptionBody.");

            if (createEventSubSubscriptionBody.Transport == null)
                throw new ArgumentNullException(nameof(createEventSubSubscriptionBody.Transport), "Property is required for class CreateEventSubSubscriptionBody.");

            var typeRawValue = CreateEventSubSubscriptionBody.TypeEnumToJsonValue(createEventSubSubscriptionBody.Type);
            writer.WriteString("type", typeRawValue);
            writer.WriteString("version", createEventSubSubscriptionBody.VarVersion);

            writer.WritePropertyName("condition");
            JsonSerializer.Serialize(writer, createEventSubSubscriptionBody.Condition, jsonSerializerOptions);
            writer.WritePropertyName("transport");
            JsonSerializer.Serialize(writer, createEventSubSubscriptionBody.Transport, jsonSerializerOptions);
        }
    }
}

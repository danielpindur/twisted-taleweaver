// <auto-generated>
/*
 * Twitch API Swagger UI (Unofficial)
 *
 * Unofficial Swagger UI for Twitch API.  All endpoints are generated automatically from the [twitch docs](https://dev.twitch.tv/docs/api/reference) page.  __Features:__  * Swagger UI for all Twitch API endpoints * Schemas for _Request Query Parameters_, _Request Body_, _Response Body_ * Some additional schemas like _Clip_, _ChatBadge_, _Prediction_, _Game_, _Channel_, _Video_ etc. * Response codes and examples * Generated types for TypeScript: [ts-twitch-api](https://github.com/DmitryScaletta/ts-twitch-api)  __Repository:__ [github.com/DmitryScaletta/twitch-api-swagger](https://github.com/DmitryScaletta/twitch-api-swagger)
 *
 * The version of the OpenAPI document: helix
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using TwistedTaleweaver.Integration.Twitch.Helix.Client;

namespace TwistedTaleweaver.Integration.Twitch.Helix.Model
{
    /// <summary>
    /// DropsEntitlementUpdated
    /// </summary>
    public partial class DropsEntitlementUpdated : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DropsEntitlementUpdated" /> class.
        /// </summary>
        /// <param name="status">A string that indicates whether the status of the entitlements in the &#x60;ids&#x60; field were successfully updated. Possible values are:      * INVALID\\_ID — The entitlement IDs in the &#x60;ids&#x60; field are not valid. * NOT\\_FOUND — The entitlement IDs in the &#x60;ids&#x60; field were not found. * SUCCESS — The status of the entitlements in the &#x60;ids&#x60; field were successfully updated. * UNAUTHORIZED — The user or organization identified by the user access token is not authorized to update the entitlements. * UPDATE\\_FAILED — The update failed. These are considered transient errors and the request should be retried later.</param>
        /// <param name="ids">The list of entitlements that the status in the &#x60;status&#x60; field applies to.</param>
        [JsonConstructor]
        public DropsEntitlementUpdated(StatusEnum status, List<string> ids)
        {
            Status = status;
            Ids = ids;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// A string that indicates whether the status of the entitlements in the &#x60;ids&#x60; field were successfully updated. Possible values are:      * INVALID\\_ID — The entitlement IDs in the &#x60;ids&#x60; field are not valid. * NOT\\_FOUND — The entitlement IDs in the &#x60;ids&#x60; field were not found. * SUCCESS — The status of the entitlements in the &#x60;ids&#x60; field were successfully updated. * UNAUTHORIZED — The user or organization identified by the user access token is not authorized to update the entitlements. * UPDATE\\_FAILED — The update failed. These are considered transient errors and the request should be retried later.
        /// </summary>
        /// <value>A string that indicates whether the status of the entitlements in the &#x60;ids&#x60; field were successfully updated. Possible values are:      * INVALID\\_ID — The entitlement IDs in the &#x60;ids&#x60; field are not valid. * NOT\\_FOUND — The entitlement IDs in the &#x60;ids&#x60; field were not found. * SUCCESS — The status of the entitlements in the &#x60;ids&#x60; field were successfully updated. * UNAUTHORIZED — The user or organization identified by the user access token is not authorized to update the entitlements. * UPDATE\\_FAILED — The update failed. These are considered transient errors and the request should be retried later.</value>
        public enum StatusEnum
        {
            /// <summary>
            /// Enum INVALIDID for value: INVALID_ID
            /// </summary>
            INVALIDID = 1,

            /// <summary>
            /// Enum NOTFOUND for value: NOT_FOUND
            /// </summary>
            NOTFOUND = 2,

            /// <summary>
            /// Enum SUCCESS for value: SUCCESS
            /// </summary>
            SUCCESS = 3,

            /// <summary>
            /// Enum UNAUTHORIZED for value: UNAUTHORIZED
            /// </summary>
            UNAUTHORIZED = 4,

            /// <summary>
            /// Enum UPDATEFAILED for value: UPDATE_FAILED
            /// </summary>
            UPDATEFAILED = 5
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static StatusEnum StatusEnumFromString(string value)
        {
            if (value.Equals("INVALID_ID"))
                return StatusEnum.INVALIDID;

            if (value.Equals("NOT_FOUND"))
                return StatusEnum.NOTFOUND;

            if (value.Equals("SUCCESS"))
                return StatusEnum.SUCCESS;

            if (value.Equals("UNAUTHORIZED"))
                return StatusEnum.UNAUTHORIZED;

            if (value.Equals("UPDATE_FAILED"))
                return StatusEnum.UPDATEFAILED;

            throw new NotImplementedException($"Could not convert value to type StatusEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static StatusEnum? StatusEnumFromStringOrDefault(string value)
        {
            if (value.Equals("INVALID_ID"))
                return StatusEnum.INVALIDID;

            if (value.Equals("NOT_FOUND"))
                return StatusEnum.NOTFOUND;

            if (value.Equals("SUCCESS"))
                return StatusEnum.SUCCESS;

            if (value.Equals("UNAUTHORIZED"))
                return StatusEnum.UNAUTHORIZED;

            if (value.Equals("UPDATE_FAILED"))
                return StatusEnum.UPDATEFAILED;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="StatusEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string StatusEnumToJsonValue(StatusEnum value)
        {
            if (value == StatusEnum.INVALIDID)
                return "INVALID_ID";

            if (value == StatusEnum.NOTFOUND)
                return "NOT_FOUND";

            if (value == StatusEnum.SUCCESS)
                return "SUCCESS";

            if (value == StatusEnum.UNAUTHORIZED)
                return "UNAUTHORIZED";

            if (value == StatusEnum.UPDATEFAILED)
                return "UPDATE_FAILED";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// A string that indicates whether the status of the entitlements in the &#x60;ids&#x60; field were successfully updated. Possible values are:      * INVALID\\_ID — The entitlement IDs in the &#x60;ids&#x60; field are not valid. * NOT\\_FOUND — The entitlement IDs in the &#x60;ids&#x60; field were not found. * SUCCESS — The status of the entitlements in the &#x60;ids&#x60; field were successfully updated. * UNAUTHORIZED — The user or organization identified by the user access token is not authorized to update the entitlements. * UPDATE\\_FAILED — The update failed. These are considered transient errors and the request should be retried later.
        /// </summary>
        /// <value>A string that indicates whether the status of the entitlements in the &#x60;ids&#x60; field were successfully updated. Possible values are:      * INVALID\\_ID — The entitlement IDs in the &#x60;ids&#x60; field are not valid. * NOT\\_FOUND — The entitlement IDs in the &#x60;ids&#x60; field were not found. * SUCCESS — The status of the entitlements in the &#x60;ids&#x60; field were successfully updated. * UNAUTHORIZED — The user or organization identified by the user access token is not authorized to update the entitlements. * UPDATE\\_FAILED — The update failed. These are considered transient errors and the request should be retried later.</value>
        [JsonPropertyName("status")]
        public StatusEnum Status { get; set; }

        /// <summary>
        /// The list of entitlements that the status in the &#x60;status&#x60; field applies to.
        /// </summary>
        /// <value>The list of entitlements that the status in the &#x60;status&#x60; field applies to.</value>
        [JsonPropertyName("ids")]
        public List<string> Ids { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DropsEntitlementUpdated {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Ids: ").Append(Ids).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DropsEntitlementUpdated" />
    /// </summary>
    public class DropsEntitlementUpdatedJsonConverter : JsonConverter<DropsEntitlementUpdated>
    {
        /// <summary>
        /// Deserializes json to <see cref="DropsEntitlementUpdated" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DropsEntitlementUpdated Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DropsEntitlementUpdated.StatusEnum?> status = default;
            Option<List<string>?> ids = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "status":
                            string? statusRawValue = utf8JsonReader.GetString();
                            if (statusRawValue != null)
                                status = new Option<DropsEntitlementUpdated.StatusEnum?>(DropsEntitlementUpdated.StatusEnumFromStringOrDefault(statusRawValue));
                            break;
                        case "ids":
                            ids = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!status.IsSet)
                throw new ArgumentException("Property is required for class DropsEntitlementUpdated.", nameof(status));

            if (!ids.IsSet)
                throw new ArgumentException("Property is required for class DropsEntitlementUpdated.", nameof(ids));

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class DropsEntitlementUpdated.");

            if (ids.IsSet && ids.Value == null)
                throw new ArgumentNullException(nameof(ids), "Property is not nullable for class DropsEntitlementUpdated.");

            return new DropsEntitlementUpdated(status.Value!.Value!, ids.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="DropsEntitlementUpdated" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dropsEntitlementUpdated"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DropsEntitlementUpdated dropsEntitlementUpdated, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dropsEntitlementUpdated, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DropsEntitlementUpdated" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dropsEntitlementUpdated"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DropsEntitlementUpdated dropsEntitlementUpdated, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dropsEntitlementUpdated.Ids == null)
                throw new ArgumentNullException(nameof(dropsEntitlementUpdated.Ids), "Property is required for class DropsEntitlementUpdated.");

            var statusRawValue = DropsEntitlementUpdated.StatusEnumToJsonValue(dropsEntitlementUpdated.Status);
            writer.WriteString("status", statusRawValue);
            writer.WritePropertyName("ids");
            JsonSerializer.Serialize(writer, dropsEntitlementUpdated.Ids, jsonSerializerOptions);
        }
    }
}

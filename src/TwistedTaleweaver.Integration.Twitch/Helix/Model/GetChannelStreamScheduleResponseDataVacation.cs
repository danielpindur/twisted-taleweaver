// <auto-generated>
/*
 * Twitch API Swagger UI (Unofficial)
 *
 * Unofficial Swagger UI for Twitch API.  All endpoints are generated automatically from the [twitch docs](https://dev.twitch.tv/docs/api/reference) page.  __Features:__  * Swagger UI for all Twitch API endpoints * Schemas for _Request Query Parameters_, _Request Body_, _Response Body_ * Some additional schemas like _Clip_, _ChatBadge_, _Prediction_, _Game_, _Channel_, _Video_ etc. * Response codes and examples * Generated types for TypeScript: [ts-twitch-api](https://github.com/DmitryScaletta/ts-twitch-api)  __Repository:__ [github.com/DmitryScaletta/twitch-api-swagger](https://github.com/DmitryScaletta/twitch-api-swagger)
 *
 * The version of the OpenAPI document: helix
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using TwistedTaleweaver.Integration.Twitch.Helix.Client;

namespace TwistedTaleweaver.Integration.Twitch.Helix.Model
{
    /// <summary>
    /// The dates when the broadcaster is on vacation and not streaming. Is set to **null** if vacation mode is not enabled.
    /// </summary>
    public partial class GetChannelStreamScheduleResponseDataVacation : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetChannelStreamScheduleResponseDataVacation" /> class.
        /// </summary>
        /// <param name="startTime">The UTC date and time (in RFC3339 format) of when the broadcaster’s vacation starts.</param>
        /// <param name="endTime">The UTC date and time (in RFC3339 format) of when the broadcaster’s vacation ends.</param>
        [JsonConstructor]
        public GetChannelStreamScheduleResponseDataVacation(DateTime startTime, DateTime endTime)
        {
            StartTime = startTime;
            EndTime = endTime;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The UTC date and time (in RFC3339 format) of when the broadcaster’s vacation starts.
        /// </summary>
        /// <value>The UTC date and time (in RFC3339 format) of when the broadcaster’s vacation starts.</value>
        [JsonPropertyName("start_time")]
        public DateTime StartTime { get; set; }

        /// <summary>
        /// The UTC date and time (in RFC3339 format) of when the broadcaster’s vacation ends.
        /// </summary>
        /// <value>The UTC date and time (in RFC3339 format) of when the broadcaster’s vacation ends.</value>
        [JsonPropertyName("end_time")]
        public DateTime EndTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetChannelStreamScheduleResponseDataVacation {\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetChannelStreamScheduleResponseDataVacation" />
    /// </summary>
    public class GetChannelStreamScheduleResponseDataVacationJsonConverter : JsonConverter<GetChannelStreamScheduleResponseDataVacation>
    {
        /// <summary>
        /// The format to use to serialize StartTime
        /// </summary>
        public static string StartTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize EndTime
        /// </summary>
        public static string EndTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="GetChannelStreamScheduleResponseDataVacation" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetChannelStreamScheduleResponseDataVacation Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateTime?> startTime = default;
            Option<DateTime?> endTime = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "start_time":
                            startTime = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "end_time":
                            endTime = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!startTime.IsSet)
                throw new ArgumentException("Property is required for class GetChannelStreamScheduleResponseDataVacation.", nameof(startTime));

            if (!endTime.IsSet)
                throw new ArgumentException("Property is required for class GetChannelStreamScheduleResponseDataVacation.", nameof(endTime));

            if (startTime.IsSet && startTime.Value == null)
                throw new ArgumentNullException(nameof(startTime), "Property is not nullable for class GetChannelStreamScheduleResponseDataVacation.");

            if (endTime.IsSet && endTime.Value == null)
                throw new ArgumentNullException(nameof(endTime), "Property is not nullable for class GetChannelStreamScheduleResponseDataVacation.");

            return new GetChannelStreamScheduleResponseDataVacation(startTime.Value!.Value!, endTime.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="GetChannelStreamScheduleResponseDataVacation" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getChannelStreamScheduleResponseDataVacation"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetChannelStreamScheduleResponseDataVacation getChannelStreamScheduleResponseDataVacation, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getChannelStreamScheduleResponseDataVacation, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetChannelStreamScheduleResponseDataVacation" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getChannelStreamScheduleResponseDataVacation"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetChannelStreamScheduleResponseDataVacation getChannelStreamScheduleResponseDataVacation, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteString("start_time", getChannelStreamScheduleResponseDataVacation.StartTime.ToString(StartTimeFormat));

            writer.WriteString("end_time", getChannelStreamScheduleResponseDataVacation.EndTime.ToString(EndTimeFormat));
        }
    }
}

// <auto-generated>
/*
 * Twitch API Swagger UI (Unofficial)
 *
 * Unofficial Swagger UI for Twitch API.  All endpoints are generated automatically from the [twitch docs](https://dev.twitch.tv/docs/api/reference) page.  __Features:__  * Swagger UI for all Twitch API endpoints * Schemas for _Request Query Parameters_, _Request Body_, _Response Body_ * Some additional schemas like _Clip_, _ChatBadge_, _Prediction_, _Game_, _Channel_, _Video_ etc. * Response codes and examples * Generated types for TypeScript: [ts-twitch-api](https://github.com/DmitryScaletta/ts-twitch-api)  __Repository:__ [github.com/DmitryScaletta/twitch-api-swagger](https://github.com/DmitryScaletta/twitch-api-swagger)
 *
 * The version of the OpenAPI document: helix
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using TwistedTaleweaver.Integration.Twitch.Helix.Client;

namespace TwistedTaleweaver.Integration.Twitch.Helix.Model
{
    /// <summary>
    /// PollChoicesInner
    /// </summary>
    public partial class PollChoicesInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PollChoicesInner" /> class.
        /// </summary>
        /// <param name="id">An ID that identifies this choice.</param>
        /// <param name="title">The choice’s title. The title may contain a maximum of 25 characters.</param>
        /// <param name="votes">The total number of votes cast for this choice.</param>
        /// <param name="channelPointsVotes">The number of votes cast using Channel Points.</param>
        /// <param name="bitsVotes">Not used; will be set to 0.</param>
        [JsonConstructor]
        public PollChoicesInner(string id, string title, int votes, int channelPointsVotes, int bitsVotes)
        {
            Id = id;
            Title = title;
            Votes = votes;
            ChannelPointsVotes = channelPointsVotes;
            BitsVotes = bitsVotes;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// An ID that identifies this choice.
        /// </summary>
        /// <value>An ID that identifies this choice.</value>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// The choice’s title. The title may contain a maximum of 25 characters.
        /// </summary>
        /// <value>The choice’s title. The title may contain a maximum of 25 characters.</value>
        [JsonPropertyName("title")]
        public string Title { get; set; }

        /// <summary>
        /// The total number of votes cast for this choice.
        /// </summary>
        /// <value>The total number of votes cast for this choice.</value>
        [JsonPropertyName("votes")]
        public int Votes { get; set; }

        /// <summary>
        /// The number of votes cast using Channel Points.
        /// </summary>
        /// <value>The number of votes cast using Channel Points.</value>
        [JsonPropertyName("channel_points_votes")]
        public int ChannelPointsVotes { get; set; }

        /// <summary>
        /// Not used; will be set to 0.
        /// </summary>
        /// <value>Not used; will be set to 0.</value>
        [JsonPropertyName("bits_votes")]
        public int BitsVotes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PollChoicesInner {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Votes: ").Append(Votes).Append("\n");
            sb.Append("  ChannelPointsVotes: ").Append(ChannelPointsVotes).Append("\n");
            sb.Append("  BitsVotes: ").Append(BitsVotes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PollChoicesInner" />
    /// </summary>
    public class PollChoicesInnerJsonConverter : JsonConverter<PollChoicesInner>
    {
        /// <summary>
        /// Deserializes json to <see cref="PollChoicesInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PollChoicesInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> title = default;
            Option<int?> votes = default;
            Option<int?> channelPointsVotes = default;
            Option<int?> bitsVotes = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "votes":
                            votes = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "channel_points_votes":
                            channelPointsVotes = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "bits_votes":
                            bitsVotes = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class PollChoicesInner.", nameof(id));

            if (!title.IsSet)
                throw new ArgumentException("Property is required for class PollChoicesInner.", nameof(title));

            if (!votes.IsSet)
                throw new ArgumentException("Property is required for class PollChoicesInner.", nameof(votes));

            if (!channelPointsVotes.IsSet)
                throw new ArgumentException("Property is required for class PollChoicesInner.", nameof(channelPointsVotes));

            if (!bitsVotes.IsSet)
                throw new ArgumentException("Property is required for class PollChoicesInner.", nameof(bitsVotes));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class PollChoicesInner.");

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class PollChoicesInner.");

            if (votes.IsSet && votes.Value == null)
                throw new ArgumentNullException(nameof(votes), "Property is not nullable for class PollChoicesInner.");

            if (channelPointsVotes.IsSet && channelPointsVotes.Value == null)
                throw new ArgumentNullException(nameof(channelPointsVotes), "Property is not nullable for class PollChoicesInner.");

            if (bitsVotes.IsSet && bitsVotes.Value == null)
                throw new ArgumentNullException(nameof(bitsVotes), "Property is not nullable for class PollChoicesInner.");

            return new PollChoicesInner(id.Value!, title.Value!, votes.Value!.Value!, channelPointsVotes.Value!.Value!, bitsVotes.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="PollChoicesInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="pollChoicesInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PollChoicesInner pollChoicesInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, pollChoicesInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PollChoicesInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="pollChoicesInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PollChoicesInner pollChoicesInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (pollChoicesInner.Id == null)
                throw new ArgumentNullException(nameof(pollChoicesInner.Id), "Property is required for class PollChoicesInner.");

            if (pollChoicesInner.Title == null)
                throw new ArgumentNullException(nameof(pollChoicesInner.Title), "Property is required for class PollChoicesInner.");

            writer.WriteString("id", pollChoicesInner.Id);

            writer.WriteString("title", pollChoicesInner.Title);

            writer.WriteNumber("votes", pollChoicesInner.Votes);

            writer.WriteNumber("channel_points_votes", pollChoicesInner.ChannelPointsVotes);

            writer.WriteNumber("bits_votes", pollChoicesInner.BitsVotes);
        }
    }
}

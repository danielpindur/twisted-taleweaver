// <auto-generated>
/*
 * Twitch API Swagger UI (Unofficial)
 *
 * Unofficial Swagger UI for Twitch API.  All endpoints are generated automatically from the [twitch docs](https://dev.twitch.tv/docs/api/reference) page.  __Features:__  * Swagger UI for all Twitch API endpoints * Schemas for _Request Query Parameters_, _Request Body_, _Response Body_ * Some additional schemas like _Clip_, _ChatBadge_, _Prediction_, _Game_, _Channel_, _Video_ etc. * Response codes and examples * Generated types for TypeScript: [ts-twitch-api](https://github.com/DmitryScaletta/ts-twitch-api)  __Repository:__ [github.com/DmitryScaletta/twitch-api-swagger](https://github.com/DmitryScaletta/twitch-api-swagger)
 *
 * The version of the OpenAPI document: helix
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using TwistedTaleweaver.Integration.Twitch.Helix.Client;

namespace TwistedTaleweaver.Integration.Twitch.Helix.Model
{
    /// <summary>
    /// GetChattersResponse
    /// </summary>
    public partial class GetChattersResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetChattersResponse" /> class.
        /// </summary>
        /// <param name="data">The list of users that are connected to the broadcaster’s chat room. The list is empty if no users are connected to the chat room.</param>
        /// <param name="total">The total number of users that are connected to the broadcaster’s chat room. As you page through the list, the number of users may change as users join and leave the chat room.</param>
        /// <param name="pagination">pagination</param>
        [JsonConstructor]
        public GetChattersResponse(List<Chatter> data, int total, Option<GetExtensionAnalyticsResponsePagination?> pagination = default)
        {
            Data = data;
            Total = total;
            PaginationOption = pagination;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The list of users that are connected to the broadcaster’s chat room. The list is empty if no users are connected to the chat room.
        /// </summary>
        /// <value>The list of users that are connected to the broadcaster’s chat room. The list is empty if no users are connected to the chat room.</value>
        [JsonPropertyName("data")]
        public List<Chatter> Data { get; set; }

        /// <summary>
        /// The total number of users that are connected to the broadcaster’s chat room. As you page through the list, the number of users may change as users join and leave the chat room.
        /// </summary>
        /// <value>The total number of users that are connected to the broadcaster’s chat room. As you page through the list, the number of users may change as users join and leave the chat room.</value>
        [JsonPropertyName("total")]
        public int Total { get; set; }

        /// <summary>
        /// Used to track the state of Pagination
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<GetExtensionAnalyticsResponsePagination?> PaginationOption { get; private set; }

        /// <summary>
        /// Gets or Sets Pagination
        /// </summary>
        [JsonPropertyName("pagination")]
        public GetExtensionAnalyticsResponsePagination? Pagination { get { return this.PaginationOption; } set { this.PaginationOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetChattersResponse {\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  Pagination: ").Append(Pagination).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetChattersResponse" />
    /// </summary>
    public class GetChattersResponseJsonConverter : JsonConverter<GetChattersResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetChattersResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetChattersResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<Chatter>?> data = default;
            Option<int?> total = default;
            Option<GetExtensionAnalyticsResponsePagination?> pagination = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "data":
                            data = new Option<List<Chatter>?>(JsonSerializer.Deserialize<List<Chatter>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "total":
                            total = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "pagination":
                            pagination = new Option<GetExtensionAnalyticsResponsePagination?>(JsonSerializer.Deserialize<GetExtensionAnalyticsResponsePagination>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!data.IsSet)
                throw new ArgumentException("Property is required for class GetChattersResponse.", nameof(data));

            if (!total.IsSet)
                throw new ArgumentException("Property is required for class GetChattersResponse.", nameof(total));

            if (data.IsSet && data.Value == null)
                throw new ArgumentNullException(nameof(data), "Property is not nullable for class GetChattersResponse.");

            if (total.IsSet && total.Value == null)
                throw new ArgumentNullException(nameof(total), "Property is not nullable for class GetChattersResponse.");

            if (pagination.IsSet && pagination.Value == null)
                throw new ArgumentNullException(nameof(pagination), "Property is not nullable for class GetChattersResponse.");

            return new GetChattersResponse(data.Value!, total.Value!.Value!, pagination);
        }

        /// <summary>
        /// Serializes a <see cref="GetChattersResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getChattersResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetChattersResponse getChattersResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getChattersResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetChattersResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getChattersResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetChattersResponse getChattersResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getChattersResponse.Data == null)
                throw new ArgumentNullException(nameof(getChattersResponse.Data), "Property is required for class GetChattersResponse.");

            if (getChattersResponse.PaginationOption.IsSet && getChattersResponse.Pagination == null)
                throw new ArgumentNullException(nameof(getChattersResponse.Pagination), "Property is required for class GetChattersResponse.");

            writer.WritePropertyName("data");
            JsonSerializer.Serialize(writer, getChattersResponse.Data, jsonSerializerOptions);
            writer.WriteNumber("total", getChattersResponse.Total);

            if (getChattersResponse.PaginationOption.IsSet)
            {
                writer.WritePropertyName("pagination");
                JsonSerializer.Serialize(writer, getChattersResponse.Pagination, jsonSerializerOptions);
            }
        }
    }
}

// <auto-generated>
/*
 * Twitch API Swagger UI (Unofficial)
 *
 * Unofficial Swagger UI for Twitch API.  All endpoints are generated automatically from the [twitch docs](https://dev.twitch.tv/docs/api/reference) page.  __Features:__  * Swagger UI for all Twitch API endpoints * Schemas for _Request Query Parameters_, _Request Body_, _Response Body_ * Some additional schemas like _Clip_, _ChatBadge_, _Prediction_, _Game_, _Channel_, _Video_ etc. * Response codes and examples * Generated types for TypeScript: [ts-twitch-api](https://github.com/DmitryScaletta/ts-twitch-api)  __Repository:__ [github.com/DmitryScaletta/twitch-api-swagger](https://github.com/DmitryScaletta/twitch-api-swagger)
 *
 * The version of the OpenAPI document: helix
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using TwistedTaleweaver.Integration.Twitch.Helix.Client;

namespace TwistedTaleweaver.Integration.Twitch.Helix.Model
{
    /// <summary>
    /// Guest
    /// </summary>
    public partial class Guest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Guest" /> class.
        /// </summary>
        /// <param name="slotId">ID representing this guest’s slot assignment.       * Host is always in slot \&quot;0\&quot; * Guests are assigned the following consecutive IDs (e.g, \&quot;1\&quot;, \&quot;2\&quot;, \&quot;3\&quot;, etc) * Screen Share is represented as a special guest with the ID \&quot;SCREENSHARE\&quot; * The identifier here matches the ID referenced in browser source links used in broadcasting software.</param>
        /// <param name="isLive">Flag determining whether or not the guest is visible in the browser source in the host’s streaming software.</param>
        /// <param name="userId">User ID of the guest assigned to this slot.</param>
        /// <param name="userDisplayName">Display name of the guest assigned to this slot.</param>
        /// <param name="userLogin">Login of the guest assigned to this slot.</param>
        /// <param name="volume">Value from 0 to 100 representing the host’s volume setting for this guest.</param>
        /// <param name="assignedAt">Timestamp when this guest was assigned a slot in the session.</param>
        /// <param name="audioSettings">audioSettings</param>
        /// <param name="videoSettings">videoSettings</param>
        [JsonConstructor]
        public Guest(string slotId, bool isLive, string userId, string userDisplayName, string userLogin, int volume, DateTime assignedAt, GuestAudioSettings audioSettings, GuestVideoSettings videoSettings)
        {
            SlotId = slotId;
            IsLive = isLive;
            UserId = userId;
            UserDisplayName = userDisplayName;
            UserLogin = userLogin;
            Volume = volume;
            AssignedAt = assignedAt;
            AudioSettings = audioSettings;
            VideoSettings = videoSettings;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// ID representing this guest’s slot assignment.       * Host is always in slot \&quot;0\&quot; * Guests are assigned the following consecutive IDs (e.g, \&quot;1\&quot;, \&quot;2\&quot;, \&quot;3\&quot;, etc) * Screen Share is represented as a special guest with the ID \&quot;SCREENSHARE\&quot; * The identifier here matches the ID referenced in browser source links used in broadcasting software.
        /// </summary>
        /// <value>ID representing this guest’s slot assignment.       * Host is always in slot \&quot;0\&quot; * Guests are assigned the following consecutive IDs (e.g, \&quot;1\&quot;, \&quot;2\&quot;, \&quot;3\&quot;, etc) * Screen Share is represented as a special guest with the ID \&quot;SCREENSHARE\&quot; * The identifier here matches the ID referenced in browser source links used in broadcasting software.</value>
        [JsonPropertyName("slot_id")]
        public string SlotId { get; set; }

        /// <summary>
        /// Flag determining whether or not the guest is visible in the browser source in the host’s streaming software.
        /// </summary>
        /// <value>Flag determining whether or not the guest is visible in the browser source in the host’s streaming software.</value>
        [JsonPropertyName("is_live")]
        public bool IsLive { get; set; }

        /// <summary>
        /// User ID of the guest assigned to this slot.
        /// </summary>
        /// <value>User ID of the guest assigned to this slot.</value>
        [JsonPropertyName("user_id")]
        public string UserId { get; set; }

        /// <summary>
        /// Display name of the guest assigned to this slot.
        /// </summary>
        /// <value>Display name of the guest assigned to this slot.</value>
        [JsonPropertyName("user_display_name")]
        public string UserDisplayName { get; set; }

        /// <summary>
        /// Login of the guest assigned to this slot.
        /// </summary>
        /// <value>Login of the guest assigned to this slot.</value>
        [JsonPropertyName("user_login")]
        public string UserLogin { get; set; }

        /// <summary>
        /// Value from 0 to 100 representing the host’s volume setting for this guest.
        /// </summary>
        /// <value>Value from 0 to 100 representing the host’s volume setting for this guest.</value>
        [JsonPropertyName("volume")]
        public int Volume { get; set; }

        /// <summary>
        /// Timestamp when this guest was assigned a slot in the session.
        /// </summary>
        /// <value>Timestamp when this guest was assigned a slot in the session.</value>
        [JsonPropertyName("assigned_at")]
        public DateTime AssignedAt { get; set; }

        /// <summary>
        /// Gets or Sets AudioSettings
        /// </summary>
        [JsonPropertyName("audio_settings")]
        public GuestAudioSettings AudioSettings { get; set; }

        /// <summary>
        /// Gets or Sets VideoSettings
        /// </summary>
        [JsonPropertyName("video_settings")]
        public GuestVideoSettings VideoSettings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Guest {\n");
            sb.Append("  SlotId: ").Append(SlotId).Append("\n");
            sb.Append("  IsLive: ").Append(IsLive).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  UserDisplayName: ").Append(UserDisplayName).Append("\n");
            sb.Append("  UserLogin: ").Append(UserLogin).Append("\n");
            sb.Append("  Volume: ").Append(Volume).Append("\n");
            sb.Append("  AssignedAt: ").Append(AssignedAt).Append("\n");
            sb.Append("  AudioSettings: ").Append(AudioSettings).Append("\n");
            sb.Append("  VideoSettings: ").Append(VideoSettings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Guest" />
    /// </summary>
    public class GuestJsonConverter : JsonConverter<Guest>
    {
        /// <summary>
        /// The format to use to serialize AssignedAt
        /// </summary>
        public static string AssignedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="Guest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Guest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> slotId = default;
            Option<bool?> isLive = default;
            Option<string?> userId = default;
            Option<string?> userDisplayName = default;
            Option<string?> userLogin = default;
            Option<int?> volume = default;
            Option<DateTime?> assignedAt = default;
            Option<GuestAudioSettings?> audioSettings = default;
            Option<GuestVideoSettings?> videoSettings = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "slot_id":
                            slotId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "is_live":
                            isLive = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "user_id":
                            userId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "user_display_name":
                            userDisplayName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "user_login":
                            userLogin = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "volume":
                            volume = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "assigned_at":
                            assignedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "audio_settings":
                            audioSettings = new Option<GuestAudioSettings?>(JsonSerializer.Deserialize<GuestAudioSettings>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "video_settings":
                            videoSettings = new Option<GuestVideoSettings?>(JsonSerializer.Deserialize<GuestVideoSettings>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!slotId.IsSet)
                throw new ArgumentException("Property is required for class Guest.", nameof(slotId));

            if (!isLive.IsSet)
                throw new ArgumentException("Property is required for class Guest.", nameof(isLive));

            if (!userId.IsSet)
                throw new ArgumentException("Property is required for class Guest.", nameof(userId));

            if (!userDisplayName.IsSet)
                throw new ArgumentException("Property is required for class Guest.", nameof(userDisplayName));

            if (!userLogin.IsSet)
                throw new ArgumentException("Property is required for class Guest.", nameof(userLogin));

            if (!volume.IsSet)
                throw new ArgumentException("Property is required for class Guest.", nameof(volume));

            if (!assignedAt.IsSet)
                throw new ArgumentException("Property is required for class Guest.", nameof(assignedAt));

            if (!audioSettings.IsSet)
                throw new ArgumentException("Property is required for class Guest.", nameof(audioSettings));

            if (!videoSettings.IsSet)
                throw new ArgumentException("Property is required for class Guest.", nameof(videoSettings));

            if (slotId.IsSet && slotId.Value == null)
                throw new ArgumentNullException(nameof(slotId), "Property is not nullable for class Guest.");

            if (isLive.IsSet && isLive.Value == null)
                throw new ArgumentNullException(nameof(isLive), "Property is not nullable for class Guest.");

            if (userId.IsSet && userId.Value == null)
                throw new ArgumentNullException(nameof(userId), "Property is not nullable for class Guest.");

            if (userDisplayName.IsSet && userDisplayName.Value == null)
                throw new ArgumentNullException(nameof(userDisplayName), "Property is not nullable for class Guest.");

            if (userLogin.IsSet && userLogin.Value == null)
                throw new ArgumentNullException(nameof(userLogin), "Property is not nullable for class Guest.");

            if (volume.IsSet && volume.Value == null)
                throw new ArgumentNullException(nameof(volume), "Property is not nullable for class Guest.");

            if (assignedAt.IsSet && assignedAt.Value == null)
                throw new ArgumentNullException(nameof(assignedAt), "Property is not nullable for class Guest.");

            if (audioSettings.IsSet && audioSettings.Value == null)
                throw new ArgumentNullException(nameof(audioSettings), "Property is not nullable for class Guest.");

            if (videoSettings.IsSet && videoSettings.Value == null)
                throw new ArgumentNullException(nameof(videoSettings), "Property is not nullable for class Guest.");

            return new Guest(slotId.Value!, isLive.Value!.Value!, userId.Value!, userDisplayName.Value!, userLogin.Value!, volume.Value!.Value!, assignedAt.Value!.Value!, audioSettings.Value!, videoSettings.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="Guest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="guest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Guest guest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, guest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Guest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="guest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Guest guest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (guest.SlotId == null)
                throw new ArgumentNullException(nameof(guest.SlotId), "Property is required for class Guest.");

            if (guest.UserId == null)
                throw new ArgumentNullException(nameof(guest.UserId), "Property is required for class Guest.");

            if (guest.UserDisplayName == null)
                throw new ArgumentNullException(nameof(guest.UserDisplayName), "Property is required for class Guest.");

            if (guest.UserLogin == null)
                throw new ArgumentNullException(nameof(guest.UserLogin), "Property is required for class Guest.");

            if (guest.AudioSettings == null)
                throw new ArgumentNullException(nameof(guest.AudioSettings), "Property is required for class Guest.");

            if (guest.VideoSettings == null)
                throw new ArgumentNullException(nameof(guest.VideoSettings), "Property is required for class Guest.");

            writer.WriteString("slot_id", guest.SlotId);

            writer.WriteBoolean("is_live", guest.IsLive);

            writer.WriteString("user_id", guest.UserId);

            writer.WriteString("user_display_name", guest.UserDisplayName);

            writer.WriteString("user_login", guest.UserLogin);

            writer.WriteNumber("volume", guest.Volume);

            writer.WriteString("assigned_at", guest.AssignedAt.ToString(AssignedAtFormat));

            writer.WritePropertyName("audio_settings");
            JsonSerializer.Serialize(writer, guest.AudioSettings, jsonSerializerOptions);
            writer.WritePropertyName("video_settings");
            JsonSerializer.Serialize(writer, guest.VideoSettings, jsonSerializerOptions);
        }
    }
}

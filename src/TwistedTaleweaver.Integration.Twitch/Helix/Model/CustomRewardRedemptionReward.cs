// <auto-generated>
/*
 * Twitch API Swagger UI (Unofficial)
 *
 * Unofficial Swagger UI for Twitch API.  All endpoints are generated automatically from the [twitch docs](https://dev.twitch.tv/docs/api/reference) page.  __Features:__  * Swagger UI for all Twitch API endpoints * Schemas for _Request Query Parameters_, _Request Body_, _Response Body_ * Some additional schemas like _Clip_, _ChatBadge_, _Prediction_, _Game_, _Channel_, _Video_ etc. * Response codes and examples * Generated types for TypeScript: [ts-twitch-api](https://github.com/DmitryScaletta/ts-twitch-api)  __Repository:__ [github.com/DmitryScaletta/twitch-api-swagger](https://github.com/DmitryScaletta/twitch-api-swagger)
 *
 * The version of the OpenAPI document: helix
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using TwistedTaleweaver.Integration.Twitch.Helix.Client;

namespace TwistedTaleweaver.Integration.Twitch.Helix.Model
{
    /// <summary>
    /// An object that describes the reward that the user redeemed.
    /// </summary>
    public partial class CustomRewardRedemptionReward : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomRewardRedemptionReward" /> class.
        /// </summary>
        /// <param name="id">The ID that uniquely identifies the reward.</param>
        /// <param name="title">The reward’s title.</param>
        /// <param name="prompt">The prompt displayed to the viewer if user input is required.</param>
        /// <param name="cost">The reward’s cost, in Channel Points.</param>
        [JsonConstructor]
        public CustomRewardRedemptionReward(string id, string title, string prompt, long cost)
        {
            Id = id;
            Title = title;
            Prompt = prompt;
            Cost = cost;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The ID that uniquely identifies the reward.
        /// </summary>
        /// <value>The ID that uniquely identifies the reward.</value>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// The reward’s title.
        /// </summary>
        /// <value>The reward’s title.</value>
        [JsonPropertyName("title")]
        public string Title { get; set; }

        /// <summary>
        /// The prompt displayed to the viewer if user input is required.
        /// </summary>
        /// <value>The prompt displayed to the viewer if user input is required.</value>
        [JsonPropertyName("prompt")]
        public string Prompt { get; set; }

        /// <summary>
        /// The reward’s cost, in Channel Points.
        /// </summary>
        /// <value>The reward’s cost, in Channel Points.</value>
        [JsonPropertyName("cost")]
        public long Cost { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomRewardRedemptionReward {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Prompt: ").Append(Prompt).Append("\n");
            sb.Append("  Cost: ").Append(Cost).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CustomRewardRedemptionReward" />
    /// </summary>
    public class CustomRewardRedemptionRewardJsonConverter : JsonConverter<CustomRewardRedemptionReward>
    {
        /// <summary>
        /// Deserializes json to <see cref="CustomRewardRedemptionReward" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CustomRewardRedemptionReward Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> title = default;
            Option<string?> prompt = default;
            Option<long?> cost = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "prompt":
                            prompt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "cost":
                            cost = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class CustomRewardRedemptionReward.", nameof(id));

            if (!title.IsSet)
                throw new ArgumentException("Property is required for class CustomRewardRedemptionReward.", nameof(title));

            if (!prompt.IsSet)
                throw new ArgumentException("Property is required for class CustomRewardRedemptionReward.", nameof(prompt));

            if (!cost.IsSet)
                throw new ArgumentException("Property is required for class CustomRewardRedemptionReward.", nameof(cost));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class CustomRewardRedemptionReward.");

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class CustomRewardRedemptionReward.");

            if (prompt.IsSet && prompt.Value == null)
                throw new ArgumentNullException(nameof(prompt), "Property is not nullable for class CustomRewardRedemptionReward.");

            if (cost.IsSet && cost.Value == null)
                throw new ArgumentNullException(nameof(cost), "Property is not nullable for class CustomRewardRedemptionReward.");

            return new CustomRewardRedemptionReward(id.Value!, title.Value!, prompt.Value!, cost.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="CustomRewardRedemptionReward" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="customRewardRedemptionReward"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CustomRewardRedemptionReward customRewardRedemptionReward, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, customRewardRedemptionReward, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CustomRewardRedemptionReward" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="customRewardRedemptionReward"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CustomRewardRedemptionReward customRewardRedemptionReward, JsonSerializerOptions jsonSerializerOptions)
        {
            if (customRewardRedemptionReward.Id == null)
                throw new ArgumentNullException(nameof(customRewardRedemptionReward.Id), "Property is required for class CustomRewardRedemptionReward.");

            if (customRewardRedemptionReward.Title == null)
                throw new ArgumentNullException(nameof(customRewardRedemptionReward.Title), "Property is required for class CustomRewardRedemptionReward.");

            if (customRewardRedemptionReward.Prompt == null)
                throw new ArgumentNullException(nameof(customRewardRedemptionReward.Prompt), "Property is required for class CustomRewardRedemptionReward.");

            writer.WriteString("id", customRewardRedemptionReward.Id);

            writer.WriteString("title", customRewardRedemptionReward.Title);

            writer.WriteString("prompt", customRewardRedemptionReward.Prompt);

            writer.WriteNumber("cost", customRewardRedemptionReward.Cost);
        }
    }
}

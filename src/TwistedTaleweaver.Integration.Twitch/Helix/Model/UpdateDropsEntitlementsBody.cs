// <auto-generated>
/*
 * Twitch API Swagger UI (Unofficial)
 *
 * Unofficial Swagger UI for Twitch API.  All endpoints are generated automatically from the [twitch docs](https://dev.twitch.tv/docs/api/reference) page.  __Features:__  * Swagger UI for all Twitch API endpoints * Schemas for _Request Query Parameters_, _Request Body_, _Response Body_ * Some additional schemas like _Clip_, _ChatBadge_, _Prediction_, _Game_, _Channel_, _Video_ etc. * Response codes and examples * Generated types for TypeScript: [ts-twitch-api](https://github.com/DmitryScaletta/ts-twitch-api)  __Repository:__ [github.com/DmitryScaletta/twitch-api-swagger](https://github.com/DmitryScaletta/twitch-api-swagger)
 *
 * The version of the OpenAPI document: helix
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using TwistedTaleweaver.Integration.Twitch.Helix.Client;

namespace TwistedTaleweaver.Integration.Twitch.Helix.Model
{
    /// <summary>
    /// UpdateDropsEntitlementsBody
    /// </summary>
    public partial class UpdateDropsEntitlementsBody : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateDropsEntitlementsBody" /> class.
        /// </summary>
        /// <param name="entitlementIds">A list of IDs that identify the entitlements to update. You may specify a maximum of 100 IDs.</param>
        /// <param name="fulfillmentStatus">The fulfillment status to set the entitlements to. Possible values are:      * CLAIMED — The user claimed the benefit. * FULFILLED — The developer granted the benefit that the user claimed.</param>
        [JsonConstructor]
        public UpdateDropsEntitlementsBody(Option<List<string>?> entitlementIds = default, Option<FulfillmentStatusEnum?> fulfillmentStatus = default)
        {
            EntitlementIdsOption = entitlementIds;
            FulfillmentStatusOption = fulfillmentStatus;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The fulfillment status to set the entitlements to. Possible values are:      * CLAIMED — The user claimed the benefit. * FULFILLED — The developer granted the benefit that the user claimed.
        /// </summary>
        /// <value>The fulfillment status to set the entitlements to. Possible values are:      * CLAIMED — The user claimed the benefit. * FULFILLED — The developer granted the benefit that the user claimed.</value>
        public enum FulfillmentStatusEnum
        {
            /// <summary>
            /// Enum CLAIMED for value: CLAIMED
            /// </summary>
            CLAIMED = 1,

            /// <summary>
            /// Enum FULFILLED for value: FULFILLED
            /// </summary>
            FULFILLED = 2
        }

        /// <summary>
        /// Returns a <see cref="FulfillmentStatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static FulfillmentStatusEnum FulfillmentStatusEnumFromString(string value)
        {
            if (value.Equals("CLAIMED"))
                return FulfillmentStatusEnum.CLAIMED;

            if (value.Equals("FULFILLED"))
                return FulfillmentStatusEnum.FULFILLED;

            throw new NotImplementedException($"Could not convert value to type FulfillmentStatusEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="FulfillmentStatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static FulfillmentStatusEnum? FulfillmentStatusEnumFromStringOrDefault(string value)
        {
            if (value.Equals("CLAIMED"))
                return FulfillmentStatusEnum.CLAIMED;

            if (value.Equals("FULFILLED"))
                return FulfillmentStatusEnum.FULFILLED;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="FulfillmentStatusEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string FulfillmentStatusEnumToJsonValue(FulfillmentStatusEnum? value)
        {
            if (value == FulfillmentStatusEnum.CLAIMED)
                return "CLAIMED";

            if (value == FulfillmentStatusEnum.FULFILLED)
                return "FULFILLED";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of FulfillmentStatus
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<FulfillmentStatusEnum?> FulfillmentStatusOption { get; private set; }

        /// <summary>
        /// The fulfillment status to set the entitlements to. Possible values are:      * CLAIMED — The user claimed the benefit. * FULFILLED — The developer granted the benefit that the user claimed.
        /// </summary>
        /// <value>The fulfillment status to set the entitlements to. Possible values are:      * CLAIMED — The user claimed the benefit. * FULFILLED — The developer granted the benefit that the user claimed.</value>
        [JsonPropertyName("fulfillment_status")]
        public FulfillmentStatusEnum? FulfillmentStatus { get { return this.FulfillmentStatusOption; } set { this.FulfillmentStatusOption = new(value); } }

        /// <summary>
        /// Used to track the state of EntitlementIds
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> EntitlementIdsOption { get; private set; }

        /// <summary>
        /// A list of IDs that identify the entitlements to update. You may specify a maximum of 100 IDs.
        /// </summary>
        /// <value>A list of IDs that identify the entitlements to update. You may specify a maximum of 100 IDs.</value>
        [JsonPropertyName("entitlement_ids")]
        public List<string>? EntitlementIds { get { return this.EntitlementIdsOption; } set { this.EntitlementIdsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateDropsEntitlementsBody {\n");
            sb.Append("  EntitlementIds: ").Append(EntitlementIds).Append("\n");
            sb.Append("  FulfillmentStatus: ").Append(FulfillmentStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UpdateDropsEntitlementsBody" />
    /// </summary>
    public class UpdateDropsEntitlementsBodyJsonConverter : JsonConverter<UpdateDropsEntitlementsBody>
    {
        /// <summary>
        /// Deserializes json to <see cref="UpdateDropsEntitlementsBody" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override UpdateDropsEntitlementsBody Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<string>?> entitlementIds = default;
            Option<UpdateDropsEntitlementsBody.FulfillmentStatusEnum?> fulfillmentStatus = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "entitlement_ids":
                            entitlementIds = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "fulfillment_status":
                            string? fulfillmentStatusRawValue = utf8JsonReader.GetString();
                            if (fulfillmentStatusRawValue != null)
                                fulfillmentStatus = new Option<UpdateDropsEntitlementsBody.FulfillmentStatusEnum?>(UpdateDropsEntitlementsBody.FulfillmentStatusEnumFromStringOrDefault(fulfillmentStatusRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (entitlementIds.IsSet && entitlementIds.Value == null)
                throw new ArgumentNullException(nameof(entitlementIds), "Property is not nullable for class UpdateDropsEntitlementsBody.");

            if (fulfillmentStatus.IsSet && fulfillmentStatus.Value == null)
                throw new ArgumentNullException(nameof(fulfillmentStatus), "Property is not nullable for class UpdateDropsEntitlementsBody.");

            return new UpdateDropsEntitlementsBody(entitlementIds, fulfillmentStatus);
        }

        /// <summary>
        /// Serializes a <see cref="UpdateDropsEntitlementsBody" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="updateDropsEntitlementsBody"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, UpdateDropsEntitlementsBody updateDropsEntitlementsBody, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, updateDropsEntitlementsBody, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="UpdateDropsEntitlementsBody" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="updateDropsEntitlementsBody"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, UpdateDropsEntitlementsBody updateDropsEntitlementsBody, JsonSerializerOptions jsonSerializerOptions)
        {
            if (updateDropsEntitlementsBody.EntitlementIdsOption.IsSet && updateDropsEntitlementsBody.EntitlementIds == null)
                throw new ArgumentNullException(nameof(updateDropsEntitlementsBody.EntitlementIds), "Property is required for class UpdateDropsEntitlementsBody.");

            if (updateDropsEntitlementsBody.EntitlementIdsOption.IsSet)
            {
                writer.WritePropertyName("entitlement_ids");
                JsonSerializer.Serialize(writer, updateDropsEntitlementsBody.EntitlementIds, jsonSerializerOptions);
            }
            var fulfillmentStatusRawValue = UpdateDropsEntitlementsBody.FulfillmentStatusEnumToJsonValue(updateDropsEntitlementsBody.FulfillmentStatusOption.Value!.Value);
            writer.WriteString("fulfillment_status", fulfillmentStatusRawValue);
        }
    }
}

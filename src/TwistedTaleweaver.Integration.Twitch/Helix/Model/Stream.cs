// <auto-generated>
/*
 * Twitch API Swagger UI (Unofficial)
 *
 * Unofficial Swagger UI for Twitch API.  All endpoints are generated automatically from the [twitch docs](https://dev.twitch.tv/docs/api/reference) page.  __Features:__  * Swagger UI for all Twitch API endpoints * Schemas for _Request Query Parameters_, _Request Body_, _Response Body_ * Some additional schemas like _Clip_, _ChatBadge_, _Prediction_, _Game_, _Channel_, _Video_ etc. * Response codes and examples * Generated types for TypeScript: [ts-twitch-api](https://github.com/DmitryScaletta/ts-twitch-api)  __Repository:__ [github.com/DmitryScaletta/twitch-api-swagger](https://github.com/DmitryScaletta/twitch-api-swagger)
 *
 * The version of the OpenAPI document: helix
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using TwistedTaleweaver.Integration.Twitch.Helix.Client;

namespace TwistedTaleweaver.Integration.Twitch.Helix.Model
{
    /// <summary>
    /// Stream
    /// </summary>
    public partial class Stream : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Stream" /> class.
        /// </summary>
        /// <param name="id">An ID that identifies the stream. You can use this ID later to look up the video on demand (VOD).</param>
        /// <param name="userId">The ID of the user that’s broadcasting the stream.</param>
        /// <param name="userLogin">The user’s login name.</param>
        /// <param name="userName">The user’s display name.</param>
        /// <param name="gameId">The ID of the category or game being played.</param>
        /// <param name="gameName">The ID of the category or game being played.</param>
        /// <param name="type">The type of stream. Possible values are:      * live    If an error occurs, this field is set to an empty string.</param>
        /// <param name="title">The stream’s title. Is an empty string if not set.</param>
        /// <param name="viewerCount">The number of users watching the stream.</param>
        /// <param name="startedAt">The UTC date and time (in RFC3339 format) of when the broadcast began.</param>
        /// <param name="language">The language that the stream uses. This is an ISO 639-1 two-letter language code or _other_ if the stream uses a language not in the list of [supported stream languages](https://help.twitch.tv/s/article/languages-on-twitch#streamlang).</param>
        /// <param name="thumbnailUrl">A URL to an image of a frame from the last 5 minutes of the stream. Replace the width and height placeholders in the URL (&#x60;{width}x{height}&#x60;) with the size of the image you want, in pixels.</param>
        /// <param name="tags">The tags applied to the stream.</param>
        /// <param name="isMature">A Boolean value that indicates whether the stream is meant for mature audiences.</param>
        [JsonConstructor]
        public Stream(string id, string userId, string userLogin, string userName, string gameId, string gameName, TypeEnum type, string title, int viewerCount, DateTime startedAt, string language, string thumbnailUrl, List<string> tags, bool isMature)
        {
            Id = id;
            UserId = userId;
            UserLogin = userLogin;
            UserName = userName;
            GameId = gameId;
            GameName = gameName;
            Type = type;
            Title = title;
            ViewerCount = viewerCount;
            StartedAt = startedAt;
            Language = language;
            ThumbnailUrl = thumbnailUrl;
            Tags = tags;
            IsMature = isMature;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The type of stream. Possible values are:      * live    If an error occurs, this field is set to an empty string.
        /// </summary>
        /// <value>The type of stream. Possible values are:      * live    If an error occurs, this field is set to an empty string.</value>
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Live for value: live
            /// </summary>
            Live = 1
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TypeEnum TypeEnumFromString(string value)
        {
            if (value.Equals("live"))
                return TypeEnum.Live;

            throw new NotImplementedException($"Could not convert value to type TypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TypeEnum? TypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("live"))
                return TypeEnum.Live;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TypeEnumToJsonValue(TypeEnum value)
        {
            if (value == TypeEnum.Live)
                return "live";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// The type of stream. Possible values are:      * live    If an error occurs, this field is set to an empty string.
        /// </summary>
        /// <value>The type of stream. Possible values are:      * live    If an error occurs, this field is set to an empty string.</value>
        [JsonPropertyName("type")]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// An ID that identifies the stream. You can use this ID later to look up the video on demand (VOD).
        /// </summary>
        /// <value>An ID that identifies the stream. You can use this ID later to look up the video on demand (VOD).</value>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// The ID of the user that’s broadcasting the stream.
        /// </summary>
        /// <value>The ID of the user that’s broadcasting the stream.</value>
        [JsonPropertyName("user_id")]
        public string UserId { get; set; }

        /// <summary>
        /// The user’s login name.
        /// </summary>
        /// <value>The user’s login name.</value>
        [JsonPropertyName("user_login")]
        public string UserLogin { get; set; }

        /// <summary>
        /// The user’s display name.
        /// </summary>
        /// <value>The user’s display name.</value>
        [JsonPropertyName("user_name")]
        public string UserName { get; set; }

        /// <summary>
        /// The ID of the category or game being played.
        /// </summary>
        /// <value>The ID of the category or game being played.</value>
        [JsonPropertyName("game_id")]
        public string GameId { get; set; }

        /// <summary>
        /// The ID of the category or game being played.
        /// </summary>
        /// <value>The ID of the category or game being played.</value>
        [JsonPropertyName("game_name")]
        public string GameName { get; set; }

        /// <summary>
        /// The stream’s title. Is an empty string if not set.
        /// </summary>
        /// <value>The stream’s title. Is an empty string if not set.</value>
        [JsonPropertyName("title")]
        public string Title { get; set; }

        /// <summary>
        /// The number of users watching the stream.
        /// </summary>
        /// <value>The number of users watching the stream.</value>
        [JsonPropertyName("viewer_count")]
        public int ViewerCount { get; set; }

        /// <summary>
        /// The UTC date and time (in RFC3339 format) of when the broadcast began.
        /// </summary>
        /// <value>The UTC date and time (in RFC3339 format) of when the broadcast began.</value>
        [JsonPropertyName("started_at")]
        public DateTime StartedAt { get; set; }

        /// <summary>
        /// The language that the stream uses. This is an ISO 639-1 two-letter language code or _other_ if the stream uses a language not in the list of [supported stream languages](https://help.twitch.tv/s/article/languages-on-twitch#streamlang).
        /// </summary>
        /// <value>The language that the stream uses. This is an ISO 639-1 two-letter language code or _other_ if the stream uses a language not in the list of [supported stream languages](https://help.twitch.tv/s/article/languages-on-twitch#streamlang).</value>
        [JsonPropertyName("language")]
        public string Language { get; set; }

        /// <summary>
        /// A URL to an image of a frame from the last 5 minutes of the stream. Replace the width and height placeholders in the URL (&#x60;{width}x{height}&#x60;) with the size of the image you want, in pixels.
        /// </summary>
        /// <value>A URL to an image of a frame from the last 5 minutes of the stream. Replace the width and height placeholders in the URL (&#x60;{width}x{height}&#x60;) with the size of the image you want, in pixels.</value>
        [JsonPropertyName("thumbnail_url")]
        public string ThumbnailUrl { get; set; }
        
        /// <summary>
        /// The tags applied to the stream.
        /// </summary>
        /// <value>The tags applied to the stream.</value>
        [JsonPropertyName("tags")]
        public List<string> Tags { get; set; }

        /// <summary>
        /// A Boolean value that indicates whether the stream is meant for mature audiences.
        /// </summary>
        /// <value>A Boolean value that indicates whether the stream is meant for mature audiences.</value>
        [JsonPropertyName("is_mature")]
        public bool IsMature { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Stream {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  UserLogin: ").Append(UserLogin).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  GameId: ").Append(GameId).Append("\n");
            sb.Append("  GameName: ").Append(GameName).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  ViewerCount: ").Append(ViewerCount).Append("\n");
            sb.Append("  StartedAt: ").Append(StartedAt).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  ThumbnailUrl: ").Append(ThumbnailUrl).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  IsMature: ").Append(IsMature).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Stream" />
    /// </summary>
    public class StreamJsonConverter : JsonConverter<Stream>
    {
        /// <summary>
        /// The format to use to serialize StartedAt
        /// </summary>
        public static string StartedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="Stream" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Stream Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> userId = default;
            Option<string?> userLogin = default;
            Option<string?> userName = default;
            Option<string?> gameId = default;
            Option<string?> gameName = default;
            Option<Stream.TypeEnum?> type = default;
            Option<string?> title = default;
            Option<int?> viewerCount = default;
            Option<DateTime?> startedAt = default;
            Option<string?> language = default;
            Option<string?> thumbnailUrl = default;
            Option<List<string>?> tags = default;
            Option<bool?> isMature = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "user_id":
                            userId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "user_login":
                            userLogin = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "user_name":
                            userName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "game_id":
                            gameId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "game_name":
                            gameName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<Stream.TypeEnum?>(Stream.TypeEnumFromStringOrDefault(typeRawValue));
                            break;
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "viewer_count":
                            viewerCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "started_at":
                            startedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "language":
                            language = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "thumbnail_url":
                            thumbnailUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "tags":
                            tags = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "is_mature":
                            isMature = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class Stream.", nameof(id));

            if (!userId.IsSet)
                throw new ArgumentException("Property is required for class Stream.", nameof(userId));

            if (!userLogin.IsSet)
                throw new ArgumentException("Property is required for class Stream.", nameof(userLogin));

            if (!userName.IsSet)
                throw new ArgumentException("Property is required for class Stream.", nameof(userName));

            if (!gameId.IsSet)
                throw new ArgumentException("Property is required for class Stream.", nameof(gameId));

            if (!gameName.IsSet)
                throw new ArgumentException("Property is required for class Stream.", nameof(gameName));

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class Stream.", nameof(type));

            if (!title.IsSet)
                throw new ArgumentException("Property is required for class Stream.", nameof(title));

            if (!viewerCount.IsSet)
                throw new ArgumentException("Property is required for class Stream.", nameof(viewerCount));

            if (!startedAt.IsSet)
                throw new ArgumentException("Property is required for class Stream.", nameof(startedAt));

            if (!language.IsSet)
                throw new ArgumentException("Property is required for class Stream.", nameof(language));

            if (!thumbnailUrl.IsSet)
                throw new ArgumentException("Property is required for class Stream.", nameof(thumbnailUrl));

            if (!tags.IsSet)
                throw new ArgumentException("Property is required for class Stream.", nameof(tags));

            if (!isMature.IsSet)
                throw new ArgumentException("Property is required for class Stream.", nameof(isMature));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class Stream.");

            if (userId.IsSet && userId.Value == null)
                throw new ArgumentNullException(nameof(userId), "Property is not nullable for class Stream.");

            if (userLogin.IsSet && userLogin.Value == null)
                throw new ArgumentNullException(nameof(userLogin), "Property is not nullable for class Stream.");

            if (userName.IsSet && userName.Value == null)
                throw new ArgumentNullException(nameof(userName), "Property is not nullable for class Stream.");

            if (gameId.IsSet && gameId.Value == null)
                throw new ArgumentNullException(nameof(gameId), "Property is not nullable for class Stream.");

            if (gameName.IsSet && gameName.Value == null)
                throw new ArgumentNullException(nameof(gameName), "Property is not nullable for class Stream.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class Stream.");

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class Stream.");

            if (viewerCount.IsSet && viewerCount.Value == null)
                throw new ArgumentNullException(nameof(viewerCount), "Property is not nullable for class Stream.");

            if (startedAt.IsSet && startedAt.Value == null)
                throw new ArgumentNullException(nameof(startedAt), "Property is not nullable for class Stream.");

            if (language.IsSet && language.Value == null)
                throw new ArgumentNullException(nameof(language), "Property is not nullable for class Stream.");

            if (thumbnailUrl.IsSet && thumbnailUrl.Value == null)
                throw new ArgumentNullException(nameof(thumbnailUrl), "Property is not nullable for class Stream.");

            if (tags.IsSet && tags.Value == null)
                throw new ArgumentNullException(nameof(tags), "Property is not nullable for class Stream.");

            if (isMature.IsSet && isMature.Value == null)
                throw new ArgumentNullException(nameof(isMature), "Property is not nullable for class Stream.");

            return new Stream(id.Value!, userId.Value!, userLogin.Value!, userName.Value!, gameId.Value!, gameName.Value!, type.Value!.Value!, title.Value!, viewerCount.Value!.Value!, startedAt.Value!.Value!, language.Value!, thumbnailUrl.Value!, tags.Value!, isMature.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="Stream" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="stream"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Stream stream, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, stream, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Stream" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="stream"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Stream stream, JsonSerializerOptions jsonSerializerOptions)
        {
            if (stream.Id == null)
                throw new ArgumentNullException(nameof(stream.Id), "Property is required for class Stream.");

            if (stream.UserId == null)
                throw new ArgumentNullException(nameof(stream.UserId), "Property is required for class Stream.");

            if (stream.UserLogin == null)
                throw new ArgumentNullException(nameof(stream.UserLogin), "Property is required for class Stream.");

            if (stream.UserName == null)
                throw new ArgumentNullException(nameof(stream.UserName), "Property is required for class Stream.");

            if (stream.GameId == null)
                throw new ArgumentNullException(nameof(stream.GameId), "Property is required for class Stream.");

            if (stream.GameName == null)
                throw new ArgumentNullException(nameof(stream.GameName), "Property is required for class Stream.");

            if (stream.Title == null)
                throw new ArgumentNullException(nameof(stream.Title), "Property is required for class Stream.");

            if (stream.Language == null)
                throw new ArgumentNullException(nameof(stream.Language), "Property is required for class Stream.");

            if (stream.ThumbnailUrl == null)
                throw new ArgumentNullException(nameof(stream.ThumbnailUrl), "Property is required for class Stream.");

            if (stream.Tags == null)
                throw new ArgumentNullException(nameof(stream.Tags), "Property is required for class Stream.");

            writer.WriteString("id", stream.Id);

            writer.WriteString("user_id", stream.UserId);

            writer.WriteString("user_login", stream.UserLogin);

            writer.WriteString("user_name", stream.UserName);

            writer.WriteString("game_id", stream.GameId);

            writer.WriteString("game_name", stream.GameName);

            var typeRawValue = Stream.TypeEnumToJsonValue(stream.Type);
            writer.WriteString("type", typeRawValue);
            writer.WriteString("title", stream.Title);

            writer.WriteNumber("viewer_count", stream.ViewerCount);

            writer.WriteString("started_at", stream.StartedAt.ToString(StartedAtFormat));

            writer.WriteString("language", stream.Language);

            writer.WriteString("thumbnail_url", stream.ThumbnailUrl);

            writer.WritePropertyName("tags");
            JsonSerializer.Serialize(writer, stream.Tags, jsonSerializerOptions);
            writer.WriteBoolean("is_mature", stream.IsMature);
        }
    }
}

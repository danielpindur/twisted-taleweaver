// <auto-generated>
/*
 * Twitch API Swagger UI (Unofficial)
 *
 * Unofficial Swagger UI for Twitch API.  All endpoints are generated automatically from the [twitch docs](https://dev.twitch.tv/docs/api/reference) page.  __Features:__  * Swagger UI for all Twitch API endpoints * Schemas for _Request Query Parameters_, _Request Body_, _Response Body_ * Some additional schemas like _Clip_, _ChatBadge_, _Prediction_, _Game_, _Channel_, _Video_ etc. * Response codes and examples * Generated types for TypeScript: [ts-twitch-api](https://github.com/DmitryScaletta/ts-twitch-api)  __Repository:__ [github.com/DmitryScaletta/twitch-api-swagger](https://github.com/DmitryScaletta/twitch-api-swagger)
 *
 * The version of the OpenAPI document: helix
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using TwistedTaleweaver.Integration.Twitch.Helix.Client;

namespace TwistedTaleweaver.Integration.Twitch.Helix.Model
{
    /// <summary>
    /// ChatSettings
    /// </summary>
    public partial class ChatSettings : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChatSettings" /> class.
        /// </summary>
        /// <param name="broadcasterId">The ID of the broadcaster specified in the request.</param>
        /// <param name="emoteMode">A Boolean value that determines whether chat messages must contain only emotes. Is **true** if chat messages may contain only emotes; otherwise, **false**.</param>
        /// <param name="followerMode">A Boolean value that determines whether the broadcaster restricts the chat room to followers only.      Is **true** if the broadcaster restricts the chat room to followers only; otherwise, **false**.      See the &#x60;follower_mode_duration&#x60; field for how long users must follow the broadcaster before being able to participate in the chat room.</param>
        /// <param name="slowMode">A Boolean value that determines whether the broadcaster limits how often users in the chat room are allowed to send messages.      Is **true** if the broadcaster applies a delay; otherwise, **false**.      See the &#x60;slow_mode_wait_time&#x60; field for the delay.</param>
        /// <param name="subscriberMode">A Boolean value that determines whether only users that subscribe to the broadcaster’s channel may talk in the chat room.      Is **true** if the broadcaster restricts the chat room to subscribers only; otherwise, **false**.</param>
        /// <param name="uniqueChatMode">A Boolean value that determines whether the broadcaster requires users to post only unique messages in the chat room.      Is **true** if the broadcaster requires unique messages only; otherwise, **false**.</param>
        /// <param name="followerModeDuration">The length of time, in minutes, that users must follow the broadcaster before being able to participate in the chat room. Is **null** if &#x60;follower_mode&#x60; is **false**.</param>
        /// <param name="moderatorId">The moderator’s ID. The response includes this field only if the request specifies a user access token that includes the **moderator:read:chat\\_settings** scope.</param>
        /// <param name="nonModeratorChatDelay">A Boolean value that determines whether the broadcaster adds a short delay before chat messages appear in the chat room. This gives chat moderators and bots a chance to remove them before viewers can see the message. See the &#x60;non_moderator_chat_delay_duration&#x60; field for the length of the delay. Is **true** if the broadcaster applies a delay; otherwise, **false**.      The response includes this field only if the request specifies a user access token that includes the **moderator:read:chat\\_settings** scope and the user in the _moderator\\_id_ query parameter is one of the broadcaster’s moderators.</param>
        /// <param name="nonModeratorChatDelayDuration">The amount of time, in seconds, that messages are delayed before appearing in chat. Is **null** if &#x60;non_moderator_chat_delay&#x60; is **false**.      The response includes this field only if the request specifies a user access token that includes the **moderator:read:chat\\_settings** scope and the user in the _moderator\\_id_ query parameter is one of the broadcaster’s moderators.</param>
        /// <param name="slowModeWaitTime">The amount of time, in seconds, that users must wait between sending messages.      Is **null** if slow\\_mode is **false**.</param>
        [JsonConstructor]
        public ChatSettings(string broadcasterId, bool emoteMode, bool followerMode, bool slowMode, bool subscriberMode, bool uniqueChatMode, int? followerModeDuration = default, Option<string?> moderatorId = default, Option<bool?> nonModeratorChatDelay = default, Option<int?> nonModeratorChatDelayDuration = default, int? slowModeWaitTime = default)
        {
            BroadcasterId = broadcasterId;
            EmoteMode = emoteMode;
            FollowerMode = followerMode;
            SlowMode = slowMode;
            SubscriberMode = subscriberMode;
            UniqueChatMode = uniqueChatMode;
            FollowerModeDuration = followerModeDuration;
            ModeratorIdOption = moderatorId;
            NonModeratorChatDelayOption = nonModeratorChatDelay;
            NonModeratorChatDelayDurationOption = nonModeratorChatDelayDuration;
            SlowModeWaitTime = slowModeWaitTime;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The ID of the broadcaster specified in the request.
        /// </summary>
        /// <value>The ID of the broadcaster specified in the request.</value>
        [JsonPropertyName("broadcaster_id")]
        public string BroadcasterId { get; set; }

        /// <summary>
        /// A Boolean value that determines whether chat messages must contain only emotes. Is **true** if chat messages may contain only emotes; otherwise, **false**.
        /// </summary>
        /// <value>A Boolean value that determines whether chat messages must contain only emotes. Is **true** if chat messages may contain only emotes; otherwise, **false**.</value>
        [JsonPropertyName("emote_mode")]
        public bool EmoteMode { get; set; }

        /// <summary>
        /// A Boolean value that determines whether the broadcaster restricts the chat room to followers only.      Is **true** if the broadcaster restricts the chat room to followers only; otherwise, **false**.      See the &#x60;follower_mode_duration&#x60; field for how long users must follow the broadcaster before being able to participate in the chat room.
        /// </summary>
        /// <value>A Boolean value that determines whether the broadcaster restricts the chat room to followers only.      Is **true** if the broadcaster restricts the chat room to followers only; otherwise, **false**.      See the &#x60;follower_mode_duration&#x60; field for how long users must follow the broadcaster before being able to participate in the chat room.</value>
        [JsonPropertyName("follower_mode")]
        public bool FollowerMode { get; set; }

        /// <summary>
        /// A Boolean value that determines whether the broadcaster limits how often users in the chat room are allowed to send messages.      Is **true** if the broadcaster applies a delay; otherwise, **false**.      See the &#x60;slow_mode_wait_time&#x60; field for the delay.
        /// </summary>
        /// <value>A Boolean value that determines whether the broadcaster limits how often users in the chat room are allowed to send messages.      Is **true** if the broadcaster applies a delay; otherwise, **false**.      See the &#x60;slow_mode_wait_time&#x60; field for the delay.</value>
        [JsonPropertyName("slow_mode")]
        public bool SlowMode { get; set; }

        /// <summary>
        /// A Boolean value that determines whether only users that subscribe to the broadcaster’s channel may talk in the chat room.      Is **true** if the broadcaster restricts the chat room to subscribers only; otherwise, **false**.
        /// </summary>
        /// <value>A Boolean value that determines whether only users that subscribe to the broadcaster’s channel may talk in the chat room.      Is **true** if the broadcaster restricts the chat room to subscribers only; otherwise, **false**.</value>
        [JsonPropertyName("subscriber_mode")]
        public bool SubscriberMode { get; set; }

        /// <summary>
        /// A Boolean value that determines whether the broadcaster requires users to post only unique messages in the chat room.      Is **true** if the broadcaster requires unique messages only; otherwise, **false**.
        /// </summary>
        /// <value>A Boolean value that determines whether the broadcaster requires users to post only unique messages in the chat room.      Is **true** if the broadcaster requires unique messages only; otherwise, **false**.</value>
        [JsonPropertyName("unique_chat_mode")]
        public bool UniqueChatMode { get; set; }

        /// <summary>
        /// The length of time, in minutes, that users must follow the broadcaster before being able to participate in the chat room. Is **null** if &#x60;follower_mode&#x60; is **false**.
        /// </summary>
        /// <value>The length of time, in minutes, that users must follow the broadcaster before being able to participate in the chat room. Is **null** if &#x60;follower_mode&#x60; is **false**.</value>
        [JsonPropertyName("follower_mode_duration")]
        public int? FollowerModeDuration { get; set; }

        /// <summary>
        /// Used to track the state of ModeratorId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ModeratorIdOption { get; private set; }

        /// <summary>
        /// The moderator’s ID. The response includes this field only if the request specifies a user access token that includes the **moderator:read:chat\\_settings** scope.
        /// </summary>
        /// <value>The moderator’s ID. The response includes this field only if the request specifies a user access token that includes the **moderator:read:chat\\_settings** scope.</value>
        [JsonPropertyName("moderator_id")]
        public string? ModeratorId { get { return this.ModeratorIdOption; } set { this.ModeratorIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of NonModeratorChatDelay
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> NonModeratorChatDelayOption { get; private set; }

        /// <summary>
        /// A Boolean value that determines whether the broadcaster adds a short delay before chat messages appear in the chat room. This gives chat moderators and bots a chance to remove them before viewers can see the message. See the &#x60;non_moderator_chat_delay_duration&#x60; field for the length of the delay. Is **true** if the broadcaster applies a delay; otherwise, **false**.      The response includes this field only if the request specifies a user access token that includes the **moderator:read:chat\\_settings** scope and the user in the _moderator\\_id_ query parameter is one of the broadcaster’s moderators.
        /// </summary>
        /// <value>A Boolean value that determines whether the broadcaster adds a short delay before chat messages appear in the chat room. This gives chat moderators and bots a chance to remove them before viewers can see the message. See the &#x60;non_moderator_chat_delay_duration&#x60; field for the length of the delay. Is **true** if the broadcaster applies a delay; otherwise, **false**.      The response includes this field only if the request specifies a user access token that includes the **moderator:read:chat\\_settings** scope and the user in the _moderator\\_id_ query parameter is one of the broadcaster’s moderators.</value>
        [JsonPropertyName("non_moderator_chat_delay")]
        public bool? NonModeratorChatDelay { get { return this.NonModeratorChatDelayOption; } set { this.NonModeratorChatDelayOption = new(value); } }

        /// <summary>
        /// Used to track the state of NonModeratorChatDelayDuration
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> NonModeratorChatDelayDurationOption { get; private set; }

        /// <summary>
        /// The amount of time, in seconds, that messages are delayed before appearing in chat. Is **null** if &#x60;non_moderator_chat_delay&#x60; is **false**.      The response includes this field only if the request specifies a user access token that includes the **moderator:read:chat\\_settings** scope and the user in the _moderator\\_id_ query parameter is one of the broadcaster’s moderators.
        /// </summary>
        /// <value>The amount of time, in seconds, that messages are delayed before appearing in chat. Is **null** if &#x60;non_moderator_chat_delay&#x60; is **false**.      The response includes this field only if the request specifies a user access token that includes the **moderator:read:chat\\_settings** scope and the user in the _moderator\\_id_ query parameter is one of the broadcaster’s moderators.</value>
        [JsonPropertyName("non_moderator_chat_delay_duration")]
        public int? NonModeratorChatDelayDuration { get { return this.NonModeratorChatDelayDurationOption; } set { this.NonModeratorChatDelayDurationOption = new(value); } }

        /// <summary>
        /// The amount of time, in seconds, that users must wait between sending messages.      Is **null** if slow\\_mode is **false**.
        /// </summary>
        /// <value>The amount of time, in seconds, that users must wait between sending messages.      Is **null** if slow\\_mode is **false**.</value>
        [JsonPropertyName("slow_mode_wait_time")]
        public int? SlowModeWaitTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ChatSettings {\n");
            sb.Append("  BroadcasterId: ").Append(BroadcasterId).Append("\n");
            sb.Append("  EmoteMode: ").Append(EmoteMode).Append("\n");
            sb.Append("  FollowerMode: ").Append(FollowerMode).Append("\n");
            sb.Append("  SlowMode: ").Append(SlowMode).Append("\n");
            sb.Append("  SubscriberMode: ").Append(SubscriberMode).Append("\n");
            sb.Append("  UniqueChatMode: ").Append(UniqueChatMode).Append("\n");
            sb.Append("  FollowerModeDuration: ").Append(FollowerModeDuration).Append("\n");
            sb.Append("  ModeratorId: ").Append(ModeratorId).Append("\n");
            sb.Append("  NonModeratorChatDelay: ").Append(NonModeratorChatDelay).Append("\n");
            sb.Append("  NonModeratorChatDelayDuration: ").Append(NonModeratorChatDelayDuration).Append("\n");
            sb.Append("  SlowModeWaitTime: ").Append(SlowModeWaitTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ChatSettings" />
    /// </summary>
    public class ChatSettingsJsonConverter : JsonConverter<ChatSettings>
    {
        /// <summary>
        /// Deserializes json to <see cref="ChatSettings" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ChatSettings Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> broadcasterId = default;
            Option<bool?> emoteMode = default;
            Option<bool?> followerMode = default;
            Option<bool?> slowMode = default;
            Option<bool?> subscriberMode = default;
            Option<bool?> uniqueChatMode = default;
            Option<int?> followerModeDuration = default;
            Option<string?> moderatorId = default;
            Option<bool?> nonModeratorChatDelay = default;
            Option<int?> nonModeratorChatDelayDuration = default;
            Option<int?> slowModeWaitTime = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "broadcaster_id":
                            broadcasterId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "emote_mode":
                            emoteMode = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "follower_mode":
                            followerMode = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "slow_mode":
                            slowMode = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "subscriber_mode":
                            subscriberMode = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "unique_chat_mode":
                            uniqueChatMode = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "follower_mode_duration":
                            followerModeDuration = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "moderator_id":
                            moderatorId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "non_moderator_chat_delay":
                            nonModeratorChatDelay = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "non_moderator_chat_delay_duration":
                            nonModeratorChatDelayDuration = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "slow_mode_wait_time":
                            slowModeWaitTime = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!broadcasterId.IsSet)
                throw new ArgumentException("Property is required for class ChatSettings.", nameof(broadcasterId));

            if (!emoteMode.IsSet)
                throw new ArgumentException("Property is required for class ChatSettings.", nameof(emoteMode));

            if (!followerMode.IsSet)
                throw new ArgumentException("Property is required for class ChatSettings.", nameof(followerMode));

            if (!slowMode.IsSet)
                throw new ArgumentException("Property is required for class ChatSettings.", nameof(slowMode));

            if (!subscriberMode.IsSet)
                throw new ArgumentException("Property is required for class ChatSettings.", nameof(subscriberMode));

            if (!uniqueChatMode.IsSet)
                throw new ArgumentException("Property is required for class ChatSettings.", nameof(uniqueChatMode));

            if (!followerModeDuration.IsSet)
                throw new ArgumentException("Property is required for class ChatSettings.", nameof(followerModeDuration));

            if (!slowModeWaitTime.IsSet)
                throw new ArgumentException("Property is required for class ChatSettings.", nameof(slowModeWaitTime));

            if (broadcasterId.IsSet && broadcasterId.Value == null)
                throw new ArgumentNullException(nameof(broadcasterId), "Property is not nullable for class ChatSettings.");

            if (emoteMode.IsSet && emoteMode.Value == null)
                throw new ArgumentNullException(nameof(emoteMode), "Property is not nullable for class ChatSettings.");

            if (followerMode.IsSet && followerMode.Value == null)
                throw new ArgumentNullException(nameof(followerMode), "Property is not nullable for class ChatSettings.");

            if (slowMode.IsSet && slowMode.Value == null)
                throw new ArgumentNullException(nameof(slowMode), "Property is not nullable for class ChatSettings.");

            if (subscriberMode.IsSet && subscriberMode.Value == null)
                throw new ArgumentNullException(nameof(subscriberMode), "Property is not nullable for class ChatSettings.");

            if (uniqueChatMode.IsSet && uniqueChatMode.Value == null)
                throw new ArgumentNullException(nameof(uniqueChatMode), "Property is not nullable for class ChatSettings.");

            if (moderatorId.IsSet && moderatorId.Value == null)
                throw new ArgumentNullException(nameof(moderatorId), "Property is not nullable for class ChatSettings.");

            if (nonModeratorChatDelay.IsSet && nonModeratorChatDelay.Value == null)
                throw new ArgumentNullException(nameof(nonModeratorChatDelay), "Property is not nullable for class ChatSettings.");

            return new ChatSettings(broadcasterId.Value!, emoteMode.Value!.Value!, followerMode.Value!.Value!, slowMode.Value!.Value!, subscriberMode.Value!.Value!, uniqueChatMode.Value!.Value!, followerModeDuration.Value!, moderatorId, nonModeratorChatDelay, nonModeratorChatDelayDuration, slowModeWaitTime.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="ChatSettings" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="chatSettings"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ChatSettings chatSettings, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, chatSettings, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ChatSettings" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="chatSettings"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ChatSettings chatSettings, JsonSerializerOptions jsonSerializerOptions)
        {
            if (chatSettings.BroadcasterId == null)
                throw new ArgumentNullException(nameof(chatSettings.BroadcasterId), "Property is required for class ChatSettings.");

            if (chatSettings.ModeratorIdOption.IsSet && chatSettings.ModeratorId == null)
                throw new ArgumentNullException(nameof(chatSettings.ModeratorId), "Property is required for class ChatSettings.");

            writer.WriteString("broadcaster_id", chatSettings.BroadcasterId);

            writer.WriteBoolean("emote_mode", chatSettings.EmoteMode);

            writer.WriteBoolean("follower_mode", chatSettings.FollowerMode);

            writer.WriteBoolean("slow_mode", chatSettings.SlowMode);

            writer.WriteBoolean("subscriber_mode", chatSettings.SubscriberMode);

            writer.WriteBoolean("unique_chat_mode", chatSettings.UniqueChatMode);

            if (chatSettings.FollowerModeDuration != null)
                writer.WriteNumber("follower_mode_duration", chatSettings.FollowerModeDuration.Value);
            else
                writer.WriteNull("follower_mode_duration");

            if (chatSettings.ModeratorIdOption.IsSet)
                writer.WriteString("moderator_id", chatSettings.ModeratorId);

            if (chatSettings.NonModeratorChatDelayOption.IsSet)
                writer.WriteBoolean("non_moderator_chat_delay", chatSettings.NonModeratorChatDelayOption.Value!.Value);

            if (chatSettings.NonModeratorChatDelayDurationOption.IsSet)
                if (chatSettings.NonModeratorChatDelayDurationOption.Value != null)
                    writer.WriteNumber("non_moderator_chat_delay_duration", chatSettings.NonModeratorChatDelayDurationOption.Value!.Value);
                else
                    writer.WriteNull("non_moderator_chat_delay_duration");

            if (chatSettings.SlowModeWaitTime != null)
                writer.WriteNumber("slow_mode_wait_time", chatSettings.SlowModeWaitTime.Value);
            else
                writer.WriteNull("slow_mode_wait_time");
        }
    }
}

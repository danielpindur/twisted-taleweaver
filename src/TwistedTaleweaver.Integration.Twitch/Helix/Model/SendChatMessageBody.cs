// <auto-generated>
/*
 * Twitch API Swagger UI (Unofficial)
 *
 * Unofficial Swagger UI for Twitch API.  All endpoints are generated automatically from the [twitch docs](https://dev.twitch.tv/docs/api/reference) page.  __Features:__  * Swagger UI for all Twitch API endpoints * Schemas for _Request Query Parameters_, _Request Body_, _Response Body_ * Some additional schemas like _Clip_, _ChatBadge_, _Prediction_, _Game_, _Channel_, _Video_ etc. * Response codes and examples * Generated types for TypeScript: [ts-twitch-api](https://github.com/DmitryScaletta/ts-twitch-api)  __Repository:__ [github.com/DmitryScaletta/twitch-api-swagger](https://github.com/DmitryScaletta/twitch-api-swagger)
 *
 * The version of the OpenAPI document: helix
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using TwistedTaleweaver.Integration.Twitch.Helix.Client;

namespace TwistedTaleweaver.Integration.Twitch.Helix.Model
{
    /// <summary>
    /// SendChatMessageBody
    /// </summary>
    public partial class SendChatMessageBody : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SendChatMessageBody" /> class.
        /// </summary>
        /// <param name="broadcasterId">The ID of the broadcaster whose chat room the message will be sent to.</param>
        /// <param name="senderId">The ID of the user sending the message. This ID must match the user ID in the user access token.</param>
        /// <param name="message">The message to send. The message is limited to a maximum of 500 characters. Chat messages can also include emoticons. To include emoticons, use the name of the emote. The names are case sensitive. Don’t include colons around the name (e.g., :bleedPurple:). If Twitch recognizes the name, Twitch converts the name to the emote before writing the chat message to the chat room</param>
        /// <param name="replyParentMessageId">The ID of the chat message being replied to.</param>
        [JsonConstructor]
        public SendChatMessageBody(string broadcasterId, string senderId, string message, Option<string?> replyParentMessageId = default)
        {
            BroadcasterId = broadcasterId;
            SenderId = senderId;
            Message = message;
            ReplyParentMessageIdOption = replyParentMessageId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The ID of the broadcaster whose chat room the message will be sent to.
        /// </summary>
        /// <value>The ID of the broadcaster whose chat room the message will be sent to.</value>
        [JsonPropertyName("broadcaster_id")]
        public string BroadcasterId { get; set; }

        /// <summary>
        /// The ID of the user sending the message. This ID must match the user ID in the user access token.
        /// </summary>
        /// <value>The ID of the user sending the message. This ID must match the user ID in the user access token.</value>
        [JsonPropertyName("sender_id")]
        public string SenderId { get; set; }

        /// <summary>
        /// The message to send. The message is limited to a maximum of 500 characters. Chat messages can also include emoticons. To include emoticons, use the name of the emote. The names are case sensitive. Don’t include colons around the name (e.g., :bleedPurple:). If Twitch recognizes the name, Twitch converts the name to the emote before writing the chat message to the chat room
        /// </summary>
        /// <value>The message to send. The message is limited to a maximum of 500 characters. Chat messages can also include emoticons. To include emoticons, use the name of the emote. The names are case sensitive. Don’t include colons around the name (e.g., :bleedPurple:). If Twitch recognizes the name, Twitch converts the name to the emote before writing the chat message to the chat room</value>
        [JsonPropertyName("message")]
        public string Message { get; set; }

        /// <summary>
        /// Used to track the state of ReplyParentMessageId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ReplyParentMessageIdOption { get; private set; }

        /// <summary>
        /// The ID of the chat message being replied to.
        /// </summary>
        /// <value>The ID of the chat message being replied to.</value>
        [JsonPropertyName("reply_parent_message_id")]
        public string? ReplyParentMessageId { get { return this.ReplyParentMessageIdOption; } set { this.ReplyParentMessageIdOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SendChatMessageBody {\n");
            sb.Append("  BroadcasterId: ").Append(BroadcasterId).Append("\n");
            sb.Append("  SenderId: ").Append(SenderId).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  ReplyParentMessageId: ").Append(ReplyParentMessageId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SendChatMessageBody" />
    /// </summary>
    public class SendChatMessageBodyJsonConverter : JsonConverter<SendChatMessageBody>
    {
        /// <summary>
        /// Deserializes json to <see cref="SendChatMessageBody" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SendChatMessageBody Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> broadcasterId = default;
            Option<string?> senderId = default;
            Option<string?> message = default;
            Option<string?> replyParentMessageId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "broadcaster_id":
                            broadcasterId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "sender_id":
                            senderId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "message":
                            message = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "reply_parent_message_id":
                            replyParentMessageId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!broadcasterId.IsSet)
                throw new ArgumentException("Property is required for class SendChatMessageBody.", nameof(broadcasterId));

            if (!senderId.IsSet)
                throw new ArgumentException("Property is required for class SendChatMessageBody.", nameof(senderId));

            if (!message.IsSet)
                throw new ArgumentException("Property is required for class SendChatMessageBody.", nameof(message));

            if (broadcasterId.IsSet && broadcasterId.Value == null)
                throw new ArgumentNullException(nameof(broadcasterId), "Property is not nullable for class SendChatMessageBody.");

            if (senderId.IsSet && senderId.Value == null)
                throw new ArgumentNullException(nameof(senderId), "Property is not nullable for class SendChatMessageBody.");

            if (message.IsSet && message.Value == null)
                throw new ArgumentNullException(nameof(message), "Property is not nullable for class SendChatMessageBody.");

            if (replyParentMessageId.IsSet && replyParentMessageId.Value == null)
                throw new ArgumentNullException(nameof(replyParentMessageId), "Property is not nullable for class SendChatMessageBody.");

            return new SendChatMessageBody(broadcasterId.Value!, senderId.Value!, message.Value!, replyParentMessageId);
        }

        /// <summary>
        /// Serializes a <see cref="SendChatMessageBody" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="sendChatMessageBody"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SendChatMessageBody sendChatMessageBody, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, sendChatMessageBody, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SendChatMessageBody" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="sendChatMessageBody"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SendChatMessageBody sendChatMessageBody, JsonSerializerOptions jsonSerializerOptions)
        {
            if (sendChatMessageBody.BroadcasterId == null)
                throw new ArgumentNullException(nameof(sendChatMessageBody.BroadcasterId), "Property is required for class SendChatMessageBody.");

            if (sendChatMessageBody.SenderId == null)
                throw new ArgumentNullException(nameof(sendChatMessageBody.SenderId), "Property is required for class SendChatMessageBody.");

            if (sendChatMessageBody.Message == null)
                throw new ArgumentNullException(nameof(sendChatMessageBody.Message), "Property is required for class SendChatMessageBody.");

            if (sendChatMessageBody.ReplyParentMessageIdOption.IsSet && sendChatMessageBody.ReplyParentMessageId == null)
                throw new ArgumentNullException(nameof(sendChatMessageBody.ReplyParentMessageId), "Property is required for class SendChatMessageBody.");

            writer.WriteString("broadcaster_id", sendChatMessageBody.BroadcasterId);

            writer.WriteString("sender_id", sendChatMessageBody.SenderId);

            writer.WriteString("message", sendChatMessageBody.Message);

            if (sendChatMessageBody.ReplyParentMessageIdOption.IsSet)
                writer.WriteString("reply_parent_message_id", sendChatMessageBody.ReplyParentMessageId);
        }
    }
}

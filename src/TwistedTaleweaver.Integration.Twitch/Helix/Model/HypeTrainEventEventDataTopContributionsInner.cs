// <auto-generated>
/*
 * Twitch API Swagger UI (Unofficial)
 *
 * Unofficial Swagger UI for Twitch API.  All endpoints are generated automatically from the [twitch docs](https://dev.twitch.tv/docs/api/reference) page.  __Features:__  * Swagger UI for all Twitch API endpoints * Schemas for _Request Query Parameters_, _Request Body_, _Response Body_ * Some additional schemas like _Clip_, _ChatBadge_, _Prediction_, _Game_, _Channel_, _Video_ etc. * Response codes and examples * Generated types for TypeScript: [ts-twitch-api](https://github.com/DmitryScaletta/ts-twitch-api)  __Repository:__ [github.com/DmitryScaletta/twitch-api-swagger](https://github.com/DmitryScaletta/twitch-api-swagger)
 *
 * The version of the OpenAPI document: helix
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using TwistedTaleweaver.Integration.Twitch.Helix.Client;

namespace TwistedTaleweaver.Integration.Twitch.Helix.Model
{
    /// <summary>
    /// HypeTrainEventEventDataTopContributionsInner
    /// </summary>
    public partial class HypeTrainEventEventDataTopContributionsInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HypeTrainEventEventDataTopContributionsInner" /> class.
        /// </summary>
        /// <param name="total">The total amount contributed. If &#x60;type&#x60; is BITS, &#x60;total&#x60; represents the amount of Bits used. If &#x60;type&#x60; is SUBS, &#x60;total&#x60; is 500, 1000, or 2500 to represent tier 1, 2, or 3 subscriptions, respectively.</param>
        /// <param name="type">The contribution method used. Possible values are:      * BITS — Cheering with Bits. * SUBS — Subscription activity like subscribing or gifting subscriptions. * OTHER — Covers other contribution methods not listed.</param>
        /// <param name="user">The ID of the user that made the contribution.</param>
        [JsonConstructor]
        public HypeTrainEventEventDataTopContributionsInner(int total, TypeEnum type, string user)
        {
            Total = total;
            Type = type;
            User = user;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The contribution method used. Possible values are:      * BITS — Cheering with Bits. * SUBS — Subscription activity like subscribing or gifting subscriptions. * OTHER — Covers other contribution methods not listed.
        /// </summary>
        /// <value>The contribution method used. Possible values are:      * BITS — Cheering with Bits. * SUBS — Subscription activity like subscribing or gifting subscriptions. * OTHER — Covers other contribution methods not listed.</value>
        public enum TypeEnum
        {
            /// <summary>
            /// Enum BITS for value: BITS
            /// </summary>
            BITS = 1,

            /// <summary>
            /// Enum SUBS for value: SUBS
            /// </summary>
            SUBS = 2,

            /// <summary>
            /// Enum OTHER for value: OTHER
            /// </summary>
            OTHER = 3
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TypeEnum TypeEnumFromString(string value)
        {
            if (value.Equals("BITS"))
                return TypeEnum.BITS;

            if (value.Equals("SUBS"))
                return TypeEnum.SUBS;

            if (value.Equals("OTHER"))
                return TypeEnum.OTHER;

            throw new NotImplementedException($"Could not convert value to type TypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TypeEnum? TypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("BITS"))
                return TypeEnum.BITS;

            if (value.Equals("SUBS"))
                return TypeEnum.SUBS;

            if (value.Equals("OTHER"))
                return TypeEnum.OTHER;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TypeEnumToJsonValue(TypeEnum value)
        {
            if (value == TypeEnum.BITS)
                return "BITS";

            if (value == TypeEnum.SUBS)
                return "SUBS";

            if (value == TypeEnum.OTHER)
                return "OTHER";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// The contribution method used. Possible values are:      * BITS — Cheering with Bits. * SUBS — Subscription activity like subscribing or gifting subscriptions. * OTHER — Covers other contribution methods not listed.
        /// </summary>
        /// <value>The contribution method used. Possible values are:      * BITS — Cheering with Bits. * SUBS — Subscription activity like subscribing or gifting subscriptions. * OTHER — Covers other contribution methods not listed.</value>
        [JsonPropertyName("type")]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// The total amount contributed. If &#x60;type&#x60; is BITS, &#x60;total&#x60; represents the amount of Bits used. If &#x60;type&#x60; is SUBS, &#x60;total&#x60; is 500, 1000, or 2500 to represent tier 1, 2, or 3 subscriptions, respectively.
        /// </summary>
        /// <value>The total amount contributed. If &#x60;type&#x60; is BITS, &#x60;total&#x60; represents the amount of Bits used. If &#x60;type&#x60; is SUBS, &#x60;total&#x60; is 500, 1000, or 2500 to represent tier 1, 2, or 3 subscriptions, respectively.</value>
        [JsonPropertyName("total")]
        public int Total { get; set; }

        /// <summary>
        /// The ID of the user that made the contribution.
        /// </summary>
        /// <value>The ID of the user that made the contribution.</value>
        [JsonPropertyName("user")]
        public string User { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class HypeTrainEventEventDataTopContributionsInner {\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="HypeTrainEventEventDataTopContributionsInner" />
    /// </summary>
    public class HypeTrainEventEventDataTopContributionsInnerJsonConverter : JsonConverter<HypeTrainEventEventDataTopContributionsInner>
    {
        /// <summary>
        /// Deserializes json to <see cref="HypeTrainEventEventDataTopContributionsInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override HypeTrainEventEventDataTopContributionsInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> total = default;
            Option<HypeTrainEventEventDataTopContributionsInner.TypeEnum?> type = default;
            Option<string?> user = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "total":
                            total = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<HypeTrainEventEventDataTopContributionsInner.TypeEnum?>(HypeTrainEventEventDataTopContributionsInner.TypeEnumFromStringOrDefault(typeRawValue));
                            break;
                        case "user":
                            user = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!total.IsSet)
                throw new ArgumentException("Property is required for class HypeTrainEventEventDataTopContributionsInner.", nameof(total));

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class HypeTrainEventEventDataTopContributionsInner.", nameof(type));

            if (!user.IsSet)
                throw new ArgumentException("Property is required for class HypeTrainEventEventDataTopContributionsInner.", nameof(user));

            if (total.IsSet && total.Value == null)
                throw new ArgumentNullException(nameof(total), "Property is not nullable for class HypeTrainEventEventDataTopContributionsInner.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class HypeTrainEventEventDataTopContributionsInner.");

            if (user.IsSet && user.Value == null)
                throw new ArgumentNullException(nameof(user), "Property is not nullable for class HypeTrainEventEventDataTopContributionsInner.");

            return new HypeTrainEventEventDataTopContributionsInner(total.Value!.Value!, type.Value!.Value!, user.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="HypeTrainEventEventDataTopContributionsInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="hypeTrainEventEventDataTopContributionsInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, HypeTrainEventEventDataTopContributionsInner hypeTrainEventEventDataTopContributionsInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, hypeTrainEventEventDataTopContributionsInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="HypeTrainEventEventDataTopContributionsInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="hypeTrainEventEventDataTopContributionsInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, HypeTrainEventEventDataTopContributionsInner hypeTrainEventEventDataTopContributionsInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (hypeTrainEventEventDataTopContributionsInner.User == null)
                throw new ArgumentNullException(nameof(hypeTrainEventEventDataTopContributionsInner.User), "Property is required for class HypeTrainEventEventDataTopContributionsInner.");

            writer.WriteNumber("total", hypeTrainEventEventDataTopContributionsInner.Total);

            var typeRawValue = HypeTrainEventEventDataTopContributionsInner.TypeEnumToJsonValue(hypeTrainEventEventDataTopContributionsInner.Type);
            writer.WriteString("type", typeRawValue);
            writer.WriteString("user", hypeTrainEventEventDataTopContributionsInner.User);
        }
    }
}

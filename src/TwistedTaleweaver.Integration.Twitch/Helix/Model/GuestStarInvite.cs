// <auto-generated>
/*
 * Twitch API Swagger UI (Unofficial)
 *
 * Unofficial Swagger UI for Twitch API.  All endpoints are generated automatically from the [twitch docs](https://dev.twitch.tv/docs/api/reference) page.  __Features:__  * Swagger UI for all Twitch API endpoints * Schemas for _Request Query Parameters_, _Request Body_, _Response Body_ * Some additional schemas like _Clip_, _ChatBadge_, _Prediction_, _Game_, _Channel_, _Video_ etc. * Response codes and examples * Generated types for TypeScript: [ts-twitch-api](https://github.com/DmitryScaletta/ts-twitch-api)  __Repository:__ [github.com/DmitryScaletta/twitch-api-swagger](https://github.com/DmitryScaletta/twitch-api-swagger)
 *
 * The version of the OpenAPI document: helix
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using TwistedTaleweaver.Integration.Twitch.Helix.Client;

namespace TwistedTaleweaver.Integration.Twitch.Helix.Model
{
    /// <summary>
    /// GuestStarInvite
    /// </summary>
    public partial class GuestStarInvite : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GuestStarInvite" /> class.
        /// </summary>
        /// <param name="userId">Twitch User ID corresponding to the invited guest</param>
        /// <param name="invitedAt">Timestamp when this user was invited to the session.</param>
        /// <param name="status">Status representing the invited user’s join state. Can be one of the following:       * &#x60;INVITED&#x60;: The user has been invited to the session but has not acknowledged it. * &#x60;ACCEPTED&#x60;: The invited user has acknowledged the invite and joined the waiting room, but may still be setting up their media devices or otherwise preparing to join the call. * &#x60;READY&#x60;: The invited user has signaled they are ready to join the call from the waiting room.</param>
        /// <param name="isVideoEnabled">Flag signaling that the invited user has chosen to disable their local video device. The user has hidden themselves, but they may choose to reveal their video feed upon joining the session.</param>
        /// <param name="isAudioEnabled">Flag signaling that the invited user has chosen to disable their local audio device. The user has muted themselves, but they may choose to unmute their audio feed upon joining the session.</param>
        /// <param name="isVideoAvailable">Flag signaling that the invited user has a video device available for sharing.</param>
        /// <param name="isAudioAvailable">Flag signaling that the invited user has an audio device available for sharing.</param>
        [JsonConstructor]
        public GuestStarInvite(string userId, DateTime invitedAt, string status, bool isVideoEnabled, bool isAudioEnabled, bool isVideoAvailable, bool isAudioAvailable)
        {
            UserId = userId;
            InvitedAt = invitedAt;
            Status = status;
            IsVideoEnabled = isVideoEnabled;
            IsAudioEnabled = isAudioEnabled;
            IsVideoAvailable = isVideoAvailable;
            IsAudioAvailable = isAudioAvailable;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Twitch User ID corresponding to the invited guest
        /// </summary>
        /// <value>Twitch User ID corresponding to the invited guest</value>
        [JsonPropertyName("user_id")]
        public string UserId { get; set; }

        /// <summary>
        /// Timestamp when this user was invited to the session.
        /// </summary>
        /// <value>Timestamp when this user was invited to the session.</value>
        [JsonPropertyName("invited_at")]
        public DateTime InvitedAt { get; set; }

        /// <summary>
        /// Status representing the invited user’s join state. Can be one of the following:       * &#x60;INVITED&#x60;: The user has been invited to the session but has not acknowledged it. * &#x60;ACCEPTED&#x60;: The invited user has acknowledged the invite and joined the waiting room, but may still be setting up their media devices or otherwise preparing to join the call. * &#x60;READY&#x60;: The invited user has signaled they are ready to join the call from the waiting room.
        /// </summary>
        /// <value>Status representing the invited user’s join state. Can be one of the following:       * &#x60;INVITED&#x60;: The user has been invited to the session but has not acknowledged it. * &#x60;ACCEPTED&#x60;: The invited user has acknowledged the invite and joined the waiting room, but may still be setting up their media devices or otherwise preparing to join the call. * &#x60;READY&#x60;: The invited user has signaled they are ready to join the call from the waiting room.</value>
        [JsonPropertyName("status")]
        public string Status { get; set; }

        /// <summary>
        /// Flag signaling that the invited user has chosen to disable their local video device. The user has hidden themselves, but they may choose to reveal their video feed upon joining the session.
        /// </summary>
        /// <value>Flag signaling that the invited user has chosen to disable their local video device. The user has hidden themselves, but they may choose to reveal their video feed upon joining the session.</value>
        [JsonPropertyName("is_video_enabled")]
        public bool IsVideoEnabled { get; set; }

        /// <summary>
        /// Flag signaling that the invited user has chosen to disable their local audio device. The user has muted themselves, but they may choose to unmute their audio feed upon joining the session.
        /// </summary>
        /// <value>Flag signaling that the invited user has chosen to disable their local audio device. The user has muted themselves, but they may choose to unmute their audio feed upon joining the session.</value>
        [JsonPropertyName("is_audio_enabled")]
        public bool IsAudioEnabled { get; set; }

        /// <summary>
        /// Flag signaling that the invited user has a video device available for sharing.
        /// </summary>
        /// <value>Flag signaling that the invited user has a video device available for sharing.</value>
        [JsonPropertyName("is_video_available")]
        public bool IsVideoAvailable { get; set; }

        /// <summary>
        /// Flag signaling that the invited user has an audio device available for sharing.
        /// </summary>
        /// <value>Flag signaling that the invited user has an audio device available for sharing.</value>
        [JsonPropertyName("is_audio_available")]
        public bool IsAudioAvailable { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GuestStarInvite {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  InvitedAt: ").Append(InvitedAt).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  IsVideoEnabled: ").Append(IsVideoEnabled).Append("\n");
            sb.Append("  IsAudioEnabled: ").Append(IsAudioEnabled).Append("\n");
            sb.Append("  IsVideoAvailable: ").Append(IsVideoAvailable).Append("\n");
            sb.Append("  IsAudioAvailable: ").Append(IsAudioAvailable).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GuestStarInvite" />
    /// </summary>
    public class GuestStarInviteJsonConverter : JsonConverter<GuestStarInvite>
    {
        /// <summary>
        /// The format to use to serialize InvitedAt
        /// </summary>
        public static string InvitedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="GuestStarInvite" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GuestStarInvite Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> userId = default;
            Option<DateTime?> invitedAt = default;
            Option<string?> status = default;
            Option<bool?> isVideoEnabled = default;
            Option<bool?> isAudioEnabled = default;
            Option<bool?> isVideoAvailable = default;
            Option<bool?> isAudioAvailable = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "user_id":
                            userId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "invited_at":
                            invitedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "status":
                            status = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "is_video_enabled":
                            isVideoEnabled = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_audio_enabled":
                            isAudioEnabled = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_video_available":
                            isVideoAvailable = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_audio_available":
                            isAudioAvailable = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!userId.IsSet)
                throw new ArgumentException("Property is required for class GuestStarInvite.", nameof(userId));

            if (!invitedAt.IsSet)
                throw new ArgumentException("Property is required for class GuestStarInvite.", nameof(invitedAt));

            if (!status.IsSet)
                throw new ArgumentException("Property is required for class GuestStarInvite.", nameof(status));

            if (!isVideoEnabled.IsSet)
                throw new ArgumentException("Property is required for class GuestStarInvite.", nameof(isVideoEnabled));

            if (!isAudioEnabled.IsSet)
                throw new ArgumentException("Property is required for class GuestStarInvite.", nameof(isAudioEnabled));

            if (!isVideoAvailable.IsSet)
                throw new ArgumentException("Property is required for class GuestStarInvite.", nameof(isVideoAvailable));

            if (!isAudioAvailable.IsSet)
                throw new ArgumentException("Property is required for class GuestStarInvite.", nameof(isAudioAvailable));

            if (userId.IsSet && userId.Value == null)
                throw new ArgumentNullException(nameof(userId), "Property is not nullable for class GuestStarInvite.");

            if (invitedAt.IsSet && invitedAt.Value == null)
                throw new ArgumentNullException(nameof(invitedAt), "Property is not nullable for class GuestStarInvite.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class GuestStarInvite.");

            if (isVideoEnabled.IsSet && isVideoEnabled.Value == null)
                throw new ArgumentNullException(nameof(isVideoEnabled), "Property is not nullable for class GuestStarInvite.");

            if (isAudioEnabled.IsSet && isAudioEnabled.Value == null)
                throw new ArgumentNullException(nameof(isAudioEnabled), "Property is not nullable for class GuestStarInvite.");

            if (isVideoAvailable.IsSet && isVideoAvailable.Value == null)
                throw new ArgumentNullException(nameof(isVideoAvailable), "Property is not nullable for class GuestStarInvite.");

            if (isAudioAvailable.IsSet && isAudioAvailable.Value == null)
                throw new ArgumentNullException(nameof(isAudioAvailable), "Property is not nullable for class GuestStarInvite.");

            return new GuestStarInvite(userId.Value!, invitedAt.Value!.Value!, status.Value!, isVideoEnabled.Value!.Value!, isAudioEnabled.Value!.Value!, isVideoAvailable.Value!.Value!, isAudioAvailable.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="GuestStarInvite" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="guestStarInvite"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GuestStarInvite guestStarInvite, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, guestStarInvite, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GuestStarInvite" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="guestStarInvite"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GuestStarInvite guestStarInvite, JsonSerializerOptions jsonSerializerOptions)
        {
            if (guestStarInvite.UserId == null)
                throw new ArgumentNullException(nameof(guestStarInvite.UserId), "Property is required for class GuestStarInvite.");

            if (guestStarInvite.Status == null)
                throw new ArgumentNullException(nameof(guestStarInvite.Status), "Property is required for class GuestStarInvite.");

            writer.WriteString("user_id", guestStarInvite.UserId);

            writer.WriteString("invited_at", guestStarInvite.InvitedAt.ToString(InvitedAtFormat));

            writer.WriteString("status", guestStarInvite.Status);

            writer.WriteBoolean("is_video_enabled", guestStarInvite.IsVideoEnabled);

            writer.WriteBoolean("is_audio_enabled", guestStarInvite.IsAudioEnabled);

            writer.WriteBoolean("is_video_available", guestStarInvite.IsVideoAvailable);

            writer.WriteBoolean("is_audio_available", guestStarInvite.IsAudioAvailable);
        }
    }
}

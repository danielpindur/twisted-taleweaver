// <auto-generated>
/*
 * Twitch API Swagger UI (Unofficial)
 *
 * Unofficial Swagger UI for Twitch API.  All endpoints are generated automatically from the [twitch docs](https://dev.twitch.tv/docs/api/reference) page.  __Features:__  * Swagger UI for all Twitch API endpoints * Schemas for _Request Query Parameters_, _Request Body_, _Response Body_ * Some additional schemas like _Clip_, _ChatBadge_, _Prediction_, _Game_, _Channel_, _Video_ etc. * Response codes and examples * Generated types for TypeScript: [ts-twitch-api](https://github.com/DmitryScaletta/ts-twitch-api)  __Repository:__ [github.com/DmitryScaletta/twitch-api-swagger](https://github.com/DmitryScaletta/twitch-api-swagger)
 *
 * The version of the OpenAPI document: helix
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using TwistedTaleweaver.Integration.Twitch.Helix.Client;

namespace TwistedTaleweaver.Integration.Twitch.Helix.Model
{
    /// <summary>
    /// CreateChannelStreamScheduleSegmentBody
    /// </summary>
    public partial class CreateChannelStreamScheduleSegmentBody : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateChannelStreamScheduleSegmentBody" /> class.
        /// </summary>
        /// <param name="startTime">The date and time that the broadcast segment starts. Specify the date and time in RFC3339 format (for example, 2021-07-01T18:00:00Z).</param>
        /// <param name="timezone">The time zone where the broadcast takes place. Specify the time zone using [IANA time zone database](https://www.iana.org/time-zones) format (for example, America/New\\_York).</param>
        /// <param name="duration">The length of time, in minutes, that the broadcast is scheduled to run. The duration must be in the range 30 through 1380 (23 hours).</param>
        /// <param name="isRecurring">A Boolean value that determines whether the broadcast recurs weekly. Is **true** if the broadcast recurs weekly. Only partners and affiliates may add non-recurring broadcasts.</param>
        /// <param name="categoryId">The ID of the category that best represents the broadcast’s content. To get the category ID, use the [Search Categories](https://dev.twitch.tv/docs/api/reference#search-categories) endpoint.</param>
        /// <param name="title">The broadcast’s title. The title may contain a maximum of 140 characters.</param>
        [JsonConstructor]
        public CreateChannelStreamScheduleSegmentBody(DateTime startTime, string timezone, string duration, Option<bool?> isRecurring = default, Option<string?> categoryId = default, Option<string?> title = default)
        {
            StartTime = startTime;
            Timezone = timezone;
            Duration = duration;
            IsRecurringOption = isRecurring;
            CategoryIdOption = categoryId;
            TitleOption = title;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The date and time that the broadcast segment starts. Specify the date and time in RFC3339 format (for example, 2021-07-01T18:00:00Z).
        /// </summary>
        /// <value>The date and time that the broadcast segment starts. Specify the date and time in RFC3339 format (for example, 2021-07-01T18:00:00Z).</value>
        [JsonPropertyName("start_time")]
        public DateTime StartTime { get; set; }

        /// <summary>
        /// The time zone where the broadcast takes place. Specify the time zone using [IANA time zone database](https://www.iana.org/time-zones) format (for example, America/New\\_York).
        /// </summary>
        /// <value>The time zone where the broadcast takes place. Specify the time zone using [IANA time zone database](https://www.iana.org/time-zones) format (for example, America/New\\_York).</value>
        [JsonPropertyName("timezone")]
        public string Timezone { get; set; }

        /// <summary>
        /// The length of time, in minutes, that the broadcast is scheduled to run. The duration must be in the range 30 through 1380 (23 hours).
        /// </summary>
        /// <value>The length of time, in minutes, that the broadcast is scheduled to run. The duration must be in the range 30 through 1380 (23 hours).</value>
        [JsonPropertyName("duration")]
        public string Duration { get; set; }

        /// <summary>
        /// Used to track the state of IsRecurring
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsRecurringOption { get; private set; }

        /// <summary>
        /// A Boolean value that determines whether the broadcast recurs weekly. Is **true** if the broadcast recurs weekly. Only partners and affiliates may add non-recurring broadcasts.
        /// </summary>
        /// <value>A Boolean value that determines whether the broadcast recurs weekly. Is **true** if the broadcast recurs weekly. Only partners and affiliates may add non-recurring broadcasts.</value>
        [JsonPropertyName("is_recurring")]
        public bool? IsRecurring { get { return this.IsRecurringOption; } set { this.IsRecurringOption = new(value); } }

        /// <summary>
        /// Used to track the state of CategoryId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CategoryIdOption { get; private set; }

        /// <summary>
        /// The ID of the category that best represents the broadcast’s content. To get the category ID, use the [Search Categories](https://dev.twitch.tv/docs/api/reference#search-categories) endpoint.
        /// </summary>
        /// <value>The ID of the category that best represents the broadcast’s content. To get the category ID, use the [Search Categories](https://dev.twitch.tv/docs/api/reference#search-categories) endpoint.</value>
        [JsonPropertyName("category_id")]
        public string? CategoryId { get { return this.CategoryIdOption; } set { this.CategoryIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Title
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TitleOption { get; private set; }

        /// <summary>
        /// The broadcast’s title. The title may contain a maximum of 140 characters.
        /// </summary>
        /// <value>The broadcast’s title. The title may contain a maximum of 140 characters.</value>
        [JsonPropertyName("title")]
        public string? Title { get { return this.TitleOption; } set { this.TitleOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateChannelStreamScheduleSegmentBody {\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  Timezone: ").Append(Timezone).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  IsRecurring: ").Append(IsRecurring).Append("\n");
            sb.Append("  CategoryId: ").Append(CategoryId).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateChannelStreamScheduleSegmentBody" />
    /// </summary>
    public class CreateChannelStreamScheduleSegmentBodyJsonConverter : JsonConverter<CreateChannelStreamScheduleSegmentBody>
    {
        /// <summary>
        /// The format to use to serialize StartTime
        /// </summary>
        public static string StartTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="CreateChannelStreamScheduleSegmentBody" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateChannelStreamScheduleSegmentBody Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateTime?> startTime = default;
            Option<string?> timezone = default;
            Option<string?> duration = default;
            Option<bool?> isRecurring = default;
            Option<string?> categoryId = default;
            Option<string?> title = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "start_time":
                            startTime = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "timezone":
                            timezone = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "duration":
                            duration = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "is_recurring":
                            isRecurring = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "category_id":
                            categoryId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!startTime.IsSet)
                throw new ArgumentException("Property is required for class CreateChannelStreamScheduleSegmentBody.", nameof(startTime));

            if (!timezone.IsSet)
                throw new ArgumentException("Property is required for class CreateChannelStreamScheduleSegmentBody.", nameof(timezone));

            if (!duration.IsSet)
                throw new ArgumentException("Property is required for class CreateChannelStreamScheduleSegmentBody.", nameof(duration));

            if (startTime.IsSet && startTime.Value == null)
                throw new ArgumentNullException(nameof(startTime), "Property is not nullable for class CreateChannelStreamScheduleSegmentBody.");

            if (timezone.IsSet && timezone.Value == null)
                throw new ArgumentNullException(nameof(timezone), "Property is not nullable for class CreateChannelStreamScheduleSegmentBody.");

            if (duration.IsSet && duration.Value == null)
                throw new ArgumentNullException(nameof(duration), "Property is not nullable for class CreateChannelStreamScheduleSegmentBody.");

            if (isRecurring.IsSet && isRecurring.Value == null)
                throw new ArgumentNullException(nameof(isRecurring), "Property is not nullable for class CreateChannelStreamScheduleSegmentBody.");

            if (categoryId.IsSet && categoryId.Value == null)
                throw new ArgumentNullException(nameof(categoryId), "Property is not nullable for class CreateChannelStreamScheduleSegmentBody.");

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class CreateChannelStreamScheduleSegmentBody.");

            return new CreateChannelStreamScheduleSegmentBody(startTime.Value!.Value!, timezone.Value!, duration.Value!, isRecurring, categoryId, title);
        }

        /// <summary>
        /// Serializes a <see cref="CreateChannelStreamScheduleSegmentBody" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createChannelStreamScheduleSegmentBody"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateChannelStreamScheduleSegmentBody createChannelStreamScheduleSegmentBody, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createChannelStreamScheduleSegmentBody, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateChannelStreamScheduleSegmentBody" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createChannelStreamScheduleSegmentBody"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CreateChannelStreamScheduleSegmentBody createChannelStreamScheduleSegmentBody, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createChannelStreamScheduleSegmentBody.Timezone == null)
                throw new ArgumentNullException(nameof(createChannelStreamScheduleSegmentBody.Timezone), "Property is required for class CreateChannelStreamScheduleSegmentBody.");

            if (createChannelStreamScheduleSegmentBody.Duration == null)
                throw new ArgumentNullException(nameof(createChannelStreamScheduleSegmentBody.Duration), "Property is required for class CreateChannelStreamScheduleSegmentBody.");

            if (createChannelStreamScheduleSegmentBody.CategoryIdOption.IsSet && createChannelStreamScheduleSegmentBody.CategoryId == null)
                throw new ArgumentNullException(nameof(createChannelStreamScheduleSegmentBody.CategoryId), "Property is required for class CreateChannelStreamScheduleSegmentBody.");

            if (createChannelStreamScheduleSegmentBody.TitleOption.IsSet && createChannelStreamScheduleSegmentBody.Title == null)
                throw new ArgumentNullException(nameof(createChannelStreamScheduleSegmentBody.Title), "Property is required for class CreateChannelStreamScheduleSegmentBody.");

            writer.WriteString("start_time", createChannelStreamScheduleSegmentBody.StartTime.ToString(StartTimeFormat));

            writer.WriteString("timezone", createChannelStreamScheduleSegmentBody.Timezone);

            writer.WriteString("duration", createChannelStreamScheduleSegmentBody.Duration);

            if (createChannelStreamScheduleSegmentBody.IsRecurringOption.IsSet)
                writer.WriteBoolean("is_recurring", createChannelStreamScheduleSegmentBody.IsRecurringOption.Value!.Value);

            if (createChannelStreamScheduleSegmentBody.CategoryIdOption.IsSet)
                writer.WriteString("category_id", createChannelStreamScheduleSegmentBody.CategoryId);

            if (createChannelStreamScheduleSegmentBody.TitleOption.IsSet)
                writer.WriteString("title", createChannelStreamScheduleSegmentBody.Title);
        }
    }
}

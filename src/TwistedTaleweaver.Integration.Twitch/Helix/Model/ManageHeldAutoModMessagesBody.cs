// <auto-generated>
/*
 * Twitch API Swagger UI (Unofficial)
 *
 * Unofficial Swagger UI for Twitch API.  All endpoints are generated automatically from the [twitch docs](https://dev.twitch.tv/docs/api/reference) page.  __Features:__  * Swagger UI for all Twitch API endpoints * Schemas for _Request Query Parameters_, _Request Body_, _Response Body_ * Some additional schemas like _Clip_, _ChatBadge_, _Prediction_, _Game_, _Channel_, _Video_ etc. * Response codes and examples * Generated types for TypeScript: [ts-twitch-api](https://github.com/DmitryScaletta/ts-twitch-api)  __Repository:__ [github.com/DmitryScaletta/twitch-api-swagger](https://github.com/DmitryScaletta/twitch-api-swagger)
 *
 * The version of the OpenAPI document: helix
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using TwistedTaleweaver.Integration.Twitch.Helix.Client;

namespace TwistedTaleweaver.Integration.Twitch.Helix.Model
{
    /// <summary>
    /// ManageHeldAutoModMessagesBody
    /// </summary>
    public partial class ManageHeldAutoModMessagesBody : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ManageHeldAutoModMessagesBody" /> class.
        /// </summary>
        /// <param name="userId">The moderator who is approving or denying the held message. This ID must match the user ID in the access token.</param>
        /// <param name="msgId">The ID of the message to allow or deny.</param>
        /// <param name="action">The action to take for the message. Possible values are:      * ALLOW * DENY</param>
        [JsonConstructor]
        public ManageHeldAutoModMessagesBody(string userId, string msgId, ActionEnum action)
        {
            UserId = userId;
            MsgId = msgId;
            Action = action;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The action to take for the message. Possible values are:      * ALLOW * DENY
        /// </summary>
        /// <value>The action to take for the message. Possible values are:      * ALLOW * DENY</value>
        public enum ActionEnum
        {
            /// <summary>
            /// Enum ALLOW for value: ALLOW
            /// </summary>
            ALLOW = 1,

            /// <summary>
            /// Enum DENY for value: DENY
            /// </summary>
            DENY = 2
        }

        /// <summary>
        /// Returns a <see cref="ActionEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ActionEnum ActionEnumFromString(string value)
        {
            if (value.Equals("ALLOW"))
                return ActionEnum.ALLOW;

            if (value.Equals("DENY"))
                return ActionEnum.DENY;

            throw new NotImplementedException($"Could not convert value to type ActionEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ActionEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ActionEnum? ActionEnumFromStringOrDefault(string value)
        {
            if (value.Equals("ALLOW"))
                return ActionEnum.ALLOW;

            if (value.Equals("DENY"))
                return ActionEnum.DENY;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ActionEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ActionEnumToJsonValue(ActionEnum value)
        {
            if (value == ActionEnum.ALLOW)
                return "ALLOW";

            if (value == ActionEnum.DENY)
                return "DENY";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// The action to take for the message. Possible values are:      * ALLOW * DENY
        /// </summary>
        /// <value>The action to take for the message. Possible values are:      * ALLOW * DENY</value>
        [JsonPropertyName("action")]
        public ActionEnum Action { get; set; }

        /// <summary>
        /// The moderator who is approving or denying the held message. This ID must match the user ID in the access token.
        /// </summary>
        /// <value>The moderator who is approving or denying the held message. This ID must match the user ID in the access token.</value>
        [JsonPropertyName("user_id")]
        public string UserId { get; set; }

        /// <summary>
        /// The ID of the message to allow or deny.
        /// </summary>
        /// <value>The ID of the message to allow or deny.</value>
        [JsonPropertyName("msg_id")]
        public string MsgId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ManageHeldAutoModMessagesBody {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  MsgId: ").Append(MsgId).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ManageHeldAutoModMessagesBody" />
    /// </summary>
    public class ManageHeldAutoModMessagesBodyJsonConverter : JsonConverter<ManageHeldAutoModMessagesBody>
    {
        /// <summary>
        /// Deserializes json to <see cref="ManageHeldAutoModMessagesBody" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ManageHeldAutoModMessagesBody Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> userId = default;
            Option<string?> msgId = default;
            Option<ManageHeldAutoModMessagesBody.ActionEnum?> action = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "user_id":
                            userId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "msg_id":
                            msgId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "action":
                            string? actionRawValue = utf8JsonReader.GetString();
                            if (actionRawValue != null)
                                action = new Option<ManageHeldAutoModMessagesBody.ActionEnum?>(ManageHeldAutoModMessagesBody.ActionEnumFromStringOrDefault(actionRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!userId.IsSet)
                throw new ArgumentException("Property is required for class ManageHeldAutoModMessagesBody.", nameof(userId));

            if (!msgId.IsSet)
                throw new ArgumentException("Property is required for class ManageHeldAutoModMessagesBody.", nameof(msgId));

            if (!action.IsSet)
                throw new ArgumentException("Property is required for class ManageHeldAutoModMessagesBody.", nameof(action));

            if (userId.IsSet && userId.Value == null)
                throw new ArgumentNullException(nameof(userId), "Property is not nullable for class ManageHeldAutoModMessagesBody.");

            if (msgId.IsSet && msgId.Value == null)
                throw new ArgumentNullException(nameof(msgId), "Property is not nullable for class ManageHeldAutoModMessagesBody.");

            if (action.IsSet && action.Value == null)
                throw new ArgumentNullException(nameof(action), "Property is not nullable for class ManageHeldAutoModMessagesBody.");

            return new ManageHeldAutoModMessagesBody(userId.Value!, msgId.Value!, action.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="ManageHeldAutoModMessagesBody" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="manageHeldAutoModMessagesBody"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ManageHeldAutoModMessagesBody manageHeldAutoModMessagesBody, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, manageHeldAutoModMessagesBody, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ManageHeldAutoModMessagesBody" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="manageHeldAutoModMessagesBody"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ManageHeldAutoModMessagesBody manageHeldAutoModMessagesBody, JsonSerializerOptions jsonSerializerOptions)
        {
            if (manageHeldAutoModMessagesBody.UserId == null)
                throw new ArgumentNullException(nameof(manageHeldAutoModMessagesBody.UserId), "Property is required for class ManageHeldAutoModMessagesBody.");

            if (manageHeldAutoModMessagesBody.MsgId == null)
                throw new ArgumentNullException(nameof(manageHeldAutoModMessagesBody.MsgId), "Property is required for class ManageHeldAutoModMessagesBody.");

            writer.WriteString("user_id", manageHeldAutoModMessagesBody.UserId);

            writer.WriteString("msg_id", manageHeldAutoModMessagesBody.MsgId);

            var actionRawValue = ManageHeldAutoModMessagesBody.ActionEnumToJsonValue(manageHeldAutoModMessagesBody.Action);
            writer.WriteString("action", actionRawValue);
        }
    }
}

// <auto-generated>
/*
 * Twitch API Swagger UI (Unofficial)
 *
 * Unofficial Swagger UI for Twitch API.  All endpoints are generated automatically from the [twitch docs](https://dev.twitch.tv/docs/api/reference) page.  __Features:__  * Swagger UI for all Twitch API endpoints * Schemas for _Request Query Parameters_, _Request Body_, _Response Body_ * Some additional schemas like _Clip_, _ChatBadge_, _Prediction_, _Game_, _Channel_, _Video_ etc. * Response codes and examples * Generated types for TypeScript: [ts-twitch-api](https://github.com/DmitryScaletta/ts-twitch-api)  __Repository:__ [github.com/DmitryScaletta/twitch-api-swagger](https://github.com/DmitryScaletta/twitch-api-swagger)
 *
 * The version of the OpenAPI document: helix
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using TwistedTaleweaver.Integration.Twitch.Helix.Client;

namespace TwistedTaleweaver.Integration.Twitch.Helix.Model
{
    /// <summary>
    /// CheermoteTiersInner
    /// </summary>
    public partial class CheermoteTiersInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CheermoteTiersInner" /> class.
        /// </summary>
        /// <param name="minBits">The minimum number of Bits that you must cheer at this tier level. The maximum number of Bits that you can cheer at this level is determined by the required minimum Bits of the next tier level minus 1\\. For example, if &#x60;min_bits&#x60; is 1 and &#x60;min_bits&#x60; for the next tier is 100, the Bits range for this tier level is 1 through 99\\. The minimum Bits value of the last tier is the maximum number of Bits you can cheer using this Cheermote. For example, 10000.</param>
        /// <param name="id">The tier level. Possible tiers are:      * 1 * 100 * 500 * 1000 * 5000 * 10000 * 100000</param>
        /// <param name="color">The hex code of the color associated with this tier level (for example, #979797).</param>
        /// <param name="images">images</param>
        /// <param name="canCheer">A Boolean value that determines whether users can cheer at this tier level.</param>
        /// <param name="showInBitsCard">A Boolean value that determines whether this tier level is shown in the Bits card. Is **true** if this tier level is shown in the Bits card.</param>
        [JsonConstructor]
        public CheermoteTiersInner(int minBits, IdEnum id, string color, CheermoteImages images, bool canCheer, bool showInBitsCard)
        {
            MinBits = minBits;
            Id = id;
            Color = color;
            Images = images;
            CanCheer = canCheer;
            ShowInBitsCard = showInBitsCard;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The tier level. Possible tiers are:      * 1 * 100 * 500 * 1000 * 5000 * 10000 * 100000
        /// </summary>
        /// <value>The tier level. Possible tiers are:      * 1 * 100 * 500 * 1000 * 5000 * 10000 * 100000</value>
        public enum IdEnum
        {
            /// <summary>
            /// Enum _1 for value: 1
            /// </summary>
            _1 = 1,

            /// <summary>
            /// Enum _100 for value: 100
            /// </summary>
            _100 = 2,

            /// <summary>
            /// Enum _500 for value: 500
            /// </summary>
            _500 = 3,

            /// <summary>
            /// Enum _1000 for value: 1000
            /// </summary>
            _1000 = 4,

            /// <summary>
            /// Enum _5000 for value: 5000
            /// </summary>
            _5000 = 5,

            /// <summary>
            /// Enum _10000 for value: 10000
            /// </summary>
            _10000 = 6,

            /// <summary>
            /// Enum _100000 for value: 100000
            /// </summary>
            _100000 = 7
        }

        /// <summary>
        /// Returns a <see cref="IdEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static IdEnum IdEnumFromString(string value)
        {
            if (value.Equals("1"))
                return IdEnum._1;

            if (value.Equals("100"))
                return IdEnum._100;

            if (value.Equals("500"))
                return IdEnum._500;

            if (value.Equals("1000"))
                return IdEnum._1000;

            if (value.Equals("5000"))
                return IdEnum._5000;

            if (value.Equals("10000"))
                return IdEnum._10000;

            if (value.Equals("100000"))
                return IdEnum._100000;

            throw new NotImplementedException($"Could not convert value to type IdEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="IdEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static IdEnum? IdEnumFromStringOrDefault(string value)
        {
            if (value.Equals("1"))
                return IdEnum._1;

            if (value.Equals("100"))
                return IdEnum._100;

            if (value.Equals("500"))
                return IdEnum._500;

            if (value.Equals("1000"))
                return IdEnum._1000;

            if (value.Equals("5000"))
                return IdEnum._5000;

            if (value.Equals("10000"))
                return IdEnum._10000;

            if (value.Equals("100000"))
                return IdEnum._100000;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="IdEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string IdEnumToJsonValue(IdEnum value)
        {
            if (value == IdEnum._1)
                return "1";

            if (value == IdEnum._100)
                return "100";

            if (value == IdEnum._500)
                return "500";

            if (value == IdEnum._1000)
                return "1000";

            if (value == IdEnum._5000)
                return "5000";

            if (value == IdEnum._10000)
                return "10000";

            if (value == IdEnum._100000)
                return "100000";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// The tier level. Possible tiers are:      * 1 * 100 * 500 * 1000 * 5000 * 10000 * 100000
        /// </summary>
        /// <value>The tier level. Possible tiers are:      * 1 * 100 * 500 * 1000 * 5000 * 10000 * 100000</value>
        [JsonPropertyName("id")]
        public IdEnum Id { get; set; }

        /// <summary>
        /// The minimum number of Bits that you must cheer at this tier level. The maximum number of Bits that you can cheer at this level is determined by the required minimum Bits of the next tier level minus 1\\. For example, if &#x60;min_bits&#x60; is 1 and &#x60;min_bits&#x60; for the next tier is 100, the Bits range for this tier level is 1 through 99\\. The minimum Bits value of the last tier is the maximum number of Bits you can cheer using this Cheermote. For example, 10000.
        /// </summary>
        /// <value>The minimum number of Bits that you must cheer at this tier level. The maximum number of Bits that you can cheer at this level is determined by the required minimum Bits of the next tier level minus 1\\. For example, if &#x60;min_bits&#x60; is 1 and &#x60;min_bits&#x60; for the next tier is 100, the Bits range for this tier level is 1 through 99\\. The minimum Bits value of the last tier is the maximum number of Bits you can cheer using this Cheermote. For example, 10000.</value>
        [JsonPropertyName("min_bits")]
        public int MinBits { get; set; }

        /// <summary>
        /// The hex code of the color associated with this tier level (for example, #979797).
        /// </summary>
        /// <value>The hex code of the color associated with this tier level (for example, #979797).</value>
        [JsonPropertyName("color")]
        public string Color { get; set; }

        /// <summary>
        /// Gets or Sets Images
        /// </summary>
        [JsonPropertyName("images")]
        public CheermoteImages Images { get; set; }

        /// <summary>
        /// A Boolean value that determines whether users can cheer at this tier level.
        /// </summary>
        /// <value>A Boolean value that determines whether users can cheer at this tier level.</value>
        [JsonPropertyName("can_cheer")]
        public bool CanCheer { get; set; }

        /// <summary>
        /// A Boolean value that determines whether this tier level is shown in the Bits card. Is **true** if this tier level is shown in the Bits card.
        /// </summary>
        /// <value>A Boolean value that determines whether this tier level is shown in the Bits card. Is **true** if this tier level is shown in the Bits card.</value>
        [JsonPropertyName("show_in_bits_card")]
        public bool ShowInBitsCard { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CheermoteTiersInner {\n");
            sb.Append("  MinBits: ").Append(MinBits).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  Images: ").Append(Images).Append("\n");
            sb.Append("  CanCheer: ").Append(CanCheer).Append("\n");
            sb.Append("  ShowInBitsCard: ").Append(ShowInBitsCard).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CheermoteTiersInner" />
    /// </summary>
    public class CheermoteTiersInnerJsonConverter : JsonConverter<CheermoteTiersInner>
    {
        /// <summary>
        /// Deserializes json to <see cref="CheermoteTiersInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CheermoteTiersInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> minBits = default;
            Option<CheermoteTiersInner.IdEnum?> id = default;
            Option<string?> color = default;
            Option<CheermoteImages?> images = default;
            Option<bool?> canCheer = default;
            Option<bool?> showInBitsCard = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "min_bits":
                            minBits = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "id":
                            string? idRawValue = utf8JsonReader.GetString();
                            if (idRawValue != null)
                                id = new Option<CheermoteTiersInner.IdEnum?>(CheermoteTiersInner.IdEnumFromStringOrDefault(idRawValue));
                            break;
                        case "color":
                            color = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "images":
                            images = new Option<CheermoteImages?>(JsonSerializer.Deserialize<CheermoteImages>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "can_cheer":
                            canCheer = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "show_in_bits_card":
                            showInBitsCard = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!minBits.IsSet)
                throw new ArgumentException("Property is required for class CheermoteTiersInner.", nameof(minBits));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class CheermoteTiersInner.", nameof(id));

            if (!color.IsSet)
                throw new ArgumentException("Property is required for class CheermoteTiersInner.", nameof(color));

            if (!images.IsSet)
                throw new ArgumentException("Property is required for class CheermoteTiersInner.", nameof(images));

            if (!canCheer.IsSet)
                throw new ArgumentException("Property is required for class CheermoteTiersInner.", nameof(canCheer));

            if (!showInBitsCard.IsSet)
                throw new ArgumentException("Property is required for class CheermoteTiersInner.", nameof(showInBitsCard));

            if (minBits.IsSet && minBits.Value == null)
                throw new ArgumentNullException(nameof(minBits), "Property is not nullable for class CheermoteTiersInner.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class CheermoteTiersInner.");

            if (color.IsSet && color.Value == null)
                throw new ArgumentNullException(nameof(color), "Property is not nullable for class CheermoteTiersInner.");

            if (images.IsSet && images.Value == null)
                throw new ArgumentNullException(nameof(images), "Property is not nullable for class CheermoteTiersInner.");

            if (canCheer.IsSet && canCheer.Value == null)
                throw new ArgumentNullException(nameof(canCheer), "Property is not nullable for class CheermoteTiersInner.");

            if (showInBitsCard.IsSet && showInBitsCard.Value == null)
                throw new ArgumentNullException(nameof(showInBitsCard), "Property is not nullable for class CheermoteTiersInner.");

            return new CheermoteTiersInner(minBits.Value!.Value!, id.Value!.Value!, color.Value!, images.Value!, canCheer.Value!.Value!, showInBitsCard.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="CheermoteTiersInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="cheermoteTiersInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CheermoteTiersInner cheermoteTiersInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, cheermoteTiersInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CheermoteTiersInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="cheermoteTiersInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CheermoteTiersInner cheermoteTiersInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (cheermoteTiersInner.Color == null)
                throw new ArgumentNullException(nameof(cheermoteTiersInner.Color), "Property is required for class CheermoteTiersInner.");

            if (cheermoteTiersInner.Images == null)
                throw new ArgumentNullException(nameof(cheermoteTiersInner.Images), "Property is required for class CheermoteTiersInner.");

            writer.WriteNumber("min_bits", cheermoteTiersInner.MinBits);

            var idRawValue = CheermoteTiersInner.IdEnumToJsonValue(cheermoteTiersInner.Id);
            writer.WriteString("id", idRawValue);
            writer.WriteString("color", cheermoteTiersInner.Color);

            writer.WritePropertyName("images");
            JsonSerializer.Serialize(writer, cheermoteTiersInner.Images, jsonSerializerOptions);
            writer.WriteBoolean("can_cheer", cheermoteTiersInner.CanCheer);

            writer.WriteBoolean("show_in_bits_card", cheermoteTiersInner.ShowInBitsCard);
        }
    }
}

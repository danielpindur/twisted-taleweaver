// <auto-generated>
/*
 * Twitch API Swagger UI (Unofficial)
 *
 * Unofficial Swagger UI for Twitch API.  All endpoints are generated automatically from the [twitch docs](https://dev.twitch.tv/docs/api/reference) page.  __Features:__  * Swagger UI for all Twitch API endpoints * Schemas for _Request Query Parameters_, _Request Body_, _Response Body_ * Some additional schemas like _Clip_, _ChatBadge_, _Prediction_, _Game_, _Channel_, _Video_ etc. * Response codes and examples * Generated types for TypeScript: [ts-twitch-api](https://github.com/DmitryScaletta/ts-twitch-api)  __Repository:__ [github.com/DmitryScaletta/twitch-api-swagger](https://github.com/DmitryScaletta/twitch-api-swagger)
 *
 * The version of the OpenAPI document: helix
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using TwistedTaleweaver.Integration.Twitch.Helix.Client;

namespace TwistedTaleweaver.Integration.Twitch.Helix.Model
{
    /// <summary>
    /// ChannelInformation
    /// </summary>
    public partial class ChannelInformation : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelInformation" /> class.
        /// </summary>
        /// <param name="broadcasterId">An ID that uniquely identifies the broadcaster.</param>
        /// <param name="broadcasterLogin">The broadcaster’s login name.</param>
        /// <param name="broadcasterName">The broadcaster’s display name.</param>
        /// <param name="broadcasterLanguage">The broadcaster’s preferred language. The value is an ISO 639-1 two-letter language code (for example, _en_ for English). The value is set to “other” if the language is not a Twitch supported language.</param>
        /// <param name="gameName">The name of the game that the broadcaster is playing or last played. The value is an empty string if the broadcaster has never played a game.</param>
        /// <param name="gameId">An ID that uniquely identifies the game that the broadcaster is playing or last played. The value is an empty string if the broadcaster has never played a game.</param>
        /// <param name="title">The title of the stream that the broadcaster is currently streaming or last streamed. The value is an empty string if the broadcaster has never streamed.</param>
        /// <param name="delay">The value of the broadcaster’s stream delay setting, in seconds. This field’s value defaults to zero unless 1) the request specifies a user access token, 2) the ID in the _broadcaster\\_id_ query parameter matches the user ID in the access token, and 3) the broadcaster has partner status and they set a non-zero stream delay value.</param>
        /// <param name="tags">The tags applied to the channel.</param>
        /// <param name="contentClassificationLabels">The CCLs applied to the channel.</param>
        /// <param name="isBrandedContent">Boolean flag indicating if the channel has branded content.</param>
        [JsonConstructor]
        public ChannelInformation(string broadcasterId, string broadcasterLogin, string broadcasterName, string broadcasterLanguage, string gameName, string gameId, string title, int delay, List<string> tags, List<string> contentClassificationLabels, bool isBrandedContent)
        {
            BroadcasterId = broadcasterId;
            BroadcasterLogin = broadcasterLogin;
            BroadcasterName = broadcasterName;
            BroadcasterLanguage = broadcasterLanguage;
            GameName = gameName;
            GameId = gameId;
            Title = title;
            Delay = delay;
            Tags = tags;
            ContentClassificationLabels = contentClassificationLabels;
            IsBrandedContent = isBrandedContent;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// An ID that uniquely identifies the broadcaster.
        /// </summary>
        /// <value>An ID that uniquely identifies the broadcaster.</value>
        [JsonPropertyName("broadcaster_id")]
        public string BroadcasterId { get; set; }

        /// <summary>
        /// The broadcaster’s login name.
        /// </summary>
        /// <value>The broadcaster’s login name.</value>
        [JsonPropertyName("broadcaster_login")]
        public string BroadcasterLogin { get; set; }

        /// <summary>
        /// The broadcaster’s display name.
        /// </summary>
        /// <value>The broadcaster’s display name.</value>
        [JsonPropertyName("broadcaster_name")]
        public string BroadcasterName { get; set; }

        /// <summary>
        /// The broadcaster’s preferred language. The value is an ISO 639-1 two-letter language code (for example, _en_ for English). The value is set to “other” if the language is not a Twitch supported language.
        /// </summary>
        /// <value>The broadcaster’s preferred language. The value is an ISO 639-1 two-letter language code (for example, _en_ for English). The value is set to “other” if the language is not a Twitch supported language.</value>
        [JsonPropertyName("broadcaster_language")]
        public string BroadcasterLanguage { get; set; }

        /// <summary>
        /// The name of the game that the broadcaster is playing or last played. The value is an empty string if the broadcaster has never played a game.
        /// </summary>
        /// <value>The name of the game that the broadcaster is playing or last played. The value is an empty string if the broadcaster has never played a game.</value>
        [JsonPropertyName("game_name")]
        public string GameName { get; set; }

        /// <summary>
        /// An ID that uniquely identifies the game that the broadcaster is playing or last played. The value is an empty string if the broadcaster has never played a game.
        /// </summary>
        /// <value>An ID that uniquely identifies the game that the broadcaster is playing or last played. The value is an empty string if the broadcaster has never played a game.</value>
        [JsonPropertyName("game_id")]
        public string GameId { get; set; }

        /// <summary>
        /// The title of the stream that the broadcaster is currently streaming or last streamed. The value is an empty string if the broadcaster has never streamed.
        /// </summary>
        /// <value>The title of the stream that the broadcaster is currently streaming or last streamed. The value is an empty string if the broadcaster has never streamed.</value>
        [JsonPropertyName("title")]
        public string Title { get; set; }

        /// <summary>
        /// The value of the broadcaster’s stream delay setting, in seconds. This field’s value defaults to zero unless 1) the request specifies a user access token, 2) the ID in the _broadcaster\\_id_ query parameter matches the user ID in the access token, and 3) the broadcaster has partner status and they set a non-zero stream delay value.
        /// </summary>
        /// <value>The value of the broadcaster’s stream delay setting, in seconds. This field’s value defaults to zero unless 1) the request specifies a user access token, 2) the ID in the _broadcaster\\_id_ query parameter matches the user ID in the access token, and 3) the broadcaster has partner status and they set a non-zero stream delay value.</value>
        [JsonPropertyName("delay")]
        public int Delay { get; set; }

        /// <summary>
        /// The tags applied to the channel.
        /// </summary>
        /// <value>The tags applied to the channel.</value>
        [JsonPropertyName("tags")]
        public List<string> Tags { get; set; }

        /// <summary>
        /// The CCLs applied to the channel.
        /// </summary>
        /// <value>The CCLs applied to the channel.</value>
        [JsonPropertyName("content_classification_labels")]
        public List<string> ContentClassificationLabels { get; set; }

        /// <summary>
        /// Boolean flag indicating if the channel has branded content.
        /// </summary>
        /// <value>Boolean flag indicating if the channel has branded content.</value>
        [JsonPropertyName("is_branded_content")]
        public bool IsBrandedContent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ChannelInformation {\n");
            sb.Append("  BroadcasterId: ").Append(BroadcasterId).Append("\n");
            sb.Append("  BroadcasterLogin: ").Append(BroadcasterLogin).Append("\n");
            sb.Append("  BroadcasterName: ").Append(BroadcasterName).Append("\n");
            sb.Append("  BroadcasterLanguage: ").Append(BroadcasterLanguage).Append("\n");
            sb.Append("  GameName: ").Append(GameName).Append("\n");
            sb.Append("  GameId: ").Append(GameId).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Delay: ").Append(Delay).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  ContentClassificationLabels: ").Append(ContentClassificationLabels).Append("\n");
            sb.Append("  IsBrandedContent: ").Append(IsBrandedContent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ChannelInformation" />
    /// </summary>
    public class ChannelInformationJsonConverter : JsonConverter<ChannelInformation>
    {
        /// <summary>
        /// Deserializes json to <see cref="ChannelInformation" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ChannelInformation Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> broadcasterId = default;
            Option<string?> broadcasterLogin = default;
            Option<string?> broadcasterName = default;
            Option<string?> broadcasterLanguage = default;
            Option<string?> gameName = default;
            Option<string?> gameId = default;
            Option<string?> title = default;
            Option<int?> delay = default;
            Option<List<string>?> tags = default;
            Option<List<string>?> contentClassificationLabels = default;
            Option<bool?> isBrandedContent = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "broadcaster_id":
                            broadcasterId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "broadcaster_login":
                            broadcasterLogin = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "broadcaster_name":
                            broadcasterName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "broadcaster_language":
                            broadcasterLanguage = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "game_name":
                            gameName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "game_id":
                            gameId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "delay":
                            delay = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "tags":
                            tags = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "content_classification_labels":
                            contentClassificationLabels = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "is_branded_content":
                            isBrandedContent = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!broadcasterId.IsSet)
                throw new ArgumentException("Property is required for class ChannelInformation.", nameof(broadcasterId));

            if (!broadcasterLogin.IsSet)
                throw new ArgumentException("Property is required for class ChannelInformation.", nameof(broadcasterLogin));

            if (!broadcasterName.IsSet)
                throw new ArgumentException("Property is required for class ChannelInformation.", nameof(broadcasterName));

            if (!broadcasterLanguage.IsSet)
                throw new ArgumentException("Property is required for class ChannelInformation.", nameof(broadcasterLanguage));

            if (!gameName.IsSet)
                throw new ArgumentException("Property is required for class ChannelInformation.", nameof(gameName));

            if (!gameId.IsSet)
                throw new ArgumentException("Property is required for class ChannelInformation.", nameof(gameId));

            if (!title.IsSet)
                throw new ArgumentException("Property is required for class ChannelInformation.", nameof(title));

            if (!delay.IsSet)
                throw new ArgumentException("Property is required for class ChannelInformation.", nameof(delay));

            if (!tags.IsSet)
                throw new ArgumentException("Property is required for class ChannelInformation.", nameof(tags));

            if (!contentClassificationLabels.IsSet)
                throw new ArgumentException("Property is required for class ChannelInformation.", nameof(contentClassificationLabels));

            if (!isBrandedContent.IsSet)
                throw new ArgumentException("Property is required for class ChannelInformation.", nameof(isBrandedContent));

            if (broadcasterId.IsSet && broadcasterId.Value == null)
                throw new ArgumentNullException(nameof(broadcasterId), "Property is not nullable for class ChannelInformation.");

            if (broadcasterLogin.IsSet && broadcasterLogin.Value == null)
                throw new ArgumentNullException(nameof(broadcasterLogin), "Property is not nullable for class ChannelInformation.");

            if (broadcasterName.IsSet && broadcasterName.Value == null)
                throw new ArgumentNullException(nameof(broadcasterName), "Property is not nullable for class ChannelInformation.");

            if (broadcasterLanguage.IsSet && broadcasterLanguage.Value == null)
                throw new ArgumentNullException(nameof(broadcasterLanguage), "Property is not nullable for class ChannelInformation.");

            if (gameName.IsSet && gameName.Value == null)
                throw new ArgumentNullException(nameof(gameName), "Property is not nullable for class ChannelInformation.");

            if (gameId.IsSet && gameId.Value == null)
                throw new ArgumentNullException(nameof(gameId), "Property is not nullable for class ChannelInformation.");

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class ChannelInformation.");

            if (delay.IsSet && delay.Value == null)
                throw new ArgumentNullException(nameof(delay), "Property is not nullable for class ChannelInformation.");

            if (tags.IsSet && tags.Value == null)
                throw new ArgumentNullException(nameof(tags), "Property is not nullable for class ChannelInformation.");

            if (contentClassificationLabels.IsSet && contentClassificationLabels.Value == null)
                throw new ArgumentNullException(nameof(contentClassificationLabels), "Property is not nullable for class ChannelInformation.");

            if (isBrandedContent.IsSet && isBrandedContent.Value == null)
                throw new ArgumentNullException(nameof(isBrandedContent), "Property is not nullable for class ChannelInformation.");

            return new ChannelInformation(broadcasterId.Value!, broadcasterLogin.Value!, broadcasterName.Value!, broadcasterLanguage.Value!, gameName.Value!, gameId.Value!, title.Value!, delay.Value!.Value!, tags.Value!, contentClassificationLabels.Value!, isBrandedContent.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="ChannelInformation" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="channelInformation"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ChannelInformation channelInformation, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, channelInformation, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ChannelInformation" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="channelInformation"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ChannelInformation channelInformation, JsonSerializerOptions jsonSerializerOptions)
        {
            if (channelInformation.BroadcasterId == null)
                throw new ArgumentNullException(nameof(channelInformation.BroadcasterId), "Property is required for class ChannelInformation.");

            if (channelInformation.BroadcasterLogin == null)
                throw new ArgumentNullException(nameof(channelInformation.BroadcasterLogin), "Property is required for class ChannelInformation.");

            if (channelInformation.BroadcasterName == null)
                throw new ArgumentNullException(nameof(channelInformation.BroadcasterName), "Property is required for class ChannelInformation.");

            if (channelInformation.BroadcasterLanguage == null)
                throw new ArgumentNullException(nameof(channelInformation.BroadcasterLanguage), "Property is required for class ChannelInformation.");

            if (channelInformation.GameName == null)
                throw new ArgumentNullException(nameof(channelInformation.GameName), "Property is required for class ChannelInformation.");

            if (channelInformation.GameId == null)
                throw new ArgumentNullException(nameof(channelInformation.GameId), "Property is required for class ChannelInformation.");

            if (channelInformation.Title == null)
                throw new ArgumentNullException(nameof(channelInformation.Title), "Property is required for class ChannelInformation.");

            if (channelInformation.Tags == null)
                throw new ArgumentNullException(nameof(channelInformation.Tags), "Property is required for class ChannelInformation.");

            if (channelInformation.ContentClassificationLabels == null)
                throw new ArgumentNullException(nameof(channelInformation.ContentClassificationLabels), "Property is required for class ChannelInformation.");

            writer.WriteString("broadcaster_id", channelInformation.BroadcasterId);

            writer.WriteString("broadcaster_login", channelInformation.BroadcasterLogin);

            writer.WriteString("broadcaster_name", channelInformation.BroadcasterName);

            writer.WriteString("broadcaster_language", channelInformation.BroadcasterLanguage);

            writer.WriteString("game_name", channelInformation.GameName);

            writer.WriteString("game_id", channelInformation.GameId);

            writer.WriteString("title", channelInformation.Title);

            writer.WriteNumber("delay", channelInformation.Delay);

            writer.WritePropertyName("tags");
            JsonSerializer.Serialize(writer, channelInformation.Tags, jsonSerializerOptions);
            writer.WritePropertyName("content_classification_labels");
            JsonSerializer.Serialize(writer, channelInformation.ContentClassificationLabels, jsonSerializerOptions);
            writer.WriteBoolean("is_branded_content", channelInformation.IsBrandedContent);
        }
    }
}

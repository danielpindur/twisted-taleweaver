// <auto-generated>
/*
 * Twitch API Swagger UI (Unofficial)
 *
 * Unofficial Swagger UI for Twitch API.  All endpoints are generated automatically from the [twitch docs](https://dev.twitch.tv/docs/api/reference) page.  __Features:__  * Swagger UI for all Twitch API endpoints * Schemas for _Request Query Parameters_, _Request Body_, _Response Body_ * Some additional schemas like _Clip_, _ChatBadge_, _Prediction_, _Game_, _Channel_, _Video_ etc. * Response codes and examples * Generated types for TypeScript: [ts-twitch-api](https://github.com/DmitryScaletta/ts-twitch-api)  __Repository:__ [github.com/DmitryScaletta/twitch-api-swagger](https://github.com/DmitryScaletta/twitch-api-swagger)
 *
 * The version of the OpenAPI document: helix
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using TwistedTaleweaver.Integration.Twitch.Helix.Client;

namespace TwistedTaleweaver.Integration.Twitch.Helix.Model
{
    /// <summary>
    /// BanUserResponseDataInner
    /// </summary>
    public partial class BanUserResponseDataInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BanUserResponseDataInner" /> class.
        /// </summary>
        /// <param name="broadcasterId">The broadcaster whose chat room the user was banned from chatting in.</param>
        /// <param name="moderatorId">The moderator that banned or put the user in the timeout.</param>
        /// <param name="userId">The user that was banned or put in a timeout.</param>
        /// <param name="createdAt">The UTC date and time (in RFC3339 format) that the ban or timeout was placed.</param>
        /// <param name="endTime">The UTC date and time (in RFC3339 format) that the timeout will end. Is **null** if the user was banned instead of being put in a timeout.</param>
        [JsonConstructor]
        public BanUserResponseDataInner(string broadcasterId, string moderatorId, string userId, DateTime createdAt, DateTime? endTime = default)
        {
            BroadcasterId = broadcasterId;
            ModeratorId = moderatorId;
            UserId = userId;
            CreatedAt = createdAt;
            EndTime = endTime;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The broadcaster whose chat room the user was banned from chatting in.
        /// </summary>
        /// <value>The broadcaster whose chat room the user was banned from chatting in.</value>
        [JsonPropertyName("broadcaster_id")]
        public string BroadcasterId { get; set; }

        /// <summary>
        /// The moderator that banned or put the user in the timeout.
        /// </summary>
        /// <value>The moderator that banned or put the user in the timeout.</value>
        [JsonPropertyName("moderator_id")]
        public string ModeratorId { get; set; }

        /// <summary>
        /// The user that was banned or put in a timeout.
        /// </summary>
        /// <value>The user that was banned or put in a timeout.</value>
        [JsonPropertyName("user_id")]
        public string UserId { get; set; }

        /// <summary>
        /// The UTC date and time (in RFC3339 format) that the ban or timeout was placed.
        /// </summary>
        /// <value>The UTC date and time (in RFC3339 format) that the ban or timeout was placed.</value>
        [JsonPropertyName("created_at")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// The UTC date and time (in RFC3339 format) that the timeout will end. Is **null** if the user was banned instead of being put in a timeout.
        /// </summary>
        /// <value>The UTC date and time (in RFC3339 format) that the timeout will end. Is **null** if the user was banned instead of being put in a timeout.</value>
        [JsonPropertyName("end_time")]
        public DateTime? EndTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BanUserResponseDataInner {\n");
            sb.Append("  BroadcasterId: ").Append(BroadcasterId).Append("\n");
            sb.Append("  ModeratorId: ").Append(ModeratorId).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="BanUserResponseDataInner" />
    /// </summary>
    public class BanUserResponseDataInnerJsonConverter : JsonConverter<BanUserResponseDataInner>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize EndTime
        /// </summary>
        public static string EndTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="BanUserResponseDataInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override BanUserResponseDataInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> broadcasterId = default;
            Option<string?> moderatorId = default;
            Option<string?> userId = default;
            Option<DateTime?> createdAt = default;
            Option<DateTime?> endTime = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "broadcaster_id":
                            broadcasterId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "moderator_id":
                            moderatorId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "user_id":
                            userId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "created_at":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "end_time":
                            endTime = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!broadcasterId.IsSet)
                throw new ArgumentException("Property is required for class BanUserResponseDataInner.", nameof(broadcasterId));

            if (!moderatorId.IsSet)
                throw new ArgumentException("Property is required for class BanUserResponseDataInner.", nameof(moderatorId));

            if (!userId.IsSet)
                throw new ArgumentException("Property is required for class BanUserResponseDataInner.", nameof(userId));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class BanUserResponseDataInner.", nameof(createdAt));

            if (!endTime.IsSet)
                throw new ArgumentException("Property is required for class BanUserResponseDataInner.", nameof(endTime));

            if (broadcasterId.IsSet && broadcasterId.Value == null)
                throw new ArgumentNullException(nameof(broadcasterId), "Property is not nullable for class BanUserResponseDataInner.");

            if (moderatorId.IsSet && moderatorId.Value == null)
                throw new ArgumentNullException(nameof(moderatorId), "Property is not nullable for class BanUserResponseDataInner.");

            if (userId.IsSet && userId.Value == null)
                throw new ArgumentNullException(nameof(userId), "Property is not nullable for class BanUserResponseDataInner.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class BanUserResponseDataInner.");

            return new BanUserResponseDataInner(broadcasterId.Value!, moderatorId.Value!, userId.Value!, createdAt.Value!.Value!, endTime.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="BanUserResponseDataInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="banUserResponseDataInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, BanUserResponseDataInner banUserResponseDataInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, banUserResponseDataInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="BanUserResponseDataInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="banUserResponseDataInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, BanUserResponseDataInner banUserResponseDataInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (banUserResponseDataInner.BroadcasterId == null)
                throw new ArgumentNullException(nameof(banUserResponseDataInner.BroadcasterId), "Property is required for class BanUserResponseDataInner.");

            if (banUserResponseDataInner.ModeratorId == null)
                throw new ArgumentNullException(nameof(banUserResponseDataInner.ModeratorId), "Property is required for class BanUserResponseDataInner.");

            if (banUserResponseDataInner.UserId == null)
                throw new ArgumentNullException(nameof(banUserResponseDataInner.UserId), "Property is required for class BanUserResponseDataInner.");

            writer.WriteString("broadcaster_id", banUserResponseDataInner.BroadcasterId);

            writer.WriteString("moderator_id", banUserResponseDataInner.ModeratorId);

            writer.WriteString("user_id", banUserResponseDataInner.UserId);

            writer.WriteString("created_at", banUserResponseDataInner.CreatedAt.ToString(CreatedAtFormat));

            if (banUserResponseDataInner.EndTime != null)
                writer.WriteString("end_time", banUserResponseDataInner.EndTime.Value.ToString(EndTimeFormat));
            else
                writer.WriteNull("end_time");
        }
    }
}

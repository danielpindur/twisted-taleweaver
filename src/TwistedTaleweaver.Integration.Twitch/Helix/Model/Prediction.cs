// <auto-generated>
/*
 * Twitch API Swagger UI (Unofficial)
 *
 * Unofficial Swagger UI for Twitch API.  All endpoints are generated automatically from the [twitch docs](https://dev.twitch.tv/docs/api/reference) page.  __Features:__  * Swagger UI for all Twitch API endpoints * Schemas for _Request Query Parameters_, _Request Body_, _Response Body_ * Some additional schemas like _Clip_, _ChatBadge_, _Prediction_, _Game_, _Channel_, _Video_ etc. * Response codes and examples * Generated types for TypeScript: [ts-twitch-api](https://github.com/DmitryScaletta/ts-twitch-api)  __Repository:__ [github.com/DmitryScaletta/twitch-api-swagger](https://github.com/DmitryScaletta/twitch-api-swagger)
 *
 * The version of the OpenAPI document: helix
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using TwistedTaleweaver.Integration.Twitch.Helix.Client;

namespace TwistedTaleweaver.Integration.Twitch.Helix.Model
{
    /// <summary>
    /// Prediction
    /// </summary>
    public partial class Prediction : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Prediction" /> class.
        /// </summary>
        /// <param name="id">An ID that identifies this prediction.</param>
        /// <param name="broadcasterId">An ID that identifies the broadcaster that created the prediction.</param>
        /// <param name="broadcasterName">The broadcaster’s display name.</param>
        /// <param name="broadcasterLogin">The broadcaster’s login name.</param>
        /// <param name="title">The question that the prediction asks. For example, _Will I finish this entire pizza?_</param>
        /// <param name="outcomes">The list of possible outcomes for the prediction.</param>
        /// <param name="predictionWindow">The length of time (in seconds) that the prediction will run for.</param>
        /// <param name="status">The prediction’s status. Valid values are:      * ACTIVE — The Prediction is running and viewers can make predictions. * CANCELED — The broadcaster canceled the Prediction and refunded the Channel Points to the participants. * LOCKED — The broadcaster locked the Prediction, which means viewers can no longer make predictions. * RESOLVED — The winning outcome was determined and the Channel Points were distributed to the viewers who predicted the correct outcome.</param>
        /// <param name="createdAt">The UTC date and time of when the Prediction began.</param>
        /// <param name="winningOutcomeId">The ID of the winning outcome. Is **null** unless &#x60;status&#x60; is RESOLVED.</param>
        /// <param name="endedAt">The UTC date and time of when the Prediction ended. If &#x60;status&#x60; is ACTIVE, this is set to **null**.</param>
        /// <param name="lockedAt">The UTC date and time of when the Prediction was locked. If &#x60;status&#x60; is not LOCKED, this is set to **null**.</param>
        [JsonConstructor]
        public Prediction(string id, string broadcasterId, string broadcasterName, string broadcasterLogin, string title, List<PredictionOutcome> outcomes, int predictionWindow, StatusEnum status, DateTime createdAt, string? winningOutcomeId = default, DateTime? endedAt = default, DateTime? lockedAt = default)
        {
            Id = id;
            BroadcasterId = broadcasterId;
            BroadcasterName = broadcasterName;
            BroadcasterLogin = broadcasterLogin;
            Title = title;
            Outcomes = outcomes;
            PredictionWindow = predictionWindow;
            Status = status;
            CreatedAt = createdAt;
            WinningOutcomeId = winningOutcomeId;
            EndedAt = endedAt;
            LockedAt = lockedAt;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The prediction’s status. Valid values are:      * ACTIVE — The Prediction is running and viewers can make predictions. * CANCELED — The broadcaster canceled the Prediction and refunded the Channel Points to the participants. * LOCKED — The broadcaster locked the Prediction, which means viewers can no longer make predictions. * RESOLVED — The winning outcome was determined and the Channel Points were distributed to the viewers who predicted the correct outcome.
        /// </summary>
        /// <value>The prediction’s status. Valid values are:      * ACTIVE — The Prediction is running and viewers can make predictions. * CANCELED — The broadcaster canceled the Prediction and refunded the Channel Points to the participants. * LOCKED — The broadcaster locked the Prediction, which means viewers can no longer make predictions. * RESOLVED — The winning outcome was determined and the Channel Points were distributed to the viewers who predicted the correct outcome.</value>
        public enum StatusEnum
        {
            /// <summary>
            /// Enum ACTIVE for value: ACTIVE
            /// </summary>
            ACTIVE = 1,

            /// <summary>
            /// Enum CANCELED for value: CANCELED
            /// </summary>
            CANCELED = 2,

            /// <summary>
            /// Enum LOCKED for value: LOCKED
            /// </summary>
            LOCKED = 3,

            /// <summary>
            /// Enum RESOLVED for value: RESOLVED
            /// </summary>
            RESOLVED = 4
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static StatusEnum StatusEnumFromString(string value)
        {
            if (value.Equals("ACTIVE"))
                return StatusEnum.ACTIVE;

            if (value.Equals("CANCELED"))
                return StatusEnum.CANCELED;

            if (value.Equals("LOCKED"))
                return StatusEnum.LOCKED;

            if (value.Equals("RESOLVED"))
                return StatusEnum.RESOLVED;

            throw new NotImplementedException($"Could not convert value to type StatusEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static StatusEnum? StatusEnumFromStringOrDefault(string value)
        {
            if (value.Equals("ACTIVE"))
                return StatusEnum.ACTIVE;

            if (value.Equals("CANCELED"))
                return StatusEnum.CANCELED;

            if (value.Equals("LOCKED"))
                return StatusEnum.LOCKED;

            if (value.Equals("RESOLVED"))
                return StatusEnum.RESOLVED;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="StatusEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string StatusEnumToJsonValue(StatusEnum value)
        {
            if (value == StatusEnum.ACTIVE)
                return "ACTIVE";

            if (value == StatusEnum.CANCELED)
                return "CANCELED";

            if (value == StatusEnum.LOCKED)
                return "LOCKED";

            if (value == StatusEnum.RESOLVED)
                return "RESOLVED";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// The prediction’s status. Valid values are:      * ACTIVE — The Prediction is running and viewers can make predictions. * CANCELED — The broadcaster canceled the Prediction and refunded the Channel Points to the participants. * LOCKED — The broadcaster locked the Prediction, which means viewers can no longer make predictions. * RESOLVED — The winning outcome was determined and the Channel Points were distributed to the viewers who predicted the correct outcome.
        /// </summary>
        /// <value>The prediction’s status. Valid values are:      * ACTIVE — The Prediction is running and viewers can make predictions. * CANCELED — The broadcaster canceled the Prediction and refunded the Channel Points to the participants. * LOCKED — The broadcaster locked the Prediction, which means viewers can no longer make predictions. * RESOLVED — The winning outcome was determined and the Channel Points were distributed to the viewers who predicted the correct outcome.</value>
        [JsonPropertyName("status")]
        public StatusEnum Status { get; set; }

        /// <summary>
        /// An ID that identifies this prediction.
        /// </summary>
        /// <value>An ID that identifies this prediction.</value>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// An ID that identifies the broadcaster that created the prediction.
        /// </summary>
        /// <value>An ID that identifies the broadcaster that created the prediction.</value>
        [JsonPropertyName("broadcaster_id")]
        public string BroadcasterId { get; set; }

        /// <summary>
        /// The broadcaster’s display name.
        /// </summary>
        /// <value>The broadcaster’s display name.</value>
        [JsonPropertyName("broadcaster_name")]
        public string BroadcasterName { get; set; }

        /// <summary>
        /// The broadcaster’s login name.
        /// </summary>
        /// <value>The broadcaster’s login name.</value>
        [JsonPropertyName("broadcaster_login")]
        public string BroadcasterLogin { get; set; }

        /// <summary>
        /// The question that the prediction asks. For example, _Will I finish this entire pizza?_
        /// </summary>
        /// <value>The question that the prediction asks. For example, _Will I finish this entire pizza?_</value>
        [JsonPropertyName("title")]
        public string Title { get; set; }

        /// <summary>
        /// The list of possible outcomes for the prediction.
        /// </summary>
        /// <value>The list of possible outcomes for the prediction.</value>
        [JsonPropertyName("outcomes")]
        public List<PredictionOutcome> Outcomes { get; set; }

        /// <summary>
        /// The length of time (in seconds) that the prediction will run for.
        /// </summary>
        /// <value>The length of time (in seconds) that the prediction will run for.</value>
        [JsonPropertyName("prediction_window")]
        public int PredictionWindow { get; set; }

        /// <summary>
        /// The UTC date and time of when the Prediction began.
        /// </summary>
        /// <value>The UTC date and time of when the Prediction began.</value>
        [JsonPropertyName("created_at")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// The ID of the winning outcome. Is **null** unless &#x60;status&#x60; is RESOLVED.
        /// </summary>
        /// <value>The ID of the winning outcome. Is **null** unless &#x60;status&#x60; is RESOLVED.</value>
        [JsonPropertyName("winning_outcome_id")]
        public string? WinningOutcomeId { get; set; }

        /// <summary>
        /// The UTC date and time of when the Prediction ended. If &#x60;status&#x60; is ACTIVE, this is set to **null**.
        /// </summary>
        /// <value>The UTC date and time of when the Prediction ended. If &#x60;status&#x60; is ACTIVE, this is set to **null**.</value>
        [JsonPropertyName("ended_at")]
        public DateTime? EndedAt { get; set; }

        /// <summary>
        /// The UTC date and time of when the Prediction was locked. If &#x60;status&#x60; is not LOCKED, this is set to **null**.
        /// </summary>
        /// <value>The UTC date and time of when the Prediction was locked. If &#x60;status&#x60; is not LOCKED, this is set to **null**.</value>
        [JsonPropertyName("locked_at")]
        public DateTime? LockedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Prediction {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  BroadcasterId: ").Append(BroadcasterId).Append("\n");
            sb.Append("  BroadcasterName: ").Append(BroadcasterName).Append("\n");
            sb.Append("  BroadcasterLogin: ").Append(BroadcasterLogin).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Outcomes: ").Append(Outcomes).Append("\n");
            sb.Append("  PredictionWindow: ").Append(PredictionWindow).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  WinningOutcomeId: ").Append(WinningOutcomeId).Append("\n");
            sb.Append("  EndedAt: ").Append(EndedAt).Append("\n");
            sb.Append("  LockedAt: ").Append(LockedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Prediction" />
    /// </summary>
    public class PredictionJsonConverter : JsonConverter<Prediction>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize EndedAt
        /// </summary>
        public static string EndedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize LockedAt
        /// </summary>
        public static string LockedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="Prediction" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Prediction Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> broadcasterId = default;
            Option<string?> broadcasterName = default;
            Option<string?> broadcasterLogin = default;
            Option<string?> title = default;
            Option<List<PredictionOutcome>?> outcomes = default;
            Option<int?> predictionWindow = default;
            Option<Prediction.StatusEnum?> status = default;
            Option<DateTime?> createdAt = default;
            Option<string?> winningOutcomeId = default;
            Option<DateTime?> endedAt = default;
            Option<DateTime?> lockedAt = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "broadcaster_id":
                            broadcasterId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "broadcaster_name":
                            broadcasterName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "broadcaster_login":
                            broadcasterLogin = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "outcomes":
                            outcomes = new Option<List<PredictionOutcome>?>(JsonSerializer.Deserialize<List<PredictionOutcome>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "prediction_window":
                            predictionWindow = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "status":
                            string? statusRawValue = utf8JsonReader.GetString();
                            if (statusRawValue != null)
                                status = new Option<Prediction.StatusEnum?>(Prediction.StatusEnumFromStringOrDefault(statusRawValue));
                            break;
                        case "created_at":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "winning_outcome_id":
                            winningOutcomeId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "ended_at":
                            endedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "locked_at":
                            lockedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class Prediction.", nameof(id));

            if (!broadcasterId.IsSet)
                throw new ArgumentException("Property is required for class Prediction.", nameof(broadcasterId));

            if (!broadcasterName.IsSet)
                throw new ArgumentException("Property is required for class Prediction.", nameof(broadcasterName));

            if (!broadcasterLogin.IsSet)
                throw new ArgumentException("Property is required for class Prediction.", nameof(broadcasterLogin));

            if (!title.IsSet)
                throw new ArgumentException("Property is required for class Prediction.", nameof(title));

            if (!outcomes.IsSet)
                throw new ArgumentException("Property is required for class Prediction.", nameof(outcomes));

            if (!predictionWindow.IsSet)
                throw new ArgumentException("Property is required for class Prediction.", nameof(predictionWindow));

            if (!status.IsSet)
                throw new ArgumentException("Property is required for class Prediction.", nameof(status));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class Prediction.", nameof(createdAt));

            if (!winningOutcomeId.IsSet)
                throw new ArgumentException("Property is required for class Prediction.", nameof(winningOutcomeId));

            if (!endedAt.IsSet)
                throw new ArgumentException("Property is required for class Prediction.", nameof(endedAt));

            if (!lockedAt.IsSet)
                throw new ArgumentException("Property is required for class Prediction.", nameof(lockedAt));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class Prediction.");

            if (broadcasterId.IsSet && broadcasterId.Value == null)
                throw new ArgumentNullException(nameof(broadcasterId), "Property is not nullable for class Prediction.");

            if (broadcasterName.IsSet && broadcasterName.Value == null)
                throw new ArgumentNullException(nameof(broadcasterName), "Property is not nullable for class Prediction.");

            if (broadcasterLogin.IsSet && broadcasterLogin.Value == null)
                throw new ArgumentNullException(nameof(broadcasterLogin), "Property is not nullable for class Prediction.");

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class Prediction.");

            if (outcomes.IsSet && outcomes.Value == null)
                throw new ArgumentNullException(nameof(outcomes), "Property is not nullable for class Prediction.");

            if (predictionWindow.IsSet && predictionWindow.Value == null)
                throw new ArgumentNullException(nameof(predictionWindow), "Property is not nullable for class Prediction.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class Prediction.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class Prediction.");

            return new Prediction(id.Value!, broadcasterId.Value!, broadcasterName.Value!, broadcasterLogin.Value!, title.Value!, outcomes.Value!, predictionWindow.Value!.Value!, status.Value!.Value!, createdAt.Value!.Value!, winningOutcomeId.Value!, endedAt.Value!, lockedAt.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="Prediction" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="prediction"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Prediction prediction, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, prediction, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Prediction" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="prediction"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Prediction prediction, JsonSerializerOptions jsonSerializerOptions)
        {
            if (prediction.Id == null)
                throw new ArgumentNullException(nameof(prediction.Id), "Property is required for class Prediction.");

            if (prediction.BroadcasterId == null)
                throw new ArgumentNullException(nameof(prediction.BroadcasterId), "Property is required for class Prediction.");

            if (prediction.BroadcasterName == null)
                throw new ArgumentNullException(nameof(prediction.BroadcasterName), "Property is required for class Prediction.");

            if (prediction.BroadcasterLogin == null)
                throw new ArgumentNullException(nameof(prediction.BroadcasterLogin), "Property is required for class Prediction.");

            if (prediction.Title == null)
                throw new ArgumentNullException(nameof(prediction.Title), "Property is required for class Prediction.");

            if (prediction.Outcomes == null)
                throw new ArgumentNullException(nameof(prediction.Outcomes), "Property is required for class Prediction.");

            writer.WriteString("id", prediction.Id);

            writer.WriteString("broadcaster_id", prediction.BroadcasterId);

            writer.WriteString("broadcaster_name", prediction.BroadcasterName);

            writer.WriteString("broadcaster_login", prediction.BroadcasterLogin);

            writer.WriteString("title", prediction.Title);

            writer.WritePropertyName("outcomes");
            JsonSerializer.Serialize(writer, prediction.Outcomes, jsonSerializerOptions);
            writer.WriteNumber("prediction_window", prediction.PredictionWindow);

            var statusRawValue = Prediction.StatusEnumToJsonValue(prediction.Status);
            writer.WriteString("status", statusRawValue);
            writer.WriteString("created_at", prediction.CreatedAt.ToString(CreatedAtFormat));

            if (prediction.WinningOutcomeId != null)
                writer.WriteString("winning_outcome_id", prediction.WinningOutcomeId);
            else
                writer.WriteNull("winning_outcome_id");

            if (prediction.EndedAt != null)
                writer.WriteString("ended_at", prediction.EndedAt.Value.ToString(EndedAtFormat));
            else
                writer.WriteNull("ended_at");

            if (prediction.LockedAt != null)
                writer.WriteString("locked_at", prediction.LockedAt.Value.ToString(LockedAtFormat));
            else
                writer.WriteNull("locked_at");
        }
    }
}

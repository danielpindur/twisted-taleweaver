// <auto-generated>
/*
 * Twitch API Swagger UI (Unofficial)
 *
 * Unofficial Swagger UI for Twitch API.  All endpoints are generated automatically from the [twitch docs](https://dev.twitch.tv/docs/api/reference) page.  __Features:__  * Swagger UI for all Twitch API endpoints * Schemas for _Request Query Parameters_, _Request Body_, _Response Body_ * Some additional schemas like _Clip_, _ChatBadge_, _Prediction_, _Game_, _Channel_, _Video_ etc. * Response codes and examples * Generated types for TypeScript: [ts-twitch-api](https://github.com/DmitryScaletta/ts-twitch-api)  __Repository:__ [github.com/DmitryScaletta/twitch-api-swagger](https://github.com/DmitryScaletta/twitch-api-swagger)
 *
 * The version of the OpenAPI document: helix
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using TwistedTaleweaver.Integration.Twitch.Helix.Client;

namespace TwistedTaleweaver.Integration.Twitch.Helix.Model
{
    /// <summary>
    /// The transport details that you want Twitch to use when sending you notifications.
    /// </summary>
    public partial class CreateEventSubSubscriptionBodyTransport : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateEventSubSubscriptionBodyTransport" /> class.
        /// </summary>
        /// <param name="method">The transport method. Possible values are:      * webhook * websocket * conduit</param>
        /// <param name="callback">The callback URL where the notifications are sent. The URL must use the HTTPS protocol and port 443\\. See [Processing an event](https://dev.twitch.tv/docs/eventsub/handling-webhook-events#processing-an-event). Specify this field only if &#x60;method&#x60; is set to **webhook**.  **NOTE**: Redirects are not followed.</param>
        /// <param name="secret">The secret used to verify the signature. The secret must be an ASCII string that’s a minimum of 10 characters long and a maximum of 100 characters long. For information about how the secret is used, see [Verifying the event message](https://dev.twitch.tv/docs/eventsub/handling-webhook-events#verifying-the-event-message). Specify this field only if &#x60;method&#x60; is set to **webhook**.</param>
        /// <param name="sessionId">An ID that identifies the WebSocket to send notifications to. When you connect to EventSub using WebSockets, the server returns the ID in the Welcome message. Specify this field only if &#x60;method&#x60; is set to **websocket**.</param>
        /// <param name="conduitId">An ID that identifies the conduit to send notifications to. When you create a conduit, the server returns the conduit ID. Specify this field only if &#x60;method&#x60; is set to **conduit**.</param>
        [JsonConstructor]
        public CreateEventSubSubscriptionBodyTransport(MethodEnum method, Option<string?> callback = default, Option<string?> secret = default, Option<string?> sessionId = default, Option<string?> conduitId = default)
        {
            Method = method;
            CallbackOption = callback;
            SecretOption = secret;
            SessionIdOption = sessionId;
            ConduitIdOption = conduitId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The transport method. Possible values are:      * webhook * websocket * conduit
        /// </summary>
        /// <value>The transport method. Possible values are:      * webhook * websocket * conduit</value>
        public enum MethodEnum
        {
            /// <summary>
            /// Enum Webhook for value: webhook
            /// </summary>
            Webhook = 1,

            /// <summary>
            /// Enum Websocket for value: websocket
            /// </summary>
            Websocket = 2,

            /// <summary>
            /// Enum Conduit for value: conduit
            /// </summary>
            Conduit = 3
        }

        /// <summary>
        /// Returns a <see cref="MethodEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static MethodEnum MethodEnumFromString(string value)
        {
            if (value.Equals("webhook"))
                return MethodEnum.Webhook;

            if (value.Equals("websocket"))
                return MethodEnum.Websocket;

            if (value.Equals("conduit"))
                return MethodEnum.Conduit;

            throw new NotImplementedException($"Could not convert value to type MethodEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="MethodEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static MethodEnum? MethodEnumFromStringOrDefault(string value)
        {
            if (value.Equals("webhook"))
                return MethodEnum.Webhook;

            if (value.Equals("websocket"))
                return MethodEnum.Websocket;

            if (value.Equals("conduit"))
                return MethodEnum.Conduit;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="MethodEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string MethodEnumToJsonValue(MethodEnum value)
        {
            if (value == MethodEnum.Webhook)
                return "webhook";

            if (value == MethodEnum.Websocket)
                return "websocket";

            if (value == MethodEnum.Conduit)
                return "conduit";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// The transport method. Possible values are:      * webhook * websocket * conduit
        /// </summary>
        /// <value>The transport method. Possible values are:      * webhook * websocket * conduit</value>
        [JsonPropertyName("method")]
        public MethodEnum Method { get; set; }

        /// <summary>
        /// Used to track the state of Callback
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CallbackOption { get; private set; }

        /// <summary>
        /// The callback URL where the notifications are sent. The URL must use the HTTPS protocol and port 443\\. See [Processing an event](https://dev.twitch.tv/docs/eventsub/handling-webhook-events#processing-an-event). Specify this field only if &#x60;method&#x60; is set to **webhook**.  **NOTE**: Redirects are not followed.
        /// </summary>
        /// <value>The callback URL where the notifications are sent. The URL must use the HTTPS protocol and port 443\\. See [Processing an event](https://dev.twitch.tv/docs/eventsub/handling-webhook-events#processing-an-event). Specify this field only if &#x60;method&#x60; is set to **webhook**.  **NOTE**: Redirects are not followed.</value>
        [JsonPropertyName("callback")]
        public string? Callback { get { return this.CallbackOption; } set { this.CallbackOption = new(value); } }

        /// <summary>
        /// Used to track the state of Secret
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SecretOption { get; private set; }

        /// <summary>
        /// The secret used to verify the signature. The secret must be an ASCII string that’s a minimum of 10 characters long and a maximum of 100 characters long. For information about how the secret is used, see [Verifying the event message](https://dev.twitch.tv/docs/eventsub/handling-webhook-events#verifying-the-event-message). Specify this field only if &#x60;method&#x60; is set to **webhook**.
        /// </summary>
        /// <value>The secret used to verify the signature. The secret must be an ASCII string that’s a minimum of 10 characters long and a maximum of 100 characters long. For information about how the secret is used, see [Verifying the event message](https://dev.twitch.tv/docs/eventsub/handling-webhook-events#verifying-the-event-message). Specify this field only if &#x60;method&#x60; is set to **webhook**.</value>
        [JsonPropertyName("secret")]
        public string? Secret { get { return this.SecretOption; } set { this.SecretOption = new(value); } }

        /// <summary>
        /// Used to track the state of SessionId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SessionIdOption { get; private set; }

        /// <summary>
        /// An ID that identifies the WebSocket to send notifications to. When you connect to EventSub using WebSockets, the server returns the ID in the Welcome message. Specify this field only if &#x60;method&#x60; is set to **websocket**.
        /// </summary>
        /// <value>An ID that identifies the WebSocket to send notifications to. When you connect to EventSub using WebSockets, the server returns the ID in the Welcome message. Specify this field only if &#x60;method&#x60; is set to **websocket**.</value>
        [JsonPropertyName("session_id")]
        public string? SessionId { get { return this.SessionIdOption; } set { this.SessionIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ConduitId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ConduitIdOption { get; private set; }

        /// <summary>
        /// An ID that identifies the conduit to send notifications to. When you create a conduit, the server returns the conduit ID. Specify this field only if &#x60;method&#x60; is set to **conduit**.
        /// </summary>
        /// <value>An ID that identifies the conduit to send notifications to. When you create a conduit, the server returns the conduit ID. Specify this field only if &#x60;method&#x60; is set to **conduit**.</value>
        [JsonPropertyName("conduit_id")]
        public string? ConduitId { get { return this.ConduitIdOption; } set { this.ConduitIdOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateEventSubSubscriptionBodyTransport {\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  Callback: ").Append(Callback).Append("\n");
            sb.Append("  Secret: ").Append(Secret).Append("\n");
            sb.Append("  SessionId: ").Append(SessionId).Append("\n");
            sb.Append("  ConduitId: ").Append(ConduitId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateEventSubSubscriptionBodyTransport" />
    /// </summary>
    public class CreateEventSubSubscriptionBodyTransportJsonConverter : JsonConverter<CreateEventSubSubscriptionBodyTransport>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreateEventSubSubscriptionBodyTransport" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateEventSubSubscriptionBodyTransport Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<CreateEventSubSubscriptionBodyTransport.MethodEnum?> method = default;
            Option<string?> callback = default;
            Option<string?> secret = default;
            Option<string?> sessionId = default;
            Option<string?> conduitId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "method":
                            string? methodRawValue = utf8JsonReader.GetString();
                            if (methodRawValue != null)
                                method = new Option<CreateEventSubSubscriptionBodyTransport.MethodEnum?>(CreateEventSubSubscriptionBodyTransport.MethodEnumFromStringOrDefault(methodRawValue));
                            break;
                        case "callback":
                            callback = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "secret":
                            secret = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "session_id":
                            sessionId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "conduit_id":
                            conduitId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!method.IsSet)
                throw new ArgumentException("Property is required for class CreateEventSubSubscriptionBodyTransport.", nameof(method));

            if (method.IsSet && method.Value == null)
                throw new ArgumentNullException(nameof(method), "Property is not nullable for class CreateEventSubSubscriptionBodyTransport.");

            if (callback.IsSet && callback.Value == null)
                throw new ArgumentNullException(nameof(callback), "Property is not nullable for class CreateEventSubSubscriptionBodyTransport.");

            if (secret.IsSet && secret.Value == null)
                throw new ArgumentNullException(nameof(secret), "Property is not nullable for class CreateEventSubSubscriptionBodyTransport.");

            if (sessionId.IsSet && sessionId.Value == null)
                throw new ArgumentNullException(nameof(sessionId), "Property is not nullable for class CreateEventSubSubscriptionBodyTransport.");

            if (conduitId.IsSet && conduitId.Value == null)
                throw new ArgumentNullException(nameof(conduitId), "Property is not nullable for class CreateEventSubSubscriptionBodyTransport.");

            return new CreateEventSubSubscriptionBodyTransport(method.Value!.Value!, callback, secret, sessionId, conduitId);
        }

        /// <summary>
        /// Serializes a <see cref="CreateEventSubSubscriptionBodyTransport" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createEventSubSubscriptionBodyTransport"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateEventSubSubscriptionBodyTransport createEventSubSubscriptionBodyTransport, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createEventSubSubscriptionBodyTransport, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateEventSubSubscriptionBodyTransport" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createEventSubSubscriptionBodyTransport"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CreateEventSubSubscriptionBodyTransport createEventSubSubscriptionBodyTransport, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createEventSubSubscriptionBodyTransport.CallbackOption.IsSet && createEventSubSubscriptionBodyTransport.Callback == null)
                throw new ArgumentNullException(nameof(createEventSubSubscriptionBodyTransport.Callback), "Property is required for class CreateEventSubSubscriptionBodyTransport.");

            if (createEventSubSubscriptionBodyTransport.SecretOption.IsSet && createEventSubSubscriptionBodyTransport.Secret == null)
                throw new ArgumentNullException(nameof(createEventSubSubscriptionBodyTransport.Secret), "Property is required for class CreateEventSubSubscriptionBodyTransport.");

            if (createEventSubSubscriptionBodyTransport.SessionIdOption.IsSet && createEventSubSubscriptionBodyTransport.SessionId == null)
                throw new ArgumentNullException(nameof(createEventSubSubscriptionBodyTransport.SessionId), "Property is required for class CreateEventSubSubscriptionBodyTransport.");

            if (createEventSubSubscriptionBodyTransport.ConduitIdOption.IsSet && createEventSubSubscriptionBodyTransport.ConduitId == null)
                throw new ArgumentNullException(nameof(createEventSubSubscriptionBodyTransport.ConduitId), "Property is required for class CreateEventSubSubscriptionBodyTransport.");

            var methodRawValue = CreateEventSubSubscriptionBodyTransport.MethodEnumToJsonValue(createEventSubSubscriptionBodyTransport.Method);
            writer.WriteString("method", methodRawValue);
            if (createEventSubSubscriptionBodyTransport.CallbackOption.IsSet)
                writer.WriteString("callback", createEventSubSubscriptionBodyTransport.Callback);

            if (createEventSubSubscriptionBodyTransport.SecretOption.IsSet)
                writer.WriteString("secret", createEventSubSubscriptionBodyTransport.Secret);

            if (createEventSubSubscriptionBodyTransport.SessionIdOption.IsSet)
                writer.WriteString("session_id", createEventSubSubscriptionBodyTransport.SessionId);

            if (createEventSubSubscriptionBodyTransport.ConduitIdOption.IsSet)
                writer.WriteString("conduit_id", createEventSubSubscriptionBodyTransport.ConduitId);
        }
    }
}

// <auto-generated>
/*
 * Twitch API Swagger UI (Unofficial)
 *
 * Unofficial Swagger UI for Twitch API.  All endpoints are generated automatically from the [twitch docs](https://dev.twitch.tv/docs/api/reference) page.  __Features:__  * Swagger UI for all Twitch API endpoints * Schemas for _Request Query Parameters_, _Request Body_, _Response Body_ * Some additional schemas like _Clip_, _ChatBadge_, _Prediction_, _Game_, _Channel_, _Video_ etc. * Response codes and examples * Generated types for TypeScript: [ts-twitch-api](https://github.com/DmitryScaletta/ts-twitch-api)  __Repository:__ [github.com/DmitryScaletta/twitch-api-swagger](https://github.com/DmitryScaletta/twitch-api-swagger)
 *
 * The version of the OpenAPI document: helix
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using TwistedTaleweaver.Integration.Twitch.Helix.Client;

namespace TwistedTaleweaver.Integration.Twitch.Helix.Model
{
    /// <summary>
    /// GetShieldModeStatusResponseDataInner
    /// </summary>
    public partial class GetShieldModeStatusResponseDataInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetShieldModeStatusResponseDataInner" /> class.
        /// </summary>
        /// <param name="isActive">A Boolean value that determines whether Shield Mode is active. Is **true** if the broadcaster activated Shield Mode; otherwise, **false**.</param>
        /// <param name="moderatorId">An ID that identifies the moderator that last activated Shield Mode. Is an empty string if Shield Mode hasn’t been previously activated.</param>
        /// <param name="moderatorLogin">The moderator’s login name. Is an empty string if Shield Mode hasn’t been previously activated.</param>
        /// <param name="moderatorName">The moderator’s display name. Is an empty string if Shield Mode hasn’t been previously activated.</param>
        /// <param name="lastActivatedAt">The UTC timestamp (in RFC3339 format) of when Shield Mode was last activated. Is an empty string if Shield Mode hasn’t been previously activated.</param>
        [JsonConstructor]
        public GetShieldModeStatusResponseDataInner(bool isActive, string moderatorId, string moderatorLogin, string moderatorName, DateTime lastActivatedAt)
        {
            IsActive = isActive;
            ModeratorId = moderatorId;
            ModeratorLogin = moderatorLogin;
            ModeratorName = moderatorName;
            LastActivatedAt = lastActivatedAt;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// A Boolean value that determines whether Shield Mode is active. Is **true** if the broadcaster activated Shield Mode; otherwise, **false**.
        /// </summary>
        /// <value>A Boolean value that determines whether Shield Mode is active. Is **true** if the broadcaster activated Shield Mode; otherwise, **false**.</value>
        [JsonPropertyName("is_active")]
        public bool IsActive { get; set; }

        /// <summary>
        /// An ID that identifies the moderator that last activated Shield Mode. Is an empty string if Shield Mode hasn’t been previously activated.
        /// </summary>
        /// <value>An ID that identifies the moderator that last activated Shield Mode. Is an empty string if Shield Mode hasn’t been previously activated.</value>
        [JsonPropertyName("moderator_id")]
        public string ModeratorId { get; set; }

        /// <summary>
        /// The moderator’s login name. Is an empty string if Shield Mode hasn’t been previously activated.
        /// </summary>
        /// <value>The moderator’s login name. Is an empty string if Shield Mode hasn’t been previously activated.</value>
        [JsonPropertyName("moderator_login")]
        public string ModeratorLogin { get; set; }

        /// <summary>
        /// The moderator’s display name. Is an empty string if Shield Mode hasn’t been previously activated.
        /// </summary>
        /// <value>The moderator’s display name. Is an empty string if Shield Mode hasn’t been previously activated.</value>
        [JsonPropertyName("moderator_name")]
        public string ModeratorName { get; set; }

        /// <summary>
        /// The UTC timestamp (in RFC3339 format) of when Shield Mode was last activated. Is an empty string if Shield Mode hasn’t been previously activated.
        /// </summary>
        /// <value>The UTC timestamp (in RFC3339 format) of when Shield Mode was last activated. Is an empty string if Shield Mode hasn’t been previously activated.</value>
        [JsonPropertyName("last_activated_at")]
        public DateTime LastActivatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetShieldModeStatusResponseDataInner {\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  ModeratorId: ").Append(ModeratorId).Append("\n");
            sb.Append("  ModeratorLogin: ").Append(ModeratorLogin).Append("\n");
            sb.Append("  ModeratorName: ").Append(ModeratorName).Append("\n");
            sb.Append("  LastActivatedAt: ").Append(LastActivatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetShieldModeStatusResponseDataInner" />
    /// </summary>
    public class GetShieldModeStatusResponseDataInnerJsonConverter : JsonConverter<GetShieldModeStatusResponseDataInner>
    {
        /// <summary>
        /// The format to use to serialize LastActivatedAt
        /// </summary>
        public static string LastActivatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="GetShieldModeStatusResponseDataInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetShieldModeStatusResponseDataInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> isActive = default;
            Option<string?> moderatorId = default;
            Option<string?> moderatorLogin = default;
            Option<string?> moderatorName = default;
            Option<DateTime?> lastActivatedAt = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "is_active":
                            isActive = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "moderator_id":
                            moderatorId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "moderator_login":
                            moderatorLogin = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "moderator_name":
                            moderatorName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "last_activated_at":
                            lastActivatedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!isActive.IsSet)
                throw new ArgumentException("Property is required for class GetShieldModeStatusResponseDataInner.", nameof(isActive));

            if (!moderatorId.IsSet)
                throw new ArgumentException("Property is required for class GetShieldModeStatusResponseDataInner.", nameof(moderatorId));

            if (!moderatorLogin.IsSet)
                throw new ArgumentException("Property is required for class GetShieldModeStatusResponseDataInner.", nameof(moderatorLogin));

            if (!moderatorName.IsSet)
                throw new ArgumentException("Property is required for class GetShieldModeStatusResponseDataInner.", nameof(moderatorName));

            if (!lastActivatedAt.IsSet)
                throw new ArgumentException("Property is required for class GetShieldModeStatusResponseDataInner.", nameof(lastActivatedAt));

            if (isActive.IsSet && isActive.Value == null)
                throw new ArgumentNullException(nameof(isActive), "Property is not nullable for class GetShieldModeStatusResponseDataInner.");

            if (moderatorId.IsSet && moderatorId.Value == null)
                throw new ArgumentNullException(nameof(moderatorId), "Property is not nullable for class GetShieldModeStatusResponseDataInner.");

            if (moderatorLogin.IsSet && moderatorLogin.Value == null)
                throw new ArgumentNullException(nameof(moderatorLogin), "Property is not nullable for class GetShieldModeStatusResponseDataInner.");

            if (moderatorName.IsSet && moderatorName.Value == null)
                throw new ArgumentNullException(nameof(moderatorName), "Property is not nullable for class GetShieldModeStatusResponseDataInner.");

            if (lastActivatedAt.IsSet && lastActivatedAt.Value == null)
                throw new ArgumentNullException(nameof(lastActivatedAt), "Property is not nullable for class GetShieldModeStatusResponseDataInner.");

            return new GetShieldModeStatusResponseDataInner(isActive.Value!.Value!, moderatorId.Value!, moderatorLogin.Value!, moderatorName.Value!, lastActivatedAt.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="GetShieldModeStatusResponseDataInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getShieldModeStatusResponseDataInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetShieldModeStatusResponseDataInner getShieldModeStatusResponseDataInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getShieldModeStatusResponseDataInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetShieldModeStatusResponseDataInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getShieldModeStatusResponseDataInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetShieldModeStatusResponseDataInner getShieldModeStatusResponseDataInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getShieldModeStatusResponseDataInner.ModeratorId == null)
                throw new ArgumentNullException(nameof(getShieldModeStatusResponseDataInner.ModeratorId), "Property is required for class GetShieldModeStatusResponseDataInner.");

            if (getShieldModeStatusResponseDataInner.ModeratorLogin == null)
                throw new ArgumentNullException(nameof(getShieldModeStatusResponseDataInner.ModeratorLogin), "Property is required for class GetShieldModeStatusResponseDataInner.");

            if (getShieldModeStatusResponseDataInner.ModeratorName == null)
                throw new ArgumentNullException(nameof(getShieldModeStatusResponseDataInner.ModeratorName), "Property is required for class GetShieldModeStatusResponseDataInner.");

            writer.WriteBoolean("is_active", getShieldModeStatusResponseDataInner.IsActive);

            writer.WriteString("moderator_id", getShieldModeStatusResponseDataInner.ModeratorId);

            writer.WriteString("moderator_login", getShieldModeStatusResponseDataInner.ModeratorLogin);

            writer.WriteString("moderator_name", getShieldModeStatusResponseDataInner.ModeratorName);

            writer.WriteString("last_activated_at", getShieldModeStatusResponseDataInner.LastActivatedAt.ToString(LastActivatedAtFormat));
        }
    }
}

// <auto-generated>
/*
 * Twitch API Swagger UI (Unofficial)
 *
 * Unofficial Swagger UI for Twitch API.  All endpoints are generated automatically from the [twitch docs](https://dev.twitch.tv/docs/api/reference) page.  __Features:__  * Swagger UI for all Twitch API endpoints * Schemas for _Request Query Parameters_, _Request Body_, _Response Body_ * Some additional schemas like _Clip_, _ChatBadge_, _Prediction_, _Game_, _Channel_, _Video_ etc. * Response codes and examples * Generated types for TypeScript: [ts-twitch-api](https://github.com/DmitryScaletta/ts-twitch-api)  __Repository:__ [github.com/DmitryScaletta/twitch-api-swagger](https://github.com/DmitryScaletta/twitch-api-swagger)
 *
 * The version of the OpenAPI document: helix
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using TwistedTaleweaver.Integration.Twitch.Helix.Client;

namespace TwistedTaleweaver.Integration.Twitch.Helix.Model
{
    /// <summary>
    /// The transport details used to send the notifications.
    /// </summary>
    public partial class GetConduitShardsResponseDataInnerTransport : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetConduitShardsResponseDataInnerTransport" /> class.
        /// </summary>
        /// <param name="method">The transport method. Possible values are:      * webhook * websocket</param>
        /// <param name="callback">The callback URL where the notifications are sent. Included only if method is set to webhook.</param>
        /// <param name="sessionId">An ID that identifies the WebSocket that notifications are sent to. Included only if method is set to websocket.</param>
        /// <param name="connectedAt">The UTC date and time that the WebSocket connection was established. Included only if method is set to websocket.</param>
        /// <param name="disconnectedAt">The UTC date and time that the WebSocket connection was lost. Included only if method is set to websocket.</param>
        [JsonConstructor]
        public GetConduitShardsResponseDataInnerTransport(MethodEnum method, Option<string?> callback = default, Option<string?> sessionId = default, Option<DateTime?> connectedAt = default, Option<DateTime?> disconnectedAt = default)
        {
            Method = method;
            CallbackOption = callback;
            SessionIdOption = sessionId;
            ConnectedAtOption = connectedAt;
            DisconnectedAtOption = disconnectedAt;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The transport method. Possible values are:      * webhook * websocket
        /// </summary>
        /// <value>The transport method. Possible values are:      * webhook * websocket</value>
        public enum MethodEnum
        {
            /// <summary>
            /// Enum Webhook for value: webhook
            /// </summary>
            Webhook = 1,

            /// <summary>
            /// Enum Websocket for value: websocket
            /// </summary>
            Websocket = 2
        }

        /// <summary>
        /// Returns a <see cref="MethodEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static MethodEnum MethodEnumFromString(string value)
        {
            if (value.Equals("webhook"))
                return MethodEnum.Webhook;

            if (value.Equals("websocket"))
                return MethodEnum.Websocket;

            throw new NotImplementedException($"Could not convert value to type MethodEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="MethodEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static MethodEnum? MethodEnumFromStringOrDefault(string value)
        {
            if (value.Equals("webhook"))
                return MethodEnum.Webhook;

            if (value.Equals("websocket"))
                return MethodEnum.Websocket;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="MethodEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string MethodEnumToJsonValue(MethodEnum value)
        {
            if (value == MethodEnum.Webhook)
                return "webhook";

            if (value == MethodEnum.Websocket)
                return "websocket";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// The transport method. Possible values are:      * webhook * websocket
        /// </summary>
        /// <value>The transport method. Possible values are:      * webhook * websocket</value>
        [JsonPropertyName("method")]
        public MethodEnum Method { get; set; }

        /// <summary>
        /// Used to track the state of Callback
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CallbackOption { get; private set; }

        /// <summary>
        /// The callback URL where the notifications are sent. Included only if method is set to webhook.
        /// </summary>
        /// <value>The callback URL where the notifications are sent. Included only if method is set to webhook.</value>
        [JsonPropertyName("callback")]
        public string? Callback { get { return this.CallbackOption; } set { this.CallbackOption = new(value); } }

        /// <summary>
        /// Used to track the state of SessionId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SessionIdOption { get; private set; }

        /// <summary>
        /// An ID that identifies the WebSocket that notifications are sent to. Included only if method is set to websocket.
        /// </summary>
        /// <value>An ID that identifies the WebSocket that notifications are sent to. Included only if method is set to websocket.</value>
        [JsonPropertyName("session_id")]
        public string? SessionId { get { return this.SessionIdOption; } set { this.SessionIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ConnectedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> ConnectedAtOption { get; private set; }

        /// <summary>
        /// The UTC date and time that the WebSocket connection was established. Included only if method is set to websocket.
        /// </summary>
        /// <value>The UTC date and time that the WebSocket connection was established. Included only if method is set to websocket.</value>
        [JsonPropertyName("connected_at")]
        public DateTime? ConnectedAt { get { return this.ConnectedAtOption; } set { this.ConnectedAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of DisconnectedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> DisconnectedAtOption { get; private set; }

        /// <summary>
        /// The UTC date and time that the WebSocket connection was lost. Included only if method is set to websocket.
        /// </summary>
        /// <value>The UTC date and time that the WebSocket connection was lost. Included only if method is set to websocket.</value>
        [JsonPropertyName("disconnected_at")]
        public DateTime? DisconnectedAt { get { return this.DisconnectedAtOption; } set { this.DisconnectedAtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetConduitShardsResponseDataInnerTransport {\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  Callback: ").Append(Callback).Append("\n");
            sb.Append("  SessionId: ").Append(SessionId).Append("\n");
            sb.Append("  ConnectedAt: ").Append(ConnectedAt).Append("\n");
            sb.Append("  DisconnectedAt: ").Append(DisconnectedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetConduitShardsResponseDataInnerTransport" />
    /// </summary>
    public class GetConduitShardsResponseDataInnerTransportJsonConverter : JsonConverter<GetConduitShardsResponseDataInnerTransport>
    {
        /// <summary>
        /// The format to use to serialize ConnectedAt
        /// </summary>
        public static string ConnectedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize DisconnectedAt
        /// </summary>
        public static string DisconnectedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="GetConduitShardsResponseDataInnerTransport" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetConduitShardsResponseDataInnerTransport Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<GetConduitShardsResponseDataInnerTransport.MethodEnum?> method = default;
            Option<string?> callback = default;
            Option<string?> sessionId = default;
            Option<DateTime?> connectedAt = default;
            Option<DateTime?> disconnectedAt = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "method":
                            string? methodRawValue = utf8JsonReader.GetString();
                            if (methodRawValue != null)
                                method = new Option<GetConduitShardsResponseDataInnerTransport.MethodEnum?>(GetConduitShardsResponseDataInnerTransport.MethodEnumFromStringOrDefault(methodRawValue));
                            break;
                        case "callback":
                            callback = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "session_id":
                            sessionId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "connected_at":
                            connectedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "disconnected_at":
                            disconnectedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!method.IsSet)
                throw new ArgumentException("Property is required for class GetConduitShardsResponseDataInnerTransport.", nameof(method));

            if (method.IsSet && method.Value == null)
                throw new ArgumentNullException(nameof(method), "Property is not nullable for class GetConduitShardsResponseDataInnerTransport.");

            if (callback.IsSet && callback.Value == null)
                throw new ArgumentNullException(nameof(callback), "Property is not nullable for class GetConduitShardsResponseDataInnerTransport.");

            if (sessionId.IsSet && sessionId.Value == null)
                throw new ArgumentNullException(nameof(sessionId), "Property is not nullable for class GetConduitShardsResponseDataInnerTransport.");

            if (connectedAt.IsSet && connectedAt.Value == null)
                throw new ArgumentNullException(nameof(connectedAt), "Property is not nullable for class GetConduitShardsResponseDataInnerTransport.");

            if (disconnectedAt.IsSet && disconnectedAt.Value == null)
                throw new ArgumentNullException(nameof(disconnectedAt), "Property is not nullable for class GetConduitShardsResponseDataInnerTransport.");

            return new GetConduitShardsResponseDataInnerTransport(method.Value!.Value!, callback, sessionId, connectedAt, disconnectedAt);
        }

        /// <summary>
        /// Serializes a <see cref="GetConduitShardsResponseDataInnerTransport" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getConduitShardsResponseDataInnerTransport"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetConduitShardsResponseDataInnerTransport getConduitShardsResponseDataInnerTransport, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getConduitShardsResponseDataInnerTransport, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetConduitShardsResponseDataInnerTransport" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getConduitShardsResponseDataInnerTransport"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetConduitShardsResponseDataInnerTransport getConduitShardsResponseDataInnerTransport, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getConduitShardsResponseDataInnerTransport.CallbackOption.IsSet && getConduitShardsResponseDataInnerTransport.Callback == null)
                throw new ArgumentNullException(nameof(getConduitShardsResponseDataInnerTransport.Callback), "Property is required for class GetConduitShardsResponseDataInnerTransport.");

            if (getConduitShardsResponseDataInnerTransport.SessionIdOption.IsSet && getConduitShardsResponseDataInnerTransport.SessionId == null)
                throw new ArgumentNullException(nameof(getConduitShardsResponseDataInnerTransport.SessionId), "Property is required for class GetConduitShardsResponseDataInnerTransport.");

            var methodRawValue = GetConduitShardsResponseDataInnerTransport.MethodEnumToJsonValue(getConduitShardsResponseDataInnerTransport.Method);
            writer.WriteString("method", methodRawValue);
            if (getConduitShardsResponseDataInnerTransport.CallbackOption.IsSet)
                writer.WriteString("callback", getConduitShardsResponseDataInnerTransport.Callback);

            if (getConduitShardsResponseDataInnerTransport.SessionIdOption.IsSet)
                writer.WriteString("session_id", getConduitShardsResponseDataInnerTransport.SessionId);

            if (getConduitShardsResponseDataInnerTransport.ConnectedAtOption.IsSet)
                writer.WriteString("connected_at", getConduitShardsResponseDataInnerTransport.ConnectedAtOption.Value!.Value.ToString(ConnectedAtFormat));

            if (getConduitShardsResponseDataInnerTransport.DisconnectedAtOption.IsSet)
                writer.WriteString("disconnected_at", getConduitShardsResponseDataInnerTransport.DisconnectedAtOption.Value!.Value.ToString(DisconnectedAtFormat));
        }
    }
}

// <auto-generated>
/*
 * Twitch OAuth2 Token
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using TwistedTaleweaver.Integration.Twitch.OAuth2.Client;
using TwistedTaleweaver.Integration.Twitch.OAuth2.Model;
using System.Diagnostics.CodeAnalysis;

namespace TwistedTaleweaver.Integration.Twitch.OAuth2.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IOAuthApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        DefaultApiEvents Events { get; }

        /// <summary>
        /// Get OAuth2 token
        /// </summary>
        /// <remarks>
        /// Exchange code or refresh token for an access token.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="grantType"></param>
        /// <param name="code"> (optional)</param>
        /// <param name="redirectUri"> (optional)</param>
        /// <param name="refreshToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IOauth2TokenPostApiResponse"/>&gt;</returns>
        Task<IOauth2TokenPostApiResponse> Oauth2TokenPostAsync(string clientId, string clientSecret, string grantType, Option<string> code = default, Option<string> redirectUri = default, Option<string> refreshToken = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get OAuth2 token
        /// </summary>
        /// <remarks>
        /// Exchange code or refresh token for an access token.
        /// </remarks>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="grantType"></param>
        /// <param name="code"> (optional)</param>
        /// <param name="redirectUri"> (optional)</param>
        /// <param name="refreshToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IOauth2TokenPostApiResponse"/>?&gt;</returns>
        Task<IOauth2TokenPostApiResponse?> Oauth2TokenPostOrDefaultAsync(string clientId, string clientSecret, string grantType, Option<string> code = default, Option<string> redirectUri = default, Option<string> refreshToken = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IOauth2TokenPostApiResponse"/>
    /// </summary>
    public interface IOauth2TokenPostApiResponse : TwistedTaleweaver.Integration.Twitch.OAuth2.Client.IApiResponse, IOk<TwistedTaleweaver.Integration.Twitch.OAuth2.Model.Oauth2TokenResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class DefaultApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnOauth2TokenPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorOauth2TokenPost;

        internal void ExecuteOnOauth2TokenPost(OAuthApi.Oauth2TokenPostApiResponse apiResponse)
        {
            OnOauth2TokenPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorOauth2TokenPost(Exception exception)
        {
            OnErrorOauth2TokenPost?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class OAuthApi : IOAuthApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<OAuthApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public DefaultApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="OAuthApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OAuthApi(ILogger<OAuthApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, DefaultApiEvents defaultApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<OAuthApi>();
            HttpClient = httpClient;
            Events = defaultApiEvents;
        }

        partial void FormatOauth2TokenPost(ref string clientId, ref string clientSecret, ref string grantType, ref Option<string> code, ref Option<string> redirectUri, ref Option<string> refreshToken);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="grantType"></param>
        /// <param name="code"></param>
        /// <param name="redirectUri"></param>
        /// <param name="refreshToken"></param>
        /// <returns></returns>
        private void ValidateOauth2TokenPost(string clientId, string clientSecret, string grantType, Option<string> code, Option<string> redirectUri, Option<string> refreshToken)
        {
            if (clientId == null)
                throw new ArgumentNullException(nameof(clientId));

            if (clientSecret == null)
                throw new ArgumentNullException(nameof(clientSecret));

            if (grantType == null)
                throw new ArgumentNullException(nameof(grantType));

            if (code.IsSet && code.Value == null)
                throw new ArgumentNullException(nameof(code));

            if (redirectUri.IsSet && redirectUri.Value == null)
                throw new ArgumentNullException(nameof(redirectUri));

            if (refreshToken.IsSet && refreshToken.Value == null)
                throw new ArgumentNullException(nameof(refreshToken));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="grantType"></param>
        /// <param name="code"></param>
        /// <param name="redirectUri"></param>
        /// <param name="refreshToken"></param>
        private void AfterOauth2TokenPostDefaultImplementation(IOauth2TokenPostApiResponse apiResponseLocalVar, string clientId, string clientSecret, string grantType, Option<string> code, Option<string> redirectUri, Option<string> refreshToken)
        {
            bool suppressDefaultLog = false;
            AfterOauth2TokenPost(ref suppressDefaultLog, apiResponseLocalVar, clientId, clientSecret, grantType, code, redirectUri, refreshToken);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="grantType"></param>
        /// <param name="code"></param>
        /// <param name="redirectUri"></param>
        /// <param name="refreshToken"></param>
        partial void AfterOauth2TokenPost(ref bool suppressDefaultLog, IOauth2TokenPostApiResponse apiResponseLocalVar, string clientId, string clientSecret, string grantType, Option<string> code, Option<string> redirectUri, Option<string> refreshToken);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="grantType"></param>
        /// <param name="code"></param>
        /// <param name="redirectUri"></param>
        /// <param name="refreshToken"></param>
        private void OnErrorOauth2TokenPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string clientId, string clientSecret, string grantType, Option<string> code, Option<string> redirectUri, Option<string> refreshToken)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorOauth2TokenPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, clientId, clientSecret, grantType, code, redirectUri, refreshToken);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="grantType"></param>
        /// <param name="code"></param>
        /// <param name="redirectUri"></param>
        /// <param name="refreshToken"></param>
        partial void OnErrorOauth2TokenPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string clientId, string clientSecret, string grantType, Option<string> code, Option<string> redirectUri, Option<string> refreshToken);

        /// <summary>
        /// Get OAuth2 token Exchange code or refresh token for an access token.
        /// </summary>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="grantType"></param>
        /// <param name="code"> (optional)</param>
        /// <param name="redirectUri"> (optional)</param>
        /// <param name="refreshToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IOauth2TokenPostApiResponse"/>&gt;</returns>
        public async Task<IOauth2TokenPostApiResponse?> Oauth2TokenPostOrDefaultAsync(string clientId, string clientSecret, string grantType, Option<string> code = default, Option<string> redirectUri = default, Option<string> refreshToken = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await Oauth2TokenPostAsync(clientId, clientSecret, grantType, code, redirectUri, refreshToken, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get OAuth2 token Exchange code or refresh token for an access token.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="grantType"></param>
        /// <param name="code"> (optional)</param>
        /// <param name="redirectUri"> (optional)</param>
        /// <param name="refreshToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IOauth2TokenPostApiResponse"/>&gt;</returns>
        public async Task<IOauth2TokenPostApiResponse> Oauth2TokenPostAsync(string clientId, string clientSecret, string grantType, Option<string> code = default, Option<string> redirectUri = default, Option<string> refreshToken = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateOauth2TokenPost(clientId, clientSecret, grantType, code, redirectUri, refreshToken);

                FormatOauth2TokenPost(ref clientId, ref clientSecret, ref grantType, ref code, ref redirectUri, ref refreshToken);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/oauth2/token"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/oauth2/token");

                    List<KeyValuePair<string?, string?>> formParameterLocalVars = new List<KeyValuePair<string?, string?>>
                    {
                        new KeyValuePair<string?, string?>("client_id", ClientUtils.ParameterToString(clientId)),
                        new KeyValuePair<string?, string?>("client_secret", ClientUtils.ParameterToString(clientSecret)),
                        new KeyValuePair<string?, string?>("grant_type", ClientUtils.ParameterToString(grantType))
                    };

                    if (code.IsSet)
                        formParameterLocalVars.Add(
                            new KeyValuePair<string?, string?>("code", ClientUtils.ParameterToString(code.Value))
                        );

                    if (redirectUri.IsSet)
                        formParameterLocalVars.Add(
                            new KeyValuePair<string?, string?>("redirect_uri", ClientUtils.ParameterToString(redirectUri.Value))
                        );

                    if (refreshToken.IsSet)
                        formParameterLocalVars.Add(
                            new KeyValuePair<string?, string?>("refresh_token", ClientUtils.ParameterToString(refreshToken.Value))
                        );

                    httpRequestMessageLocalVar.Content = new FormUrlEncodedContent(formParameterLocalVars);
                    
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/x-www-form-urlencoded"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<Oauth2TokenPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<Oauth2TokenPostApiResponse>();

                        Oauth2TokenPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/oauth2/token", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterOauth2TokenPostDefaultImplementation(apiResponseLocalVar, clientId, clientSecret, grantType, code, redirectUri, refreshToken);

                        Events.ExecuteOnOauth2TokenPost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorOauth2TokenPostDefaultImplementation(e, "/oauth2/token", uriBuilderLocalVar.Path, clientId, clientSecret, grantType, code, redirectUri, refreshToken);
                Events.ExecuteOnErrorOauth2TokenPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="Oauth2TokenPostApiResponse"/>
        /// </summary>
        public partial class Oauth2TokenPostApiResponse : TwistedTaleweaver.Integration.Twitch.OAuth2.Client.ApiResponse, IOauth2TokenPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<Oauth2TokenPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="Oauth2TokenPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public Oauth2TokenPostApiResponse(ILogger<Oauth2TokenPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public TwistedTaleweaver.Integration.Twitch.OAuth2.Model.Oauth2TokenResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<TwistedTaleweaver.Integration.Twitch.OAuth2.Model.Oauth2TokenResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out TwistedTaleweaver.Integration.Twitch.OAuth2.Model.Oauth2TokenResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}

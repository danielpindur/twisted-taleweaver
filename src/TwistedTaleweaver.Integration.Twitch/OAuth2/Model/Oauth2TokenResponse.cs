// <auto-generated>
/*
 * Twitch OAuth2 Token
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using TwistedTaleweaver.Integration.Twitch.OAuth2.Client;

namespace TwistedTaleweaver.Integration.Twitch.OAuth2.Model
{
    /// <summary>
    /// Oauth2TokenPost200Response
    /// </summary>
    public partial class Oauth2TokenResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Oauth2TokenResponse" /> class.
        /// </summary>
        /// <param name="accessToken">accessToken</param>
        /// <param name="refreshToken">refreshToken</param>
        /// <param name="expiresIn">expiresIn</param>
        /// <param name="scope">scope</param>
        /// <param name="tokenType">tokenType</param>
        [JsonConstructor]
        public Oauth2TokenResponse(Option<string?> accessToken = default, Option<string?> refreshToken = default, Option<int?> expiresIn = default, Option<List<string>?> scope = default, Option<string?> tokenType = default)
        {
            AccessTokenOption = accessToken;
            RefreshTokenOption = refreshToken;
            ExpiresInOption = expiresIn;
            ScopeOption = scope;
            TokenTypeOption = tokenType;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of AccessToken
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AccessTokenOption { get; private set; }

        /// <summary>
        /// Gets or Sets AccessToken
        /// </summary>
        [JsonPropertyName("access_token")]
        public string? AccessToken { get { return this.AccessTokenOption; } set { this.AccessTokenOption = new(value); } }

        /// <summary>
        /// Used to track the state of RefreshToken
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RefreshTokenOption { get; private set; }

        /// <summary>
        /// Gets or Sets RefreshToken
        /// </summary>
        [JsonPropertyName("refresh_token")]
        public string? RefreshToken { get { return this.RefreshTokenOption; } set { this.RefreshTokenOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExpiresIn
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ExpiresInOption { get; private set; }

        /// <summary>
        /// Gets or Sets ExpiresIn
        /// </summary>
        [JsonPropertyName("expires_in")]
        public int? ExpiresIn { get { return this.ExpiresInOption; } set { this.ExpiresInOption = new(value); } }

        /// <summary>
        /// Used to track the state of Scope
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> ScopeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Scope
        /// </summary>
        [JsonPropertyName("scope")]
        public List<string>? Scope { get { return this.ScopeOption; } set { this.ScopeOption = new(value); } }

        /// <summary>
        /// Used to track the state of TokenType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TokenTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets TokenType
        /// </summary>
        [JsonPropertyName("token_type")]
        public string? TokenType { get { return this.TokenTypeOption; } set { this.TokenTypeOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Oauth2TokenPost200Response {\n");
            sb.Append("  AccessToken: ").Append(AccessToken).Append("\n");
            sb.Append("  RefreshToken: ").Append(RefreshToken).Append("\n");
            sb.Append("  ExpiresIn: ").Append(ExpiresIn).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  TokenType: ").Append(TokenType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Oauth2TokenResponse" />
    /// </summary>
    public class Oauth2TokenPost200ResponseJsonConverter : JsonConverter<Oauth2TokenResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="Oauth2TokenResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Oauth2TokenResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> accessToken = default;
            Option<string?> refreshToken = default;
            Option<int?> expiresIn = default;
            Option<List<string>?> scope = default;
            Option<string?> tokenType = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "access_token":
                            accessToken = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "refresh_token":
                            refreshToken = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "expires_in":
                            expiresIn = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "scope":
                            scope = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "token_type":
                            tokenType = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (accessToken.IsSet && accessToken.Value == null)
                throw new ArgumentNullException(nameof(accessToken), "Property is not nullable for class Oauth2TokenPost200Response.");

            if (refreshToken.IsSet && refreshToken.Value == null)
                throw new ArgumentNullException(nameof(refreshToken), "Property is not nullable for class Oauth2TokenPost200Response.");

            if (expiresIn.IsSet && expiresIn.Value == null)
                throw new ArgumentNullException(nameof(expiresIn), "Property is not nullable for class Oauth2TokenPost200Response.");

            if (scope.IsSet && scope.Value == null)
                throw new ArgumentNullException(nameof(scope), "Property is not nullable for class Oauth2TokenPost200Response.");

            if (tokenType.IsSet && tokenType.Value == null)
                throw new ArgumentNullException(nameof(tokenType), "Property is not nullable for class Oauth2TokenPost200Response.");

            return new Oauth2TokenResponse(accessToken, refreshToken, expiresIn, scope, tokenType);
        }

        /// <summary>
        /// Serializes a <see cref="Oauth2TokenResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="oauth2TokenResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Oauth2TokenResponse oauth2TokenResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, oauth2TokenResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Oauth2TokenResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="oauth2TokenResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Oauth2TokenResponse oauth2TokenResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (oauth2TokenResponse.AccessTokenOption.IsSet && oauth2TokenResponse.AccessToken == null)
                throw new ArgumentNullException(nameof(oauth2TokenResponse.AccessToken), "Property is required for class Oauth2TokenPost200Response.");

            if (oauth2TokenResponse.RefreshTokenOption.IsSet && oauth2TokenResponse.RefreshToken == null)
                throw new ArgumentNullException(nameof(oauth2TokenResponse.RefreshToken), "Property is required for class Oauth2TokenPost200Response.");

            if (oauth2TokenResponse.ScopeOption.IsSet && oauth2TokenResponse.Scope == null)
                throw new ArgumentNullException(nameof(oauth2TokenResponse.Scope), "Property is required for class Oauth2TokenPost200Response.");

            if (oauth2TokenResponse.TokenTypeOption.IsSet && oauth2TokenResponse.TokenType == null)
                throw new ArgumentNullException(nameof(oauth2TokenResponse.TokenType), "Property is required for class Oauth2TokenPost200Response.");

            if (oauth2TokenResponse.AccessTokenOption.IsSet)
                writer.WriteString("access_token", oauth2TokenResponse.AccessToken);

            if (oauth2TokenResponse.RefreshTokenOption.IsSet)
                writer.WriteString("refresh_token", oauth2TokenResponse.RefreshToken);

            if (oauth2TokenResponse.ExpiresInOption.IsSet)
                writer.WriteNumber("expires_in", oauth2TokenResponse.ExpiresInOption.Value!.Value);

            if (oauth2TokenResponse.ScopeOption.IsSet)
            {
                writer.WritePropertyName("scope");
                JsonSerializer.Serialize(writer, oauth2TokenResponse.Scope, jsonSerializerOptions);
            }
            if (oauth2TokenResponse.TokenTypeOption.IsSet)
                writer.WriteString("token_type", oauth2TokenResponse.TokenType);
        }
    }
}
